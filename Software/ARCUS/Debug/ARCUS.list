
ARCUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e94  08009fbc  08009fbc  00019fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce50  0800ce50  0001ce50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ce58  0800ce58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ce5c  0800ce5c  0001ce5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800ce60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  0800ced8  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  0800cf38  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004768  24000138  0800cf98  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240048a0  0800cf98  000248a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce6d  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4d  00000000  00000000  0003cfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0003ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00041138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038e8f  00000000  00000000  000421c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c0b  00000000  00000000  0007b057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001651c1  00000000  00000000  00094c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f9e23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee4  00000000  00000000  001f9e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009fa4 	.word	0x08009fa4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	08009fa4 	.word	0x08009fa4

080002e0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002e0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002e2:	2b01      	cmp	r3, #1
	IT       LS
 80002e4:	bf98      	it	ls
	BXLS     lr
 80002e6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ec:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002fe:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000300:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000302:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000304:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800030e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000314:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000318:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800031c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000320:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800032a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800033c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800033e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000340:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800034a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800034c:	2b01      	cmp	r3, #1
	IT       LS
 800034e:	bf98      	it	ls
	BXLS     lr
 8000350:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000356:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000362:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000380:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000386:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800038a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800038e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000392:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000394:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000396:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b974 	b.w	8000750 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	468e      	mov	lr, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14d      	bne.n	800052a <__udivmoddi4+0xaa>
 800048e:	428a      	cmp	r2, r1
 8000490:	4694      	mov	ip, r2
 8000492:	d969      	bls.n	8000568 <__udivmoddi4+0xe8>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b152      	cbz	r2, 80004b0 <__udivmoddi4+0x30>
 800049a:	fa01 f302 	lsl.w	r3, r1, r2
 800049e:	f1c2 0120 	rsb	r1, r2, #32
 80004a2:	fa20 f101 	lsr.w	r1, r0, r1
 80004a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80004aa:	ea41 0e03 	orr.w	lr, r1, r3
 80004ae:	4094      	lsls	r4, r2
 80004b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b4:	0c21      	lsrs	r1, r4, #16
 80004b6:	fbbe f6f8 	udiv	r6, lr, r8
 80004ba:	fa1f f78c 	uxth.w	r7, ip
 80004be:	fb08 e316 	mls	r3, r8, r6, lr
 80004c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004c6:	fb06 f107 	mul.w	r1, r6, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004d6:	f080 811f 	bcs.w	8000718 <__udivmoddi4+0x298>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 811c 	bls.w	8000718 <__udivmoddi4+0x298>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a5b      	subs	r3, r3, r1
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004ec:	fb08 3310 	mls	r3, r8, r0, r3
 80004f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f4:	fb00 f707 	mul.w	r7, r0, r7
 80004f8:	42a7      	cmp	r7, r4
 80004fa:	d90a      	bls.n	8000512 <__udivmoddi4+0x92>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 33ff 	add.w	r3, r0, #4294967295
 8000504:	f080 810a 	bcs.w	800071c <__udivmoddi4+0x29c>
 8000508:	42a7      	cmp	r7, r4
 800050a:	f240 8107 	bls.w	800071c <__udivmoddi4+0x29c>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000516:	1be4      	subs	r4, r4, r7
 8000518:	2600      	movs	r6, #0
 800051a:	b11d      	cbz	r5, 8000524 <__udivmoddi4+0xa4>
 800051c:	40d4      	lsrs	r4, r2
 800051e:	2300      	movs	r3, #0
 8000520:	e9c5 4300 	strd	r4, r3, [r5]
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d909      	bls.n	8000542 <__udivmoddi4+0xc2>
 800052e:	2d00      	cmp	r5, #0
 8000530:	f000 80ef 	beq.w	8000712 <__udivmoddi4+0x292>
 8000534:	2600      	movs	r6, #0
 8000536:	e9c5 0100 	strd	r0, r1, [r5]
 800053a:	4630      	mov	r0, r6
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	fab3 f683 	clz	r6, r3
 8000546:	2e00      	cmp	r6, #0
 8000548:	d14a      	bne.n	80005e0 <__udivmoddi4+0x160>
 800054a:	428b      	cmp	r3, r1
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xd4>
 800054e:	4282      	cmp	r2, r0
 8000550:	f200 80f9 	bhi.w	8000746 <__udivmoddi4+0x2c6>
 8000554:	1a84      	subs	r4, r0, r2
 8000556:	eb61 0303 	sbc.w	r3, r1, r3
 800055a:	2001      	movs	r0, #1
 800055c:	469e      	mov	lr, r3
 800055e:	2d00      	cmp	r5, #0
 8000560:	d0e0      	beq.n	8000524 <__udivmoddi4+0xa4>
 8000562:	e9c5 4e00 	strd	r4, lr, [r5]
 8000566:	e7dd      	b.n	8000524 <__udivmoddi4+0xa4>
 8000568:	b902      	cbnz	r2, 800056c <__udivmoddi4+0xec>
 800056a:	deff      	udf	#255	; 0xff
 800056c:	fab2 f282 	clz	r2, r2
 8000570:	2a00      	cmp	r2, #0
 8000572:	f040 8092 	bne.w	800069a <__udivmoddi4+0x21a>
 8000576:	eba1 010c 	sub.w	r1, r1, ip
 800057a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057e:	fa1f fe8c 	uxth.w	lr, ip
 8000582:	2601      	movs	r6, #1
 8000584:	0c20      	lsrs	r0, r4, #16
 8000586:	fbb1 f3f7 	udiv	r3, r1, r7
 800058a:	fb07 1113 	mls	r1, r7, r3, r1
 800058e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000592:	fb0e f003 	mul.w	r0, lr, r3
 8000596:	4288      	cmp	r0, r1
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x12c>
 800059a:	eb1c 0101 	adds.w	r1, ip, r1
 800059e:	f103 38ff 	add.w	r8, r3, #4294967295
 80005a2:	d202      	bcs.n	80005aa <__udivmoddi4+0x12a>
 80005a4:	4288      	cmp	r0, r1
 80005a6:	f200 80cb 	bhi.w	8000740 <__udivmoddi4+0x2c0>
 80005aa:	4643      	mov	r3, r8
 80005ac:	1a09      	subs	r1, r1, r0
 80005ae:	b2a4      	uxth	r4, r4
 80005b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b4:	fb07 1110 	mls	r1, r7, r0, r1
 80005b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005bc:	fb0e fe00 	mul.w	lr, lr, r0
 80005c0:	45a6      	cmp	lr, r4
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x156>
 80005c4:	eb1c 0404 	adds.w	r4, ip, r4
 80005c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005cc:	d202      	bcs.n	80005d4 <__udivmoddi4+0x154>
 80005ce:	45a6      	cmp	lr, r4
 80005d0:	f200 80bb 	bhi.w	800074a <__udivmoddi4+0x2ca>
 80005d4:	4608      	mov	r0, r1
 80005d6:	eba4 040e 	sub.w	r4, r4, lr
 80005da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005de:	e79c      	b.n	800051a <__udivmoddi4+0x9a>
 80005e0:	f1c6 0720 	rsb	r7, r6, #32
 80005e4:	40b3      	lsls	r3, r6
 80005e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ee:	fa20 f407 	lsr.w	r4, r0, r7
 80005f2:	fa01 f306 	lsl.w	r3, r1, r6
 80005f6:	431c      	orrs	r4, r3
 80005f8:	40f9      	lsrs	r1, r7
 80005fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000602:	fbb1 f8f9 	udiv	r8, r1, r9
 8000606:	0c20      	lsrs	r0, r4, #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fb09 1118 	mls	r1, r9, r8, r1
 8000610:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000614:	fb08 f00e 	mul.w	r0, r8, lr
 8000618:	4288      	cmp	r0, r1
 800061a:	fa02 f206 	lsl.w	r2, r2, r6
 800061e:	d90b      	bls.n	8000638 <__udivmoddi4+0x1b8>
 8000620:	eb1c 0101 	adds.w	r1, ip, r1
 8000624:	f108 3aff 	add.w	sl, r8, #4294967295
 8000628:	f080 8088 	bcs.w	800073c <__udivmoddi4+0x2bc>
 800062c:	4288      	cmp	r0, r1
 800062e:	f240 8085 	bls.w	800073c <__udivmoddi4+0x2bc>
 8000632:	f1a8 0802 	sub.w	r8, r8, #2
 8000636:	4461      	add	r1, ip
 8000638:	1a09      	subs	r1, r1, r0
 800063a:	b2a4      	uxth	r4, r4
 800063c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000640:	fb09 1110 	mls	r1, r9, r0, r1
 8000644:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000648:	fb00 fe0e 	mul.w	lr, r0, lr
 800064c:	458e      	cmp	lr, r1
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x1e2>
 8000650:	eb1c 0101 	adds.w	r1, ip, r1
 8000654:	f100 34ff 	add.w	r4, r0, #4294967295
 8000658:	d26c      	bcs.n	8000734 <__udivmoddi4+0x2b4>
 800065a:	458e      	cmp	lr, r1
 800065c:	d96a      	bls.n	8000734 <__udivmoddi4+0x2b4>
 800065e:	3802      	subs	r0, #2
 8000660:	4461      	add	r1, ip
 8000662:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000666:	fba0 9402 	umull	r9, r4, r0, r2
 800066a:	eba1 010e 	sub.w	r1, r1, lr
 800066e:	42a1      	cmp	r1, r4
 8000670:	46c8      	mov	r8, r9
 8000672:	46a6      	mov	lr, r4
 8000674:	d356      	bcc.n	8000724 <__udivmoddi4+0x2a4>
 8000676:	d053      	beq.n	8000720 <__udivmoddi4+0x2a0>
 8000678:	b15d      	cbz	r5, 8000692 <__udivmoddi4+0x212>
 800067a:	ebb3 0208 	subs.w	r2, r3, r8
 800067e:	eb61 010e 	sbc.w	r1, r1, lr
 8000682:	fa01 f707 	lsl.w	r7, r1, r7
 8000686:	fa22 f306 	lsr.w	r3, r2, r6
 800068a:	40f1      	lsrs	r1, r6
 800068c:	431f      	orrs	r7, r3
 800068e:	e9c5 7100 	strd	r7, r1, [r5]
 8000692:	2600      	movs	r6, #0
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	40d8      	lsrs	r0, r3
 80006a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a4:	fa21 f303 	lsr.w	r3, r1, r3
 80006a8:	4091      	lsls	r1, r2
 80006aa:	4301      	orrs	r1, r0
 80006ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b0:	fa1f fe8c 	uxth.w	lr, ip
 80006b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80006b8:	fb07 3610 	mls	r6, r7, r0, r3
 80006bc:	0c0b      	lsrs	r3, r1, #16
 80006be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006c2:	fb00 f60e 	mul.w	r6, r0, lr
 80006c6:	429e      	cmp	r6, r3
 80006c8:	fa04 f402 	lsl.w	r4, r4, r2
 80006cc:	d908      	bls.n	80006e0 <__udivmoddi4+0x260>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006d6:	d22f      	bcs.n	8000738 <__udivmoddi4+0x2b8>
 80006d8:	429e      	cmp	r6, r3
 80006da:	d92d      	bls.n	8000738 <__udivmoddi4+0x2b8>
 80006dc:	3802      	subs	r0, #2
 80006de:	4463      	add	r3, ip
 80006e0:	1b9b      	subs	r3, r3, r6
 80006e2:	b289      	uxth	r1, r1
 80006e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006e8:	fb07 3316 	mls	r3, r7, r6, r3
 80006ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f0:	fb06 f30e 	mul.w	r3, r6, lr
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d908      	bls.n	800070a <__udivmoddi4+0x28a>
 80006f8:	eb1c 0101 	adds.w	r1, ip, r1
 80006fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000700:	d216      	bcs.n	8000730 <__udivmoddi4+0x2b0>
 8000702:	428b      	cmp	r3, r1
 8000704:	d914      	bls.n	8000730 <__udivmoddi4+0x2b0>
 8000706:	3e02      	subs	r6, #2
 8000708:	4461      	add	r1, ip
 800070a:	1ac9      	subs	r1, r1, r3
 800070c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000710:	e738      	b.n	8000584 <__udivmoddi4+0x104>
 8000712:	462e      	mov	r6, r5
 8000714:	4628      	mov	r0, r5
 8000716:	e705      	b.n	8000524 <__udivmoddi4+0xa4>
 8000718:	4606      	mov	r6, r0
 800071a:	e6e3      	b.n	80004e4 <__udivmoddi4+0x64>
 800071c:	4618      	mov	r0, r3
 800071e:	e6f8      	b.n	8000512 <__udivmoddi4+0x92>
 8000720:	454b      	cmp	r3, r9
 8000722:	d2a9      	bcs.n	8000678 <__udivmoddi4+0x1f8>
 8000724:	ebb9 0802 	subs.w	r8, r9, r2
 8000728:	eb64 0e0c 	sbc.w	lr, r4, ip
 800072c:	3801      	subs	r0, #1
 800072e:	e7a3      	b.n	8000678 <__udivmoddi4+0x1f8>
 8000730:	4646      	mov	r6, r8
 8000732:	e7ea      	b.n	800070a <__udivmoddi4+0x28a>
 8000734:	4620      	mov	r0, r4
 8000736:	e794      	b.n	8000662 <__udivmoddi4+0x1e2>
 8000738:	4640      	mov	r0, r8
 800073a:	e7d1      	b.n	80006e0 <__udivmoddi4+0x260>
 800073c:	46d0      	mov	r8, sl
 800073e:	e77b      	b.n	8000638 <__udivmoddi4+0x1b8>
 8000740:	3b02      	subs	r3, #2
 8000742:	4461      	add	r1, ip
 8000744:	e732      	b.n	80005ac <__udivmoddi4+0x12c>
 8000746:	4630      	mov	r0, r6
 8000748:	e709      	b.n	800055e <__udivmoddi4+0xde>
 800074a:	4464      	add	r4, ip
 800074c:	3802      	subs	r0, #2
 800074e:	e742      	b.n	80005d6 <__udivmoddi4+0x156>

08000750 <__aeabi_idiv0>:
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <SPI_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SPI_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ch_sel_Pin, GPIO_PIN_RESET);  // chsel PIN , AIN1 selected
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <SPI_Init+0x24>)
 8000760:	f004 f8cc 	bl	80048fc <HAL_GPIO_WritePin>

    SPI1->CR1|=SPI_CR1_CSTART|SPI_CR1_SPE;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SPI_Init+0x28>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4904      	ldr	r1, [pc, #16]	; (800077c <SPI_Init+0x28>)
 800076a:	f240 2301 	movw	r3, #513	; 0x201
 800076e:	4313      	orrs	r3, r2
 8000770:	600b      	str	r3, [r1, #0]
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58020400 	.word	0x58020400
 800077c:	40013000 	.word	0x40013000

08000780 <SPI_Read>:

void SPI_Read (void )
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
uint16_t spi_data = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	807b      	strh	r3, [r7, #2]
	  for (size_t i = 0; i < 2048; i++)
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	e00c      	b.n	80007aa <SPI_Read+0x2a>
	  {
		  HAL_SPI_Receive(&hspi1, (uint8_t*)&spi_data_buf[i], sizeof(uint16_t), SPI_READ_TIMEOUT);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <SPI_Read+0x68>)
 8000796:	1899      	adds	r1, r3, r2
 8000798:	f241 7370 	movw	r3, #6000	; 0x1770
 800079c:	2202      	movs	r2, #2
 800079e:	4813      	ldr	r0, [pc, #76]	; (80007ec <SPI_Read+0x6c>)
 80007a0:	f006 fe80 	bl	80074a4 <HAL_SPI_Receive>
	  for (size_t i = 0; i < 2048; i++)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007b0:	d3ee      	bcc.n	8000790 <SPI_Read+0x10>
	  }
	uint16_t  adc_val = (uint16_t)*spi_data_buf;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <SPI_Read+0x68>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	803b      	strh	r3, [r7, #0]
	volt_value=(float)adc_val* adc_conversion;
 80007b8:	883b      	ldrh	r3, [r7, #0]
 80007ba:	ee07 3a90 	vmov	s15, r3
 80007be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007c6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80007e0 <SPI_Read+0x60>
 80007ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <SPI_Read+0x70>)
 80007d4:	edc3 7a00 	vstr	s15, [r3]

}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	4db41a81 	.word	0x4db41a81
 80007e4:	3f5a80e7 	.word	0x3f5a80e7
 80007e8:	2400086c 	.word	0x2400086c
 80007ec:	2400023c 	.word	0x2400023c
 80007f0:	2400186c 	.word	0x2400186c
 80007f4:	00000000 	.word	0x00000000

080007f8 <ADC_ComputeFFT>:
	uint16_t  adc_val = (uint16_t)*dma_data_buf;
		volt_value=(float)adc_val* adc_conversion;
}

void ADC_ComputeFFT(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
	 for (size_t i = 0; i < 1024 ; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e018      	b.n	8000836 <ADC_ComputeFFT+0x3e>
	       {
	         FFTin[i] = (float32_t)(spi_data_buf[i]) * adc_conversion;
 8000804:	4a5a      	ldr	r2, [pc, #360]	; (8000970 <ADC_ComputeFFT+0x178>)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080c:	ee07 3a90 	vmov	s15, r3
 8000810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000814:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000818:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8000968 <ADC_ComputeFFT+0x170>
 800081c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000820:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000824:	4a53      	ldr	r2, [pc, #332]	; (8000974 <ADC_ComputeFFT+0x17c>)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	edc3 7a00 	vstr	s15, [r3]
	 for (size_t i = 0; i < 1024 ; i++)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3301      	adds	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800083c:	d3e2      	bcc.n	8000804 <ADC_ComputeFFT+0xc>
	       }


	uint32_t idx;
	for(int i = 0; i < 1024; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	e00e      	b.n	8000862 <ADC_ComputeFFT+0x6a>
	{
		FFTin[i + 1024] = FFTin[i];
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800084a:	494a      	ldr	r1, [pc, #296]	; (8000974 <ADC_ComputeFFT+0x17c>)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	440a      	add	r2, r1
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	4947      	ldr	r1, [pc, #284]	; (8000974 <ADC_ComputeFFT+0x17c>)
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	440b      	add	r3, r1
 800085a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 1024; i++)
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	3301      	adds	r3, #1
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000868:	dbec      	blt.n	8000844 <ADC_ComputeFFT+0x4c>
	}
	for(int i = 0; i < 1024; i++)//trochu upravit slozeni dat...{Re, Im, Re, Im....}, Im=0.0
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e018      	b.n	80008a2 <ADC_ComputeFFT+0xaa>
	{
		FFTin[(2 * i)] = FFTin[i + 1024];
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	493e      	ldr	r1, [pc, #248]	; (8000974 <ADC_ComputeFFT+0x17c>)
 800087c:	0092      	lsls	r2, r2, #2
 800087e:	440a      	add	r2, r1
 8000880:	6812      	ldr	r2, [r2, #0]
 8000882:	493c      	ldr	r1, [pc, #240]	; (8000974 <ADC_ComputeFFT+0x17c>)
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	601a      	str	r2, [r3, #0]
		FFTin[(2 * i) + 1] = 0.0;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	3301      	adds	r3, #1
 8000890:	4a38      	ldr	r2, [pc, #224]	; (8000974 <ADC_ComputeFFT+0x17c>)
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	f04f 0200 	mov.w	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 1024; i++)//trochu upravit slozeni dat...{Re, Im, Re, Im....}, Im=0.0
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3301      	adds	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008a8:	dbe2      	blt.n	8000870 <ADC_ComputeFFT+0x78>
	}
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTin, ifftFlag, 1);
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <ADC_ComputeFFT+0x180>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	2301      	movs	r3, #1
 80008b2:	4930      	ldr	r1, [pc, #192]	; (8000974 <ADC_ComputeFFT+0x17c>)
 80008b4:	4831      	ldr	r0, [pc, #196]	; (800097c <ADC_ComputeFFT+0x184>)
 80008b6:	f001 ffd3 	bl	8002860 <arm_cfft_f32>
	arm_cmplx_mag_f32(FFTin, FFTOutput, fftSize);
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <ADC_ComputeFFT+0x188>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4930      	ldr	r1, [pc, #192]	; (8000984 <ADC_ComputeFFT+0x18c>)
 80008c2:	482c      	ldr	r0, [pc, #176]	; (8000974 <ADC_ComputeFFT+0x17c>)
 80008c4:	f000 fe6b 	bl	800159e <arm_cmplx_mag_f32>
	arm_max_f32(FFTOutput, 512, &maxFFT, &idx);
 80008c8:	463b      	mov	r3, r7
 80008ca:	4a2f      	ldr	r2, [pc, #188]	; (8000988 <ADC_ComputeFFT+0x190>)
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	482c      	ldr	r0, [pc, #176]	; (8000984 <ADC_ComputeFFT+0x18c>)
 80008d2:	f000 ff10 	bl	80016f6 <arm_max_f32>
	arm_max_f32(&FFTOutput[idx], 512-idx, &maxSecondFFT, &idx);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4a2a      	ldr	r2, [pc, #168]	; (8000984 <ADC_ComputeFFT+0x18c>)
 80008dc:	1898      	adds	r0, r3, r2
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 80008e4:	463b      	mov	r3, r7
 80008e6:	4a29      	ldr	r2, [pc, #164]	; (800098c <ADC_ComputeFFT+0x194>)
 80008e8:	f000 ff05 	bl	80016f6 <arm_max_f32>
	maxSecondFFT = 100*maxFFT/maxSecondFFT;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <ADC_ComputeFFT+0x190>)
 80008ee:	edd3 7a00 	vldr	s15, [r3]
 80008f2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000990 <ADC_ComputeFFT+0x198>
 80008f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <ADC_ComputeFFT+0x194>)
 80008fc:	ed93 7a00 	vldr	s14, [r3]
 8000900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <ADC_ComputeFFT+0x194>)
 8000906:	edc3 7a00 	vstr	s15, [r3]
	maxIdxSecondFFT = idx;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <ADC_ComputeFFT+0x19c>)
 800090e:	6013      	str	r3, [r2, #0]
	//SSD1306Bargraph(128, maxFFT*4, FFTOutput, 0, 0, 127);

	for(int i = 0; i < 1024; i++)
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	e01c      	b.n	8000950 <ADC_ComputeFFT+0x158>
	{

		sprintf(uart_output_buf, "%d\r\n", FFTOutput[i]);
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <ADC_ComputeFFT+0x18c>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000926:	ec53 2b17 	vmov	r2, r3, d7
 800092a:	491b      	ldr	r1, [pc, #108]	; (8000998 <ADC_ComputeFFT+0x1a0>)
 800092c:	481b      	ldr	r0, [pc, #108]	; (800099c <ADC_ComputeFFT+0x1a4>)
 800092e:	f008 fea9 	bl	8009684 <siprintf>
		size_t buf_size = strlen(uart_output_buf);
 8000932:	481a      	ldr	r0, [pc, #104]	; (800099c <ADC_ComputeFFT+0x1a4>)
 8000934:	f7ff fd34 	bl	80003a0 <strlen>
 8000938:	6078      	str	r0, [r7, #4]

		HAL_UART_Transmit(&huart3, (uint8_t*)uart_output_buf, buf_size, UART_TX_TIMEOUT);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	b29a      	uxth	r2, r3
 800093e:	f241 7370 	movw	r3, #6000	; 0x1770
 8000942:	4916      	ldr	r1, [pc, #88]	; (800099c <ADC_ComputeFFT+0x1a4>)
 8000944:	4816      	ldr	r0, [pc, #88]	; (80009a0 <ADC_ComputeFFT+0x1a8>)
 8000946:	f007 faaa 	bl	8007e9e <HAL_UART_Transmit>
	for(int i = 0; i < 1024; i++)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3301      	adds	r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000956:	dbde      	blt.n	8000916 <ADC_ComputeFFT+0x11e>

	}
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	f3af 8000 	nop.w
 8000968:	4db41a81 	.word	0x4db41a81
 800096c:	3f5a80e7 	.word	0x3f5a80e7
 8000970:	2400086c 	.word	0x2400086c
 8000974:	24001870 	.word	0x24001870
 8000978:	24004870 	.word	0x24004870
 800097c:	0800cde4 	.word	0x0800cde4
 8000980:	24000000 	.word	0x24000000
 8000984:	24003870 	.word	0x24003870
 8000988:	24004878 	.word	0x24004878
 800098c:	2400487c 	.word	0x2400487c
 8000990:	42c80000 	.word	0x42c80000
 8000994:	24004874 	.word	0x24004874
 8000998:	08009fbc 	.word	0x08009fbc
 800099c:	24000860 	.word	0x24000860
 80009a0:	240002c4 	.word	0x240002c4

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f003 f81a 	bl	80039e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f812 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f000 f9b4 	bl	8000d1c <MX_GPIO_Init>
  MX_ETH_Init();
 80009b4:	f000 f88e 	bl	8000ad4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009b8:	f000 f932 	bl	8000c20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009bc:	f000 f97c 	bl	8000cb8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80009c0:	f000 f8d4 	bl	8000b6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SPI_Init() ;
 80009c4:	f7ff fec6 	bl	8000754 <SPI_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  SPI_Read();
 80009c8:	f7ff feda 	bl	8000780 <SPI_Read>

	        ADC_ComputeFFT();
 80009cc:	f7ff ff14 	bl	80007f8 <ADC_ComputeFFT>
	  SPI_Read();
 80009d0:	e7fa      	b.n	80009c8 <main+0x24>
	...

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	; 0x70
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	224c      	movs	r2, #76	; 0x4c
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f008 fe46 	bl	8009674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2220      	movs	r2, #32
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 fe40 	bl	8009674 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f004 f8e3 	bl	8004bc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <SystemClock_Config+0xf8>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	4a32      	ldr	r2, [pc, #200]	; (8000acc <SystemClock_Config+0xf8>)
 8000a04:	f023 0301 	bic.w	r3, r3, #1
 8000a08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <SystemClock_Config+0xf8>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a1c:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a30:	bf00      	nop
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a3e:	d1f8      	bne.n	8000a32 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a40:	2303      	movs	r3, #3
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4e:	2340      	movs	r3, #64	; 0x40
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a5e:	2318      	movs	r3, #24
 8000a60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a66:	2304      	movs	r3, #4
 8000a68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 f8e8 	bl	8004c54 <HAL_RCC_OscConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a8a:	f000 fa23 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	233f      	movs	r3, #63	; 0x3f
 8000a90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f004 fcfc 	bl	80054b0 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000abe:	f000 fa09 	bl	8000ed4 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3770      	adds	r7, #112	; 0x70
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58000400 	.word	0x58000400
 8000ad0:	58024800 	.word	0x58024800

08000ad4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_ETH_Init+0x80>)
 8000ada:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <MX_ETH_Init+0x84>)
 8000adc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <MX_ETH_Init+0x88>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_ETH_Init+0x88>)
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_ETH_Init+0x88>)
 8000aec:	22e1      	movs	r2, #225	; 0xe1
 8000aee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_ETH_Init+0x88>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MX_ETH_Init+0x88>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_ETH_Init+0x88>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_ETH_Init+0x80>)
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_ETH_Init+0x88>)
 8000b06:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_ETH_Init+0x80>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_ETH_Init+0x80>)
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <MX_ETH_Init+0x8c>)
 8000b12:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_ETH_Init+0x80>)
 8000b16:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <MX_ETH_Init+0x90>)
 8000b18:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_ETH_Init+0x80>)
 8000b1c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b20:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <MX_ETH_Init+0x80>)
 8000b24:	f003 f916 	bl	8003d54 <HAL_ETH_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b2e:	f000 f9d1 	bl	8000ed4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b32:	2238      	movs	r2, #56	; 0x38
 8000b34:	2100      	movs	r1, #0
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_ETH_Init+0x94>)
 8000b38:	f008 fd9c 	bl	8009674 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_ETH_Init+0x94>)
 8000b3e:	2221      	movs	r2, #33	; 0x21
 8000b40:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_ETH_Init+0x94>)
 8000b44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b48:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_ETH_Init+0x94>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2400018c 	.word	0x2400018c
 8000b58:	40028000 	.word	0x40028000
 8000b5c:	24004880 	.word	0x24004880
 8000b60:	240000d8 	.word	0x240000d8
 8000b64:	24000078 	.word	0x24000078
 8000b68:	24000154 	.word	0x24000154

08000b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000b72:	4a2a      	ldr	r2, [pc, #168]	; (8000c1c <MX_SPI1_Init+0xb0>)
 8000b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000b78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000b80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b84:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000b88:	220b      	movs	r2, #11
 8000b8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000b96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000b9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ba2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000baa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_SPI1_Init+0xac>)
 8000c04:	f006 fb48 	bl	8007298 <HAL_SPI_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 8000c0e:	f000 f961 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2400023c 	.word	0x2400023c
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <MX_USART3_UART_Init+0x94>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c6a:	f007 f8c8 	bl	8007dfe <HAL_UART_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c74:	f000 f92e 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c7c:	f008 f8fc 	bl	8008e78 <HAL_UARTEx_SetTxFifoThreshold>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c86:	f000 f925 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c8e:	f008 f931 	bl	8008ef4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c98:	f000 f91c 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_USART3_UART_Init+0x90>)
 8000c9e:	f008 f8b2 	bl	8008e06 <HAL_UARTEx_DisableFifoMode>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 f914 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240002c4 	.word	0x240002c4
 8000cb4:	40004800 	.word	0x40004800

08000cb8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cbe:	4a16      	ldr	r2, [pc, #88]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc4:	2209      	movs	r2, #9
 8000cc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cca:	2202      	movs	r2, #2
 8000ccc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d00:	f003 fe15 	bl	800492e <HAL_PCD_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d0a:	f000 f8e3 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	24000354 	.word	0x24000354
 8000d18:	40080000 	.word	0x40080000

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	4a60      	ldr	r2, [pc, #384]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d42:	4b5e      	ldr	r3, [pc, #376]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d50:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	4a59      	ldr	r2, [pc, #356]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d60:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	4a51      	ldr	r2, [pc, #324]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7e:	4b4f      	ldr	r3, [pc, #316]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a4a      	ldr	r2, [pc, #296]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a3b      	ldr	r2, [pc, #236]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <MX_GPIO_Init+0x1a0>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|ch_sel_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f245 0101 	movw	r1, #20481	; 0x5001
 8000e0a:	482d      	ldr	r0, [pc, #180]	; (8000ec0 <MX_GPIO_Init+0x1a4>)
 8000e0c:	f003 fd76 	bl	80048fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e16:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <MX_GPIO_Init+0x1a8>)
 8000e18:	f003 fd70 	bl	80048fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4829      	ldr	r0, [pc, #164]	; (8000ec8 <MX_GPIO_Init+0x1ac>)
 8000e22:	f003 fd6b 	bl	80048fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4824      	ldr	r0, [pc, #144]	; (8000ecc <MX_GPIO_Init+0x1b0>)
 8000e3c:	f003 fbae 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin ch_sel_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|ch_sel_Pin|LD3_Pin;
 8000e40:	f245 0301 	movw	r3, #20481	; 0x5001
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <MX_GPIO_Init+0x1a4>)
 8000e5a:	f003 fb9f 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_GPIO_Init+0x1a8>)
 8000e78:	f003 fb90 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <MX_GPIO_Init+0x1b4>)
 8000e92:	f003 fb83 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <MX_GPIO_Init+0x1ac>)
 8000eae:	f003 fb75 	bl	800459c <HAL_GPIO_Init>

}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020400 	.word	0x58020400
 8000ec4:	58020c00 	.word	0x58020c00
 8000ec8:	58021000 	.word	0x58021000
 8000ecc:	58020800 	.word	0x58020800
 8000ed0:	58021800 	.word	0x58021800

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_MspInit+0x30>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eec:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x30>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x30>)
 8000ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	58024400 	.word	0x58024400

08000f14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a59      	ldr	r2, [pc, #356]	; (8001098 <HAL_ETH_MspInit+0x184>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	f040 80ab 	bne.w	800108e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f38:	4b58      	ldr	r3, [pc, #352]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3e:	4a57      	ldr	r2, [pc, #348]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f48:	4b54      	ldr	r3, [pc, #336]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f52:	623b      	str	r3, [r7, #32]
 8000f54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f66:	4b4d      	ldr	r3, [pc, #308]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f74:	4b49      	ldr	r3, [pc, #292]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f84:	4b45      	ldr	r3, [pc, #276]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b42      	ldr	r3, [pc, #264]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	4a40      	ldr	r2, [pc, #256]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa2:	4b3e      	ldr	r3, [pc, #248]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a39      	ldr	r2, [pc, #228]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a31      	ldr	r2, [pc, #196]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a2a      	ldr	r2, [pc, #168]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_ETH_MspInit+0x188>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800100a:	2332      	movs	r3, #50	; 0x32
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101a:	230b      	movs	r3, #11
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	481e      	ldr	r0, [pc, #120]	; (80010a0 <HAL_ETH_MspInit+0x18c>)
 8001026:	f003 fab9 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800102a:	2386      	movs	r3, #134	; 0x86
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103a:	230b      	movs	r3, #11
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4817      	ldr	r0, [pc, #92]	; (80010a4 <HAL_ETH_MspInit+0x190>)
 8001046:	f003 faa9 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105c:	230b      	movs	r3, #11
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	4810      	ldr	r0, [pc, #64]	; (80010a8 <HAL_ETH_MspInit+0x194>)
 8001068:	f003 fa98 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800106c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107e:	230b      	movs	r3, #11
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <HAL_ETH_MspInit+0x198>)
 800108a:	f003 fa87 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3738      	adds	r7, #56	; 0x38
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40028000 	.word	0x40028000
 800109c:	58024400 	.word	0x58024400
 80010a0:	58020800 	.word	0x58020800
 80010a4:	58020000 	.word	0x58020000
 80010a8:	58020400 	.word	0x58020400
 80010ac:	58021800 	.word	0x58021800

080010b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0b8      	sub	sp, #224	; 0xe0
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	22bc      	movs	r2, #188	; 0xbc
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f008 facf 	bl	8009674 <memset>
  if(hspi->Instance==SPI1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_SPI_MspInit+0xbc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d141      	bne.n	8001164 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fd6a 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80010fa:	f7ff feeb 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_SPI_MspInit+0xc0>)
 8001100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001104:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <HAL_SPI_MspInit+0xc0>)
 8001106:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800110a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_SPI_MspInit+0xc0>)
 8001110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_SPI_MspInit+0xc0>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_SPI_MspInit+0xc0>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_SPI_MspInit+0xc0>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800113a:	2370      	movs	r3, #112	; 0x70
 800113c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001152:	2305      	movs	r3, #5
 8001154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800115c:	4619      	mov	r1, r3
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_SPI_MspInit+0xc4>)
 8001160:	f003 fa1c 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001164:	bf00      	nop
 8001166:	37e0      	adds	r7, #224	; 0xe0
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013000 	.word	0x40013000
 8001170:	58024400 	.word	0x58024400
 8001174:	58020000 	.word	0x58020000

08001178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0b8      	sub	sp, #224	; 0xe0
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	22bc      	movs	r2, #188	; 0xbc
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f008 fa6b 	bl	8009674 <memset>
  if(huart->Instance==USART3)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <HAL_UART_MspInit+0xc0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d142      	bne.n	800122e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011a8:	2302      	movs	r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fd06 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011c2:	f7ff fe87 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_UART_MspInit+0xc4>)
 80011c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_UART_MspInit+0xc4>)
 80011ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_UART_MspInit+0xc4>)
 80011d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_UART_MspInit+0xc4>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_UART_MspInit+0xc4>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_UART_MspInit+0xc4>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001202:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001206:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121c:	2307      	movs	r3, #7
 800121e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001222:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_UART_MspInit+0xc8>)
 800122a:	f003 f9b7 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	37e0      	adds	r7, #224	; 0xe0
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40004800 	.word	0x40004800
 800123c:	58024400 	.word	0x58024400
 8001240:	58020c00 	.word	0x58020c00

08001244 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b8      	sub	sp, #224	; 0xe0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	22bc      	movs	r2, #188	; 0xbc
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f008 fa05 	bl	8009674 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2f      	ldr	r2, [pc, #188]	; (800132c <HAL_PCD_MspInit+0xe8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d156      	bne.n	8001322 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001274:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001278:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800127a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800127e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fc9e 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001292:	f7ff fe1f 	bl	8000ed4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001296:	f003 fccd 	bl	8004c34 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_PCD_MspInit+0xec>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a23      	ldr	r2, [pc, #140]	; (8001330 <HAL_PCD_MspInit+0xec>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_PCD_MspInit+0xec>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012b8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012d2:	230a      	movs	r3, #10
 80012d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012dc:	4619      	mov	r1, r3
 80012de:	4815      	ldr	r0, [pc, #84]	; (8001334 <HAL_PCD_MspInit+0xf0>)
 80012e0:	f003 f95c 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <HAL_PCD_MspInit+0xf0>)
 8001300:	f003 f94c 	bl	800459c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_PCD_MspInit+0xec>)
 8001306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <HAL_PCD_MspInit+0xec>)
 800130c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001310:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_PCD_MspInit+0xec>)
 8001316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800131a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	37e0      	adds	r7, #224	; 0xe0
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40080000 	.word	0x40080000
 8001330:	58024400 	.word	0x58024400
 8001334:	58020000 	.word	0x58020000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f002 fb9e 	bl	8003ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f008 f930 	bl	8009620 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	24080000 	.word	0x24080000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	24004888 	.word	0x24004888
 80013f4:	240048a0 	.word	0x240048a0

080013f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <SystemInit+0xe4>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001402:	4a36      	ldr	r2, [pc, #216]	; (80014dc <SystemInit+0xe4>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <SystemInit+0xe8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	2b06      	cmp	r3, #6
 8001416:	d807      	bhi.n	8001428 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <SystemInit+0xe8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 030f 	bic.w	r3, r3, #15
 8001420:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <SystemInit+0xe8>)
 8001422:	f043 0307 	orr.w	r3, r3, #7
 8001426:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <SystemInit+0xec>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a2d      	ldr	r2, [pc, #180]	; (80014e4 <SystemInit+0xec>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <SystemInit+0xec>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <SystemInit+0xec>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4929      	ldr	r1, [pc, #164]	; (80014e4 <SystemInit+0xec>)
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <SystemInit+0xf0>)
 8001442:	4013      	ands	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <SystemInit+0xe8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <SystemInit+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 030f 	bic.w	r3, r3, #15
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <SystemInit+0xe8>)
 800145c:	f043 0307 	orr.w	r3, r3, #7
 8001460:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <SystemInit+0xec>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <SystemInit+0xec>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <SystemInit+0xec>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <SystemInit+0xec>)
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <SystemInit+0xf4>)
 8001478:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <SystemInit+0xec>)
 800147c:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <SystemInit+0xf8>)
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <SystemInit+0xec>)
 8001482:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <SystemInit+0xfc>)
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <SystemInit+0xec>)
 8001488:	2200      	movs	r2, #0
 800148a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <SystemInit+0xec>)
 800148e:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <SystemInit+0xfc>)
 8001490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <SystemInit+0xec>)
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <SystemInit+0xec>)
 800149a:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <SystemInit+0xfc>)
 800149c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <SystemInit+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <SystemInit+0xec>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <SystemInit+0xec>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <SystemInit+0xec>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <SystemInit+0x100>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <SystemInit+0x104>)
 80014bc:	4013      	ands	r3, r2
 80014be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c2:	d202      	bcs.n	80014ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <SystemInit+0x108>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <SystemInit+0x10c>)
 80014cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	52002000 	.word	0x52002000
 80014e4:	58024400 	.word	0x58024400
 80014e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80014ec:	02020200 	.word	0x02020200
 80014f0:	01ff0000 	.word	0x01ff0000
 80014f4:	01010280 	.word	0x01010280
 80014f8:	5c001000 	.word	0x5c001000
 80014fc:	ffff0000 	.word	0xffff0000
 8001500:	51008108 	.word	0x51008108
 8001504:	52004000 	.word	0x52004000

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800150c:	f7ff ff74 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f008 f879 	bl	800962c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff fa33 	bl	80009a4 <main>
  bx  lr
 800153e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001544:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001548:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800154c:	0800ce60 	.word	0x0800ce60
  ldr r2, =_sbss
 8001550:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8001554:	240048a0 	.word	0x240048a0

08001558 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC3_IRQHandler>

0800155a <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	ed87 0a01 	vstr	s0, [r7, #4]
 8001564:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8001566:	edd7 7a01 	vldr	s15, [r7, #4]
 800156a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	db0a      	blt.n	800158a <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001574:	ed97 0a01 	vldr	s0, [r7, #4]
 8001578:	f008 fcf2 	bl	8009f60 <sqrtf>
 800157c:	eef0 7a40 	vmov.f32	s15, s0
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001586:	2300      	movs	r3, #0
 8001588:	e005      	b.n	8001596 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b088      	sub	sp, #32
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80015b0:	e072      	b.n	8001698 <arm_cmplx_mag_f32+0xfa>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1d1a      	adds	r2, r3, #4
 80015b6:	60fa      	str	r2, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1d1a      	adds	r2, r3, #4
 80015c0:	60fa      	str	r2, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80015c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1d1a      	adds	r2, r3, #4
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	4618      	mov	r0, r3
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	f7ff ffb8 	bl	800155a <arm_sqrt_f32>

    realIn = *pSrc++;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1d1a      	adds	r2, r3, #4
 80015ee:	60fa      	str	r2, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1d1a      	adds	r2, r3, #4
 80015f8:	60fa      	str	r2, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80015fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001602:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001606:	edd7 7a05 	vldr	s15, [r7, #20]
 800160a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800160e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1d1a      	adds	r2, r3, #4
 8001616:	60ba      	str	r2, [r7, #8]
 8001618:	4618      	mov	r0, r3
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	f7ff ff9c 	bl	800155a <arm_sqrt_f32>

    realIn = *pSrc++;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1d1a      	adds	r2, r3, #4
 8001626:	60fa      	str	r2, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1d1a      	adds	r2, r3, #4
 8001630:	60fa      	str	r2, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001636:	edd7 7a06 	vldr	s15, [r7, #24]
 800163a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800163e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001642:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1d1a      	adds	r2, r3, #4
 800164e:	60ba      	str	r2, [r7, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f7ff ff80 	bl	800155a <arm_sqrt_f32>

    realIn = *pSrc++;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	60fa      	str	r2, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1d1a      	adds	r2, r3, #4
 8001668:	60fa      	str	r2, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800166e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001672:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001676:	edd7 7a05 	vldr	s15, [r7, #20]
 800167a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1d1a      	adds	r2, r3, #4
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	4618      	mov	r0, r3
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	f7ff ff64 	bl	800155a <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b01      	subs	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d189      	bne.n	80015b2 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 80016a6:	e01e      	b.n	80016e6 <arm_cmplx_mag_f32+0x148>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1d1a      	adds	r2, r3, #4
 80016ac:	60fa      	str	r2, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1d1a      	adds	r2, r3, #4
 80016b6:	60fa      	str	r2, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80016bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1d1a      	adds	r2, r3, #4
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f7ff ff3d 	bl	800155a <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1dd      	bne.n	80016a8 <arm_cmplx_mag_f32+0x10a>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b08b      	sub	sp, #44	; 0x2c
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1d1a      	adds	r2, r3, #4
 8001710:	60fa      	str	r2, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3b01      	subs	r3, #1
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 800171e:	e051      	b.n	80017c4 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1d1a      	adds	r2, r3, #4
 8001724:	60fa      	str	r2, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1d1a      	adds	r2, r3, #4
 800172e:	60fa      	str	r2, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001734:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001738:	edd7 7a05 	vldr	s15, [r7, #20]
 800173c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	d504      	bpl.n	8001750 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	3301      	adds	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1d1a      	adds	r2, r3, #4
 8001754:	60fa      	str	r2, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 800175a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800175e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	d504      	bpl.n	8001776 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	3302      	adds	r3, #2
 8001774:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1d1a      	adds	r2, r3, #4
 800177a:	60fa      	str	r2, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001780:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001784:	edd7 7a05 	vldr	s15, [r7, #20]
 8001788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	d504      	bpl.n	800179c <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	3303      	adds	r3, #3
 800179a:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 800179c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	d504      	bpl.n	80017b8 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	3304      	adds	r3, #4
 80017b6:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	3304      	adds	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1aa      	bne.n	8001720 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80017d4:	e016      	b.n	8001804 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1d1a      	adds	r2, r3, #4
 80017da:	60fa      	str	r2, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80017e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	d505      	bpl.n	80017fe <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	3b01      	subs	r3, #1
 8001802:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e5      	bne.n	80017d6 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	601a      	str	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	372c      	adds	r7, #44	; 0x2c
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b0a0      	sub	sp, #128	; 0x80
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8001832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8001846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001848:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 800184a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8001850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	4413      	add	r3, r2
 8001858:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 800185a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001860:	4413      	add	r3, r2
 8001862:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8001864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800186a:	e1b6      	b.n	8001bda <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8001884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800188a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8001890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8001896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 800189c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80018a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80018a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80018ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80018b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80018ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80018c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80018c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80018cc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80018d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	1d1a      	adds	r2, r3, #4
 80018d8:	603a      	str	r2, [r7, #0]
 80018da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018de:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80018e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80018e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	1d1a      	adds	r2, r3, #4
 80018ee:	603a      	str	r2, [r7, #0]
 80018f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f4:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 80018f8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80018fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	1d1a      	adds	r2, r3, #4
 8001904:	603a      	str	r2, [r7, #0]
 8001906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800190e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001912:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	1d1a      	adds	r2, r3, #4
 800191a:	603a      	str	r2, [r7, #0]
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8001924:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800192c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001930:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8001934:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001938:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8001944:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001948:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800194c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001950:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8001954:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001958:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001960:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8001964:	ed97 7a06 	vldr	s14, [r7, #24]
 8001968:	edd7 7a02 	vldr	s15, [r7, #8]
 800196c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800196e:	1d1a      	adds	r2, r3, #4
 8001970:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001976:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800197a:	ed97 7a07 	vldr	s14, [r7, #28]
 800197e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001984:	1d1a      	adds	r2, r3, #4
 8001986:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198c:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8001990:	ed97 7a08 	vldr	s14, [r7, #32]
 8001994:	edd7 7a04 	vldr	s15, [r7, #16]
 8001998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199a:	1d1a      	adds	r2, r3, #4
 800199c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a2:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80019a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019b0:	1d1a      	adds	r2, r3, #4
 80019b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80019bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80019c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c8:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80019cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d8:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80019dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80019e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80019e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e8:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80019ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80019f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 80019fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019fe:	1d1a      	adds	r2, r3, #4
 8001a00:	673a      	str	r2, [r7, #112]	; 0x70
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a08:	1d1a      	adds	r2, r3, #4
 8001a0a:	673a      	str	r2, [r7, #112]	; 0x70
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8001a10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a14:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8001a20:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a24:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8001a30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a34:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8001a40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a44:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8001a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a52:	1d1a      	adds	r2, r3, #4
 8001a54:	677a      	str	r2, [r7, #116]	; 0x74
 8001a56:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001a5a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8001a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a68:	1d1a      	adds	r2, r3, #4
 8001a6a:	677a      	str	r2, [r7, #116]	; 0x74
 8001a6c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a70:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8001a7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a80:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a88:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8001a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a90:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8001a9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8001aac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001abe:	1d1a      	adds	r2, r3, #4
 8001ac0:	67ba      	str	r2, [r7, #120]	; 0x78
 8001ac2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ac6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ace:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8001ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ad4:	1d1a      	adds	r2, r3, #4
 8001ad6:	67ba      	str	r2, [r7, #120]	; 0x78
 8001ad8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001adc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8001ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aea:	1d1a      	adds	r2, r3, #4
 8001aec:	673a      	str	r2, [r7, #112]	; 0x70
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af4:	1d1a      	adds	r2, r3, #4
 8001af6:	673a      	str	r2, [r7, #112]	; 0x70
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8001afc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b00:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8001b0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b10:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8001b1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b20:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8001b2c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b30:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b38:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8001b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b3e:	1d1a      	adds	r2, r3, #4
 8001b40:	677a      	str	r2, [r7, #116]	; 0x74
 8001b42:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001b46:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4e:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b54:	1d1a      	adds	r2, r3, #4
 8001b56:	677a      	str	r2, [r7, #116]	; 0x74
 8001b58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b64:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 8001b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b6c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b74:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8001b78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b7c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8001b88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8001b98:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b9c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001baa:	1d1a      	adds	r2, r3, #4
 8001bac:	67ba      	str	r2, [r7, #120]	; 0x78
 8001bae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001bb2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bba:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8001bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc0:	1d1a      	adds	r2, r3, #4
 8001bc2:	67ba      	str	r2, [r7, #120]	; 0x78
 8001bc4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bc8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 8001bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f ae45 	bne.w	800186c <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8001be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be4:	b299      	uxth	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	2302      	movs	r3, #2
 8001bec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001bee:	f000 fef1 	bl	80029d4 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8001bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf4:	b299      	uxth	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001bfe:	f000 fee9 	bl	80029d4 <arm_radix8_butterfly_f32>
}
 8001c02:	bf00      	nop
 8001c04:	3780      	adds	r7, #128	; 0x80
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b0ac      	sub	sp, #176	; 0xb0
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8001c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c38:	4413      	add	r3, r2
 8001c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001c48:	4413      	add	r3, r2
 8001c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8001c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c56:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c5c:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8001c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c62:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8001c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c68:	3b04      	subs	r3, #4
 8001c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8001c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c72:	3b04      	subs	r3, #4
 8001c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c7c:	3b04      	subs	r3, #4
 8001c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8001caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	ed93 7a00 	vldr	s14, [r3]
 8001cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	ed93 7a00 	vldr	s14, [r3]
 8001cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	ed93 7a00 	vldr	s14, [r3]
 8001cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	ed93 7a00 	vldr	s14, [r3]
 8001d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d12:	3304      	adds	r3, #4
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d24:	3304      	adds	r3, #4
 8001d26:	ed93 7a00 	vldr	s14, [r3]
 8001d2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d36:	3304      	adds	r3, #4
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001d70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d88:	3304      	adds	r3, #4
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da4:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dac:	3304      	adds	r3, #4
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001db6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de8:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	1d1a      	adds	r2, r3, #4
 8001e08:	603a      	str	r2, [r7, #0]
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e16:	3304      	adds	r3, #4
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e28:	3304      	adds	r3, #4
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	1d1a      	adds	r2, r3, #4
 8001e32:	603a      	str	r2, [r7, #0]
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e40:	1d1a      	adds	r2, r3, #4
 8001e42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e48:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e4e:	1d1a      	adds	r2, r3, #4
 8001e50:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e56:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e5c:	1d1a      	adds	r2, r3, #4
 8001e5e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e6a:	1d1a      	adds	r2, r3, #4
 8001e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e70:	6a3a      	ldr	r2, [r7, #32]
 8001e72:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e78:	1d1a      	adds	r2, r3, #4
 8001e7a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001e82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e86:	1d1a      	adds	r2, r3, #4
 8001e88:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001e98:	4413      	add	r3, r2
 8001e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ebe:	3b02      	subs	r3, #2
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ec6:	e31a      	b.n	80024fe <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eda:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	ed93 7a00 	vldr	s14, [r3]
 8001ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	ed93 7a00 	vldr	s14, [r3]
 8001efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f00:	3304      	adds	r3, #4
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	3304      	adds	r3, #4
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f24:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f3e:	3304      	adds	r3, #4
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f88:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001f8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f90:	3304      	adds	r3, #4
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001f9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fac:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001fb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001fbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd0:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff0:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	603a      	str	r2, [r7, #0]
 8002012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002016:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 800201a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800201e:	3304      	adds	r3, #4
 8002020:	ed93 7a00 	vldr	s14, [r3]
 8002024:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002030:	3304      	adds	r3, #4
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	1d1a      	adds	r2, r3, #4
 800203a:	603a      	str	r2, [r7, #0]
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002048:	3b04      	subs	r3, #4
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002052:	3b04      	subs	r3, #4
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8002060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002064:	3b04      	subs	r3, #4
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800206e:	3b04      	subs	r3, #4
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002078:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 800207c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002080:	ed93 7a00 	vldr	s14, [r3]
 8002084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002090:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8002094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80020ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80020cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020e4:	3b04      	subs	r3, #4
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020f2:	3b04      	subs	r3, #4
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002104:	3b04      	subs	r3, #4
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800210e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002116:	3b04      	subs	r3, #4
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002120:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8002124:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002130:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002134:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002140:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8002144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002148:	ed93 7a00 	vldr	s14, [r3]
 800214c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002158:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800215c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002160:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002168:	3b04      	subs	r3, #4
 800216a:	ed93 7a00 	vldr	s14, [r3]
 800216e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002172:	3b04      	subs	r3, #4
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800217c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002184:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8002188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021a4:	1f1a      	subs	r2, r3, #4
 80021a6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ae:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80021b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021b6:	3b04      	subs	r3, #4
 80021b8:	ed93 7a00 	vldr	s14, [r3]
 80021bc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80021c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021c8:	3b04      	subs	r3, #4
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021d2:	1f1a      	subs	r2, r3, #4
 80021d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80021e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e4:	1d1a      	adds	r2, r3, #4
 80021e6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 80021ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f2:	1d1a      	adds	r2, r3, #4
 80021f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 80021fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002200:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002208:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800220c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002210:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002218:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800221c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002220:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002228:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 800222c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002230:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002238:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 800223c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002240:	1d1a      	adds	r2, r3, #4
 8002242:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002246:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800224a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800224e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002252:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8002256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800225a:	1d1a      	adds	r2, r3, #4
 800225c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002260:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002264:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8002270:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002274:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8002280:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002284:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8002290:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002294:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 80022a0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80022a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80022a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 80022b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022b4:	1f1a      	subs	r2, r3, #4
 80022b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80022be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c6:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 80022ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ce:	1f1a      	subs	r2, r3, #4
 80022d0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80022d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e0:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 80022e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 80022ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 80022f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022fc:	4413      	add	r3, r2
 80022fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8002302:	edd7 7a07 	vldr	s15, [r7, #28]
 8002306:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8002312:	edd7 7a08 	vldr	s15, [r7, #32]
 8002316:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8002322:	edd7 7a08 	vldr	s15, [r7, #32]
 8002326:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8002332:	edd7 7a07 	vldr	s15, [r7, #28]
 8002336:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8002342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002346:	1d1a      	adds	r2, r3, #4
 8002348:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800234c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002350:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002358:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 800235c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002360:	1d1a      	adds	r2, r3, #4
 8002362:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002366:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800236a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800236e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002372:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8002376:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800237a:	eef1 7a67 	vneg.f32	s15, s15
 800237e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800238a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800238e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 800239a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800239e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80023a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 80023aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 80023ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023be:	1f1a      	subs	r2, r3, #4
 80023c0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 80023d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023d8:	1f1a      	subs	r2, r3, #4
 80023da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80023e2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ea:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 80023ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 80023f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 80023fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002406:	4413      	add	r3, r2
 8002408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800240c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002410:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002418:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 800241c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002420:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002428:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 800242c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002430:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002438:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 800243c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002440:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002448:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 800244c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002450:	1d1a      	adds	r2, r3, #4
 8002452:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002456:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800245a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800245e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002462:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8002466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800246a:	1d1a      	adds	r2, r3, #4
 800246c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002470:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002474:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8002480:	edd7 7a06 	vldr	s15, [r7, #24]
 8002484:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8002490:	edd7 7a05 	vldr	s15, [r7, #20]
 8002494:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 80024a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80024a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 80024b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80024b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024bc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 80024c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024c4:	1f1a      	subs	r2, r3, #4
 80024c6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80024ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80024ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d6:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 80024da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024de:	1f1a      	subs	r2, r3, #4
 80024e0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80024e4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80024e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80024f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f8:	3b01      	subs	r3, #1
 80024fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002502:	2b00      	cmp	r3, #0
 8002504:	f47f ace0 	bne.w	8001ec8 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	ed93 7a00 	vldr	s14, [r3]
 800250e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	ed93 7a00 	vldr	s14, [r3]
 8002524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002530:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	3304      	adds	r3, #4
 8002538:	ed93 7a00 	vldr	s14, [r3]
 800253c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002540:	3304      	adds	r3, #4
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3304      	adds	r3, #4
 8002552:	ed93 7a00 	vldr	s14, [r3]
 8002556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800255a:	3304      	adds	r3, #4
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002564:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002568:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800256c:	3304      	adds	r3, #4
 800256e:	ed93 7a00 	vldr	s14, [r3]
 8002572:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800257a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800257e:	3304      	adds	r3, #4
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002588:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800258c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800259c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80025ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80025b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80025cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d0:	3304      	adds	r3, #4
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80025da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e2:	3304      	adds	r3, #4
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ec:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80025f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025f4:	3304      	adds	r3, #4
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80025fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002602:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002606:	3304      	adds	r3, #4
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002610:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002618:	ed93 7a00 	vldr	s14, [r3]
 800261c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002630:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002638:	ed93 7a00 	vldr	s14, [r3]
 800263c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	1d1a      	adds	r2, r3, #4
 8002650:	603a      	str	r2, [r7, #0]
 8002652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002656:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800265a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265e:	3304      	adds	r3, #4
 8002660:	ed93 7a00 	vldr	s14, [r3]
 8002664:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002670:	3304      	adds	r3, #4
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	603a      	str	r2, [r7, #0]
 800267c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002680:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8002684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800268c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8002694:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002698:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800269c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80026a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80026b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026b8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80026bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80026c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026c8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80026d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026d8:	1d1a      	adds	r2, r3, #4
 80026da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80026de:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80026ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80026f8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80026fc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8002708:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8002710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8002718:	edd7 7a07 	vldr	s15, [r7, #28]
 800271c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002724:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8002728:	edd7 7a08 	vldr	s15, [r7, #32]
 800272c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002734:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8002738:	edd7 7a08 	vldr	s15, [r7, #32]
 800273c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002744:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8002748:	edd7 7a07 	vldr	s15, [r7, #28]
 800274c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002754:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8002758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275c:	1d1a      	adds	r2, r3, #4
 800275e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002762:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002766:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800277c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002780:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002788:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800278c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8002794:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800279c:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80027ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80027b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80027b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80027bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80027c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80027cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80027d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80027dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027e0:	1d1a      	adds	r2, r3, #4
 80027e2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80027e6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80027ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f2:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80027f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027fa:	1d1a      	adds	r2, r3, #4
 80027fc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002800:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002804:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280c:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002814:	b299      	uxth	r1, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	2304      	movs	r3, #4
 800281c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800281e:	f000 f8d9 	bl	80029d4 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8002822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002826:	b299      	uxth	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	2304      	movs	r3, #4
 800282e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002830:	f000 f8d0 	bl	80029d4 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8002834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002838:	b299      	uxth	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	2304      	movs	r3, #4
 8002840:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002842:	f000 f8c7 	bl	80029d4 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284a:	b299      	uxth	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	2304      	movs	r3, #4
 8002852:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002854:	f000 f8be 	bl	80029d4 <arm_radix8_butterfly_f32>
}
 8002858:	bf00      	nop
 800285a:	37b0      	adds	r7, #176	; 0xb0
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	4611      	mov	r1, r2
 800286c:	461a      	mov	r2, r3
 800286e:	460b      	mov	r3, r1
 8002870:	71fb      	strb	r3, [r7, #7]
 8002872:	4613      	mov	r3, r2
 8002874:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d117      	bne.n	80028b2 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3304      	adds	r3, #4
 8002886:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	e00d      	b.n	80028aa <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eef1 7a67 	vneg.f32	s15, s15
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	3308      	adds	r3, #8
 80028a2:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	3301      	adds	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3ed      	bcc.n	800288e <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b8:	d040      	beq.n	800293c <arm_cfft_f32+0xdc>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c0:	d845      	bhi.n	800294e <arm_cfft_f32+0xee>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c8:	d033      	beq.n	8002932 <arm_cfft_f32+0xd2>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d0:	d83d      	bhi.n	800294e <arm_cfft_f32+0xee>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d8:	d026      	beq.n	8002928 <arm_cfft_f32+0xc8>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e0:	d835      	bhi.n	800294e <arm_cfft_f32+0xee>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e8:	d028      	beq.n	800293c <arm_cfft_f32+0xdc>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f0:	d82d      	bhi.n	800294e <arm_cfft_f32+0xee>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f8:	d01b      	beq.n	8002932 <arm_cfft_f32+0xd2>
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002900:	d825      	bhi.n	800294e <arm_cfft_f32+0xee>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d00f      	beq.n	8002928 <arm_cfft_f32+0xc8>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b80      	cmp	r3, #128	; 0x80
 800290c:	d81f      	bhi.n	800294e <arm_cfft_f32+0xee>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d013      	beq.n	800293c <arm_cfft_f32+0xdc>
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d819      	bhi.n	800294e <arm_cfft_f32+0xee>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b10      	cmp	r3, #16
 800291e:	d003      	beq.n	8002928 <arm_cfft_f32+0xc8>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b20      	cmp	r3, #32
 8002924:	d005      	beq.n	8002932 <arm_cfft_f32+0xd2>
 8002926:	e012      	b.n	800294e <arm_cfft_f32+0xee>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7fe ff79 	bl	8001822 <arm_cfft_radix8by2_f32>
        break;
 8002930:	e00d      	b.n	800294e <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff f968 	bl	8001c0a <arm_cfft_radix8by4_f32>
        break;
 800293a:	e008      	b.n	800294e <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	b299      	uxth	r1, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	2301      	movs	r3, #1
 8002946:	68b8      	ldr	r0, [r7, #8]
 8002948:	f000 f844 	bl	80029d4 <arm_radix8_butterfly_f32>
        break;
 800294c:	bf00      	nop
    }  

    if( bitReverseFlag )
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8999      	ldrh	r1, [r3, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	461a      	mov	r2, r3
 800295e:	68b8      	ldr	r0, [r7, #8]
 8002960:	f7fd fcbe 	bl	80002e0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d130      	bne.n	80029cc <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297c:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	e01c      	b.n	80029c4 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	1d1a      	adds	r2, r3, #4
 800298e:	61ba      	str	r2, [r7, #24]
 8002990:	ed93 7a00 	vldr	s14, [r3]
 8002994:	edd7 7a04 	vldr	s15, [r7, #16]
 8002998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299c:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	eeb1 7a67 	vneg.f32	s14, s15
 80029aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80029ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	3304      	adds	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3301      	adds	r3, #1
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d3de      	bcc.n	800298a <arm_cfft_f32+0x12a>
        }
    }
}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b0bd      	sub	sp, #244	; 0xf4
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
 80029e4:	4613      	mov	r3, r2
 80029e6:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <arm_radix8_butterfly_f32+0x3c>)
 80029ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 80029f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80029fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a0c:	e002      	b.n	8002a14 <arm_radix8_butterfly_f32+0x40>
 8002a0e:	bf00      	nop
 8002a10:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8002a14:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002a22:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8002a30:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8002a3e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a46:	4413      	add	r3, r2
 8002a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002a4c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a54:	4413      	add	r3, r2
 8002a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a62:	4413      	add	r3, r2
 8002a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002a68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a70:	4413      	add	r3, r2
 8002a72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002a76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	ed93 7a00 	vldr	s14, [r3]
 8002a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a96:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	ed93 7a00 	vldr	s14, [r3]
 8002aa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aba:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ade:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	ed93 7a00 	vldr	s14, [r3]
 8002af0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b02:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002b06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	ed93 7a00 	vldr	s14, [r3]
 8002b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b26:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002b2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	ed93 7a00 	vldr	s14, [r3]
 8002b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4413      	add	r3, r2
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	ed93 7a00 	vldr	s14, [r3]
 8002b5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b92:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8002b96:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002b9a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8002ba6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002baa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8002bb6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002bba:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8002bc6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002bca:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 8002bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002be4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002bfe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c06:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	3304      	adds	r3, #4
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4413      	add	r3, r2
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3304      	adds	r3, #4
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4413      	add	r3, r2
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	3304      	adds	r3, #4
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	ed93 7a00 	vldr	s14, [r3]
 8002c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	3304      	adds	r3, #4
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c56:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	3304      	adds	r3, #4
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	ed93 7a00 	vldr	s14, [r3]
 8002c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	3304      	adds	r3, #4
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4413      	add	r3, r2
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	3304      	adds	r3, #4
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	ed93 7a00 	vldr	s14, [r3]
 8002c92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	3304      	adds	r3, #4
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002caa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	ed93 7a00 	vldr	s14, [r3]
 8002cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cce:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002cd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3304      	adds	r3, #4
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	ed93 7a00 	vldr	s14, [r3]
 8002ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3304      	adds	r3, #4
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4413      	add	r3, r2
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002cfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	3304      	adds	r3, #4
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	3304      	adds	r3, #4
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4413      	add	r3, r2
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	3304      	adds	r3, #4
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	ed93 7a00 	vldr	s14, [r3]
 8002d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	3304      	adds	r3, #4
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d46:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002d4a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002d4e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d56:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002d5a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002d5e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002d6a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002d6e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002d7a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002d7e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d86:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002d8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3304      	adds	r3, #4
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002d9a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	3304      	adds	r3, #4
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002db6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dbe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8002dc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002dd0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002dea:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002df6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4413      	add	r3, r2
 8002e02:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e06:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002e12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3304      	adds	r3, #4
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e22:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002e2e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002e32:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e3a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e42:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002e46:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002e4a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e52:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8002e5e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002e62:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e72:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002e76:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002e7a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e82:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8002e8e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002e92:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8002e9e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002ea2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eaa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002eae:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002eb2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eba:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002ebe:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002ec2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eca:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002ece:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002ed2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eda:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002ede:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002ee2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eea:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002eee:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002ef2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efa:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8002efe:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002f02:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002f1c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f24:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002f28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002f36:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002f50:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f58:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002f5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002f6a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f72:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002f86:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002f92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	3304      	adds	r3, #4
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002fa2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002faa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002fae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002fbe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002fca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002fda:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe2:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 8002fe6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fee:	4413      	add	r3, r2
 8002ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	f4ff ad0a 	bcc.w	8002a14 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8003000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003004:	2b07      	cmp	r3, #7
 8003006:	f240 84e3 	bls.w	80039d0 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8003010:	2301      	movs	r3, #1
 8003012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800301c:	4413      	add	r3, r2
 800301e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8003020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003022:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8003026:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800302a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800302c:	4413      	add	r3, r2
 800302e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8003030:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003034:	4413      	add	r3, r2
 8003036:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8003038:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800303a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800303c:	4413      	add	r3, r2
 800303e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8003040:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003044:	4413      	add	r3, r2
 8003046:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8003048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800304a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800304c:	4413      	add	r3, r2
 800304e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8003050:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003054:	4413      	add	r3, r2
 8003056:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8003058:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8003066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8003072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800307e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8003096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80030a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80030ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	3304      	adds	r3, #4
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80030be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	3304      	adds	r3, #4
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80030cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	3304      	adds	r3, #4
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80030da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	3304      	adds	r3, #4
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3304      	adds	r3, #4
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 80030f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	3304      	adds	r3, #4
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8003104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	3304      	adds	r3, #4
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800311a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003122:	4413      	add	r3, r2
 8003124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8003128:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003130:	4413      	add	r3, r2
 8003132:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8003136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313e:	4413      	add	r3, r2
 8003140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8003144:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314c:	4413      	add	r3, r2
 800314e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8003152:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	4413      	add	r3, r2
 800315c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8003160:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003168:	4413      	add	r3, r2
 800316a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800316e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003176:	4413      	add	r3, r2
 8003178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800317c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4413      	add	r3, r2
 8003186:	ed93 7a00 	vldr	s14, [r3]
 800318a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80031a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	ed93 7a00 	vldr	s14, [r3]
 80031ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80031c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	ed93 7a00 	vldr	s14, [r3]
 80031d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80031e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	ed93 7a00 	vldr	s14, [r3]
 80031f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	edd3 7a00 	vldr	s15, [r3]
 8003204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003208:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800320c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4413      	add	r3, r2
 8003216:	ed93 7a00 	vldr	s14, [r3]
 800321a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8003230:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	ed93 7a00 	vldr	s14, [r3]
 800323e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003250:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	ed93 7a00 	vldr	s14, [r3]
 8003262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003274:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003298:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800329c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80032a0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80032a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80032ac:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80032b0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80032b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80032bc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80032c0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80032c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80032cc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80032d0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80032d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80032dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80032ea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 80032f6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80032fa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80032fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003302:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003306:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	3304      	adds	r3, #4
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	ed93 7a00 	vldr	s14, [r3]
 8003316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	3304      	adds	r3, #4
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800332e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	3304      	adds	r3, #4
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	ed93 7a00 	vldr	s14, [r3]
 800333e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3304      	adds	r3, #4
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003352:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	3304      	adds	r3, #4
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	ed93 7a00 	vldr	s14, [r3]
 8003366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3304      	adds	r3, #4
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800337e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	3304      	adds	r3, #4
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	ed93 7a00 	vldr	s14, [r3]
 800338e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	3304      	adds	r3, #4
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80033a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	3304      	adds	r3, #4
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	3304      	adds	r3, #4
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ca:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80033ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	3304      	adds	r3, #4
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	3304      	adds	r3, #4
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80033f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	3304      	adds	r3, #4
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4413      	add	r3, r2
 8003402:	ed93 7a00 	vldr	s14, [r3]
 8003406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	3304      	adds	r3, #4
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800341e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	3304      	adds	r3, #4
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4413      	add	r3, r2
 800342a:	ed93 7a00 	vldr	s14, [r3]
 800342e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3304      	adds	r3, #4
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003442:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8003446:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800344a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800344e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003452:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8003456:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800345a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800345e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003462:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8003466:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800346a:	edd7 7a08 	vldr	s15, [r7, #32]
 800346e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003472:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8003476:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800347a:	edd7 7a08 	vldr	s15, [r7, #32]
 800347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003482:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8003486:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800348a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800348e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003492:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8003496:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800349a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800349e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80034a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	3304      	adds	r3, #4
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80034c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 80034d2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80034d6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80034da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 80034e2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80034e6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80034ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ee:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 80034f2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80034f6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8003502:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003506:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8003512:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003516:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8003522:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003526:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8003532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003540:	edd7 7a06 	vldr	s15, [r7, #24]
 8003544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003548:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800354c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	3304      	adds	r3, #4
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	ed97 7a05 	vldr	s14, [r7, #20]
 800355c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003564:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8003568:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800356c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003574:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8003578:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800357c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003584:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8003588:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800358c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003594:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8003598:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800359c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80035a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80035b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80035ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035be:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80035c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	3304      	adds	r3, #4
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80035d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80035d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035da:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80035de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80035e2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 80035ee:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80035f2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80035fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003602:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800360e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003612:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800361e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	ed97 7a07 	vldr	s14, [r7, #28]
 800362c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003634:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8003638:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	3304      	adds	r3, #4
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	ed97 7a05 	vldr	s14, [r7, #20]
 8003648:	edd7 7a04 	vldr	s15, [r7, #16]
 800364c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003650:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003654:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003658:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800365c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003660:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003668:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800366c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003670:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003678:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8003684:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003688:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800368c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003690:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003698:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800369c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80036a0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80036a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80036ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80036b4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80036b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80036bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036c0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80036c4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80036c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80036cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80036d4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80036d8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80036dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80036e4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80036e8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80036ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80036f4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80036f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003700:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8003704:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003708:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800370c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003710:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8003714:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003718:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800371c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003720:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003724:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003728:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800372c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003730:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003734:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003738:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800373c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003740:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003744:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003748:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800374c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003750:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003754:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003758:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800375c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003760:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003764:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003768:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800376c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003770:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003774:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003778:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800377c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003780:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003784:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003788:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800378c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003790:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003794:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003798:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800379c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80037a4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80037a8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80037ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80037b4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80037b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80037bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80037c4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80037c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80037cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80037d4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80037d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80037dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80037e4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80037e8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80037ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80037f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003802:	edd7 7a06 	vldr	s15, [r7, #24]
 8003806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800380e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	3304      	adds	r3, #4
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	ed97 7a05 	vldr	s14, [r7, #20]
 800381e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003826:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800382a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800382e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800383a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800383e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003846:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800384a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800384e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800385a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800385e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800386a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	ed97 7a07 	vldr	s14, [r7, #28]
 8003878:	edd7 7a06 	vldr	s15, [r7, #24]
 800387c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003880:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003884:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	3304      	adds	r3, #4
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	ed97 7a05 	vldr	s14, [r7, #20]
 8003894:	edd7 7a04 	vldr	s15, [r7, #16]
 8003898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80038a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80038a4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80038a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ac:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80038b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80038b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80038b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038bc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80038c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80038c4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80038c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038cc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80038d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80038d4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80038d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038dc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80038e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4413      	add	r3, r2
 80038ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80038ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80038fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	3304      	adds	r3, #4
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4413      	add	r3, r2
 8003906:	ed97 7a05 	vldr	s14, [r7, #20]
 800390a:	edd7 7a04 	vldr	s15, [r7, #16]
 800390e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003912:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8003916:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800391a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8003926:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800392a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800392e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003932:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8003936:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800393a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800393e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003942:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003946:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800394a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800394e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003952:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	ed97 7a07 	vldr	s14, [r7, #28]
 8003964:	edd7 7a06 	vldr	s15, [r7, #24]
 8003968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	3304      	adds	r3, #4
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003980:	edd7 7a04 	vldr	s15, [r7, #16]
 8003984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003988:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800398c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003994:	4413      	add	r3, r2
 8003996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800399a:	897b      	ldrh	r3, [r7, #10]
 800399c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f4ff abba 	bcc.w	800311a <arm_radix8_butterfly_f32+0x746>
         
         j++;
 80039a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039aa:	3301      	adds	r3, #1
 80039ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 80039b0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b8:	429a      	cmp	r2, r3
 80039ba:	f4ff ab2c 	bcc.w	8003016 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 80039be:	893b      	ldrh	r3, [r7, #8]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 80039c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	f63f a813 	bhi.w	80029f4 <arm_radix8_butterfly_f32+0x20>
}
 80039ce:	e000      	b.n	80039d2 <arm_radix8_butterfly_f32+0xffe>
         break;
 80039d0:	bf00      	nop
}
 80039d2:	bf00      	nop
 80039d4:	37f4      	adds	r7, #244	; 0xf4
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop

080039e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e6:	2003      	movs	r0, #3
 80039e8:	f000 f982 	bl	8003cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039ec:	f001 ff16 	bl	800581c <HAL_RCC_GetSysClockFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <HAL_Init+0x68>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	4913      	ldr	r1, [pc, #76]	; (8003a4c <HAL_Init+0x6c>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_Init+0x68>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <HAL_Init+0x6c>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	4a0b      	ldr	r2, [pc, #44]	; (8003a50 <HAL_Init+0x70>)
 8003a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a24:	4a0b      	ldr	r2, [pc, #44]	; (8003a54 <HAL_Init+0x74>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f000 f814 	bl	8003a58 <HAL_InitTick>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e002      	b.n	8003a40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a3a:	f7fd fa51 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	08009fc4 	.word	0x08009fc4
 8003a50:	24000008 	.word	0x24000008
 8003a54:	24000004 	.word	0x24000004

08003a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <HAL_InitTick+0x60>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e021      	b.n	8003ab0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_InitTick+0x64>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <HAL_InitTick+0x60>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f959 	bl	8003d3a <HAL_SYSTICK_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e00e      	b.n	8003ab0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d80a      	bhi.n	8003aae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	f000 f931 	bl	8003d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aa4:	4a06      	ldr	r2, [pc, #24]	; (8003ac0 <HAL_InitTick+0x68>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	24000010 	.word	0x24000010
 8003abc:	24000004 	.word	0x24000004
 8003ac0:	2400000c 	.word	0x2400000c

08003ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_IncTick+0x20>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_IncTick+0x24>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <HAL_IncTick+0x24>)
 8003ad6:	6013      	str	r3, [r2, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	24000010 	.word	0x24000010
 8003ae8:	2400488c 	.word	0x2400488c

08003aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return uwTick;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_GetTick+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	2400488c 	.word	0x2400488c

08003b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7ff ffee 	bl	8003aec <HAL_GetTick>
 8003b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d005      	beq.n	8003b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_Delay+0x44>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b2a:	bf00      	nop
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d8f7      	bhi.n	8003b2c <HAL_Delay+0x28>
  {
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	24000010 	.word	0x24000010

08003b4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_GetREVID+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0c1b      	lsrs	r3, r3, #16
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	5c001000 	.word	0x5c001000

08003b64 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	58000400 	.word	0x58000400

08003b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <__NVIC_SetPriorityGrouping+0x40>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bba:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <__NVIC_SetPriorityGrouping+0x40>)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	60d3      	str	r3, [r2, #12]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000ed00 	.word	0xe000ed00
 8003bd0:	05fa0000 	.word	0x05fa0000

08003bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <__NVIC_GetPriorityGrouping+0x18>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	f003 0307 	and.w	r3, r3, #7
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db0a      	blt.n	8003c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	; (8003c3c <__NVIC_SetPriority+0x4c>)
 8003c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	440b      	add	r3, r1
 8003c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c18:	e00a      	b.n	8003c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <__NVIC_SetPriority+0x50>)
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3b04      	subs	r3, #4
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	761a      	strb	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e100 	.word	0xe000e100
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf28      	it	cs
 8003c62:	2304      	movcs	r3, #4
 8003c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <NVIC_EncodePriority+0x30>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3b03      	subs	r3, #3
 8003c72:	e000      	b.n	8003c76 <NVIC_EncodePriority+0x32>
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	4313      	orrs	r3, r2
         );
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cbc:	d301      	bcc.n	8003cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e00f      	b.n	8003ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <SysTick_Config+0x40>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cca:	210f      	movs	r1, #15
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	f7ff ff8e 	bl	8003bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <SysTick_Config+0x40>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cda:	4b04      	ldr	r3, [pc, #16]	; (8003cec <SysTick_Config+0x40>)
 8003cdc:	2207      	movs	r2, #7
 8003cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	e000e010 	.word	0xe000e010

08003cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff47 	bl	8003b8c <__NVIC_SetPriorityGrouping>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d14:	f7ff ff5e 	bl	8003bd4 <__NVIC_GetPriorityGrouping>
 8003d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	6978      	ldr	r0, [r7, #20]
 8003d20:	f7ff ff90 	bl	8003c44 <NVIC_EncodePriority>
 8003d24:	4602      	mov	r2, r0
 8003d26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff5f 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003d32:	bf00      	nop
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff ffb2 	bl	8003cac <SysTick_Config>
 8003d48:	4603      	mov	r3, r0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e0cf      	b.n	8003f06 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2223      	movs	r2, #35	; 0x23
 8003d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fd f8cb 	bl	8000f14 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7e:	4b64      	ldr	r3, [pc, #400]	; (8003f10 <HAL_ETH_Init+0x1bc>)
 8003d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d84:	4a62      	ldr	r2, [pc, #392]	; (8003f10 <HAL_ETH_Init+0x1bc>)
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d8e:	4b60      	ldr	r3, [pc, #384]	; (8003f10 <HAL_ETH_Init+0x1bc>)
 8003d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7a1b      	ldrb	r3, [r3, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003da4:	2000      	movs	r0, #0
 8003da6:	f7ff fedd 	bl	8003b64 <HAL_SYSCFG_ETHInterfaceSelect>
 8003daa:	e003      	b.n	8003db4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003dac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003db0:	f7ff fed8 	bl	8003b64 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003db4:	4b57      	ldr	r3, [pc, #348]	; (8003f14 <HAL_ETH_Init+0x1c0>)
 8003db6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd0:	f7ff fe8c 	bl	8003aec <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003dd6:	e011      	b.n	8003dfc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003dd8:	f7ff fe88 	bl	8003aec <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003de6:	d909      	bls.n	8003dfc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2204      	movs	r2, #4
 8003dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	22e0      	movs	r2, #224	; 0xe0
 8003df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e084      	b.n	8003f06 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e4      	bne.n	8003dd8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f886 	bl	8003f20 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003e14:	f001 fe7c 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4a3f      	ldr	r2, [pc, #252]	; (8003f18 <HAL_ETH_Init+0x1c4>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	0c9a      	lsrs	r2, r3, #18
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3a01      	subs	r2, #1
 8003e28:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fa71 	bl	8004314 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e3e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e4e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	22e0      	movs	r2, #224	; 0xe0
 8003e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e049      	b.n	8003f06 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003e7e:	4b27      	ldr	r3, [pc, #156]	; (8003f1c <HAL_ETH_Init+0x1c8>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6952      	ldr	r2, [r2, #20]
 8003e86:	0051      	lsls	r1, r2, #1
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e92:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fad9 	bl	800444e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb1f 	bl	80044e0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	3305      	adds	r3, #5
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	061a      	lsls	r2, r3, #24
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	3302      	adds	r3, #2
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	3301      	adds	r3, #1
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ee0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003eee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ef0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2210      	movs	r2, #16
 8003f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	58024400 	.word	0x58024400
 8003f14:	58000400 	.word	0x58000400
 8003f18:	431bde83 	.word	0x431bde83
 8003f1c:	ffff8001 	.word	0xffff8001

08003f20 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f3a:	f001 fde9 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8003f3e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d908      	bls.n	8003f5a <HAL_ETH_SetMDIOClockRange+0x3a>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d804      	bhi.n	8003f5a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e027      	b.n	8003faa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d908      	bls.n	8003f74 <HAL_ETH_SetMDIOClockRange+0x54>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d204      	bcs.n	8003f74 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e01a      	b.n	8003faa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d303      	bcc.n	8003f84 <HAL_ETH_SetMDIOClockRange+0x64>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d911      	bls.n	8003fa8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4a10      	ldr	r2, [pc, #64]	; (8003fc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d908      	bls.n	8003f9e <HAL_ETH_SetMDIOClockRange+0x7e>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <HAL_ETH_SetMDIOClockRange+0xac>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d804      	bhi.n	8003f9e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e005      	b.n	8003faa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e000      	b.n	8003faa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003fa8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	01312cff 	.word	0x01312cff
 8003fc0:	02160ebf 	.word	0x02160ebf
 8003fc4:	03938700 	.word	0x03938700
 8003fc8:	05f5e0ff 	.word	0x05f5e0ff
 8003fcc:	08f0d17f 	.word	0x08f0d17f

08003fd0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003fe2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	791b      	ldrb	r3, [r3, #4]
 8003fe8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003fea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	7b1b      	ldrb	r3, [r3, #12]
 8003ff0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003ff2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	7b5b      	ldrb	r3, [r3, #13]
 8003ff8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003ffa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	7b9b      	ldrb	r3, [r3, #14]
 8004000:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004002:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	7bdb      	ldrb	r3, [r3, #15]
 8004008:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800400a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	7c12      	ldrb	r2, [r2, #16]
 8004010:	2a00      	cmp	r2, #0
 8004012:	d102      	bne.n	800401a <ETH_SetMACConfig+0x4a>
 8004014:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004018:	e000      	b.n	800401c <ETH_SetMACConfig+0x4c>
 800401a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800401c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	7c52      	ldrb	r2, [r2, #17]
 8004022:	2a00      	cmp	r2, #0
 8004024:	d102      	bne.n	800402c <ETH_SetMACConfig+0x5c>
 8004026:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800402a:	e000      	b.n	800402e <ETH_SetMACConfig+0x5e>
 800402c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800402e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	7c9b      	ldrb	r3, [r3, #18]
 8004034:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004036:	431a      	orrs	r2, r3
               macconf->Speed |
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800403c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004042:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	7f1b      	ldrb	r3, [r3, #28]
 8004048:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800404a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	7f5b      	ldrb	r3, [r3, #29]
 8004050:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004052:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	7f92      	ldrb	r2, [r2, #30]
 8004058:	2a00      	cmp	r2, #0
 800405a:	d102      	bne.n	8004062 <ETH_SetMACConfig+0x92>
 800405c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004060:	e000      	b.n	8004064 <ETH_SetMACConfig+0x94>
 8004062:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004064:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	7fdb      	ldrb	r3, [r3, #31]
 800406a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800406c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004074:	2a00      	cmp	r2, #0
 8004076:	d102      	bne.n	800407e <ETH_SetMACConfig+0xae>
 8004078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800407c:	e000      	b.n	8004080 <ETH_SetMACConfig+0xb0>
 800407e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004080:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004086:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800408e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004090:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b56      	ldr	r3, [pc, #344]	; (80041fc <ETH_SetMACConfig+0x22c>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040ba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040c4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80040c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040ce:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80040d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80040d8:	2a00      	cmp	r2, #0
 80040da:	d102      	bne.n	80040e2 <ETH_SetMACConfig+0x112>
 80040dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040e0:	e000      	b.n	80040e4 <ETH_SetMACConfig+0x114>
 80040e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80040e4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4b42      	ldr	r3, [pc, #264]	; (8004200 <ETH_SetMACConfig+0x230>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	430b      	orrs	r3, r1
 8004100:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004108:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	4b3a      	ldr	r3, [pc, #232]	; (8004204 <ETH_SetMACConfig+0x234>)
 800411a:	4013      	ands	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	68f9      	ldr	r1, [r7, #12]
 8004122:	430b      	orrs	r3, r1
 8004124:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800412c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004132:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800413a:	2a00      	cmp	r2, #0
 800413c:	d101      	bne.n	8004142 <ETH_SetMACConfig+0x172>
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	e000      	b.n	8004144 <ETH_SetMACConfig+0x174>
 8004142:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004144:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004156:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800415a:	4013      	ands	r3, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	68f9      	ldr	r1, [r7, #12]
 8004162:	430b      	orrs	r3, r1
 8004164:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800416c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004174:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f023 0103 	bic.w	r1, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	430a      	orrs	r2, r1
 800418e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800419a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80041b6:	2a00      	cmp	r2, #0
 80041b8:	d101      	bne.n	80041be <ETH_SetMACConfig+0x1ee>
 80041ba:	2240      	movs	r2, #64	; 0x40
 80041bc:	e000      	b.n	80041c0 <ETH_SetMACConfig+0x1f0>
 80041be:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80041c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80041c8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80041d2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80041e0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	00048083 	.word	0x00048083
 8004200:	c0f88000 	.word	0xc0f88000
 8004204:	fffffef0 	.word	0xfffffef0

08004208 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b38      	ldr	r3, [pc, #224]	; (8004300 <ETH_SetDMAConfig+0xf8>)
 800421e:	4013      	ands	r3, r2
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800422e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	791b      	ldrb	r3, [r3, #4]
 8004234:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800423a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	7b1b      	ldrb	r3, [r3, #12]
 8004240:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <ETH_SetDMAConfig+0xfc>)
 8004252:	4013      	ands	r3, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	68f9      	ldr	r1, [r7, #12]
 800425a:	430b      	orrs	r3, r1
 800425c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004260:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	7b5b      	ldrb	r3, [r3, #13]
 8004266:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <ETH_SetDMAConfig+0x100>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	430b      	orrs	r3, r1
 8004288:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800428c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	7d1b      	ldrb	r3, [r3, #20]
 8004298:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800429a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	7f5b      	ldrb	r3, [r3, #29]
 80042a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80042b2:	4b16      	ldr	r3, [pc, #88]	; (800430c <ETH_SetDMAConfig+0x104>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	430b      	orrs	r3, r1
 80042be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	7f1b      	ldrb	r3, [r3, #28]
 80042ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042dc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <ETH_SetDMAConfig+0x108>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	430b      	orrs	r3, r1
 80042ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042f0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	ffff87fd 	.word	0xffff87fd
 8004304:	ffff2ffe 	.word	0xffff2ffe
 8004308:	fffec000 	.word	0xfffec000
 800430c:	ffc0efef 	.word	0xffc0efef
 8004310:	7fc0ffff 	.word	0x7fc0ffff

08004314 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b0a4      	sub	sp, #144	; 0x90
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004322:	2300      	movs	r3, #0
 8004324:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800435c:	2300      	movs	r3, #0
 800435e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004360:	2300      	movs	r3, #0
 8004362:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800436c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004370:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004378:	2300      	movs	r3, #0
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004382:	2300      	movs	r3, #0
 8004384:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004388:	2300      	movs	r3, #0
 800438a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800438e:	2300      	movs	r3, #0
 8004390:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004392:	2300      	movs	r3, #0
 8004394:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004396:	2300      	movs	r3, #0
 8004398:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800439a:	2300      	movs	r3, #0
 800439c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80043ac:	2320      	movs	r3, #32
 80043ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80043be:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80043c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043c8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80043d0:	2302      	movs	r3, #2
 80043d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80043ee:	2300      	movs	r3, #0
 80043f0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80043f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fde6 	bl	8003fd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004404:	2301      	movs	r3, #1
 8004406:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004408:	2301      	movs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800440c:	2300      	movs	r3, #0
 800440e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004416:	2300      	movs	r3, #0
 8004418:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800441e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004422:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004424:	2300      	movs	r3, #0
 8004426:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800442c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800442e:	2300      	movs	r3, #0
 8004430:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004434:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800443a:	f107 0308 	add.w	r3, r7, #8
 800443e:	4619      	mov	r1, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff fee1 	bl	8004208 <ETH_SetDMAConfig>
}
 8004446:	bf00      	nop
 8004448:	3790      	adds	r7, #144	; 0x90
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e01d      	b.n	8004498 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68d9      	ldr	r1, [r3, #12]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	440b      	add	r3, r1
 800446c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	3206      	adds	r2, #6
 800448e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d9de      	bls.n	800445c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ac:	461a      	mov	r2, r3
 80044ae:	2303      	movs	r3, #3
 80044b0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e023      	b.n	8004536 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6919      	ldr	r1, [r3, #16]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	440b      	add	r3, r1
 80044fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2200      	movs	r2, #0
 800450a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2200      	movs	r2, #0
 8004510:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2200      	movs	r2, #0
 8004516:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2200      	movs	r2, #0
 800451c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2200      	movs	r2, #0
 8004522:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	3212      	adds	r2, #18
 800452c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d9d8      	bls.n	80044ee <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004562:	461a      	mov	r2, r3
 8004564:	2303      	movs	r3, #3
 8004566:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004576:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045aa:	4b89      	ldr	r3, [pc, #548]	; (80047d0 <HAL_GPIO_Init+0x234>)
 80045ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ae:	e194      	b.n	80048da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2101      	movs	r1, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8186 	beq.w	80048d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d005      	beq.n	80045e0 <HAL_GPIO_Init+0x44>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d130      	bne.n	8004642 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2203      	movs	r2, #3
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004616:	2201      	movs	r2, #1
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0201 	and.w	r2, r3, #1
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b03      	cmp	r3, #3
 800464c:	d017      	beq.n	800467e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	2203      	movs	r2, #3
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4013      	ands	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d123      	bne.n	80046d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	08da      	lsrs	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3208      	adds	r2, #8
 8004692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	220f      	movs	r2, #15
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	08da      	lsrs	r2, r3, #3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3208      	adds	r2, #8
 80046cc:	69b9      	ldr	r1, [r7, #24]
 80046ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	2203      	movs	r2, #3
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0203 	and.w	r2, r3, #3
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80e0 	beq.w	80048d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004714:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <HAL_GPIO_Init+0x238>)
 8004716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800471a:	4a2e      	ldr	r2, [pc, #184]	; (80047d4 <HAL_GPIO_Init+0x238>)
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004724:	4b2b      	ldr	r3, [pc, #172]	; (80047d4 <HAL_GPIO_Init+0x238>)
 8004726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004732:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <HAL_GPIO_Init+0x23c>)
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	3302      	adds	r3, #2
 800473a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	220f      	movs	r2, #15
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4013      	ands	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a20      	ldr	r2, [pc, #128]	; (80047dc <HAL_GPIO_Init+0x240>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d052      	beq.n	8004804 <HAL_GPIO_Init+0x268>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <HAL_GPIO_Init+0x244>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d031      	beq.n	80047ca <HAL_GPIO_Init+0x22e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <HAL_GPIO_Init+0x248>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02b      	beq.n	80047c6 <HAL_GPIO_Init+0x22a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <HAL_GPIO_Init+0x24c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d025      	beq.n	80047c2 <HAL_GPIO_Init+0x226>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_GPIO_Init+0x250>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01f      	beq.n	80047be <HAL_GPIO_Init+0x222>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_GPIO_Init+0x254>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d019      	beq.n	80047ba <HAL_GPIO_Init+0x21e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_GPIO_Init+0x258>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <HAL_GPIO_Init+0x21a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <HAL_GPIO_Init+0x25c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00d      	beq.n	80047b2 <HAL_GPIO_Init+0x216>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_GPIO_Init+0x260>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d007      	beq.n	80047ae <HAL_GPIO_Init+0x212>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a17      	ldr	r2, [pc, #92]	; (8004800 <HAL_GPIO_Init+0x264>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_GPIO_Init+0x20e>
 80047a6:	2309      	movs	r3, #9
 80047a8:	e02d      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047aa:	230a      	movs	r3, #10
 80047ac:	e02b      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047ae:	2308      	movs	r3, #8
 80047b0:	e029      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047b2:	2307      	movs	r3, #7
 80047b4:	e027      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047b6:	2306      	movs	r3, #6
 80047b8:	e025      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047ba:	2305      	movs	r3, #5
 80047bc:	e023      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047be:	2304      	movs	r3, #4
 80047c0:	e021      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047c2:	2303      	movs	r3, #3
 80047c4:	e01f      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e01d      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e01b      	b.n	8004806 <HAL_GPIO_Init+0x26a>
 80047ce:	bf00      	nop
 80047d0:	58000080 	.word	0x58000080
 80047d4:	58024400 	.word	0x58024400
 80047d8:	58000400 	.word	0x58000400
 80047dc:	58020000 	.word	0x58020000
 80047e0:	58020400 	.word	0x58020400
 80047e4:	58020800 	.word	0x58020800
 80047e8:	58020c00 	.word	0x58020c00
 80047ec:	58021000 	.word	0x58021000
 80047f0:	58021400 	.word	0x58021400
 80047f4:	58021800 	.word	0x58021800
 80047f8:	58021c00 	.word	0x58021c00
 80047fc:	58022000 	.word	0x58022000
 8004800:	58022400 	.word	0x58022400
 8004804:	2300      	movs	r3, #0
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	f002 0203 	and.w	r2, r2, #3
 800480c:	0092      	lsls	r2, r2, #2
 800480e:	4093      	lsls	r3, r2
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004816:	4938      	ldr	r1, [pc, #224]	; (80048f8 <HAL_GPIO_Init+0x35c>)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	3302      	adds	r3, #2
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800484a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	43db      	mvns	r3, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4013      	ands	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	3301      	adds	r3, #1
 80048d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f47f ae63 	bne.w	80045b0 <HAL_GPIO_Init+0x14>
  }
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	3724      	adds	r7, #36	; 0x24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	58000400 	.word	0x58000400

080048fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
 8004908:	4613      	mov	r3, r2
 800490a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800490c:	787b      	ldrb	r3, [r7, #1]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004912:	887a      	ldrh	r2, [r7, #2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004918:	e003      	b.n	8004922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800491a:	887b      	ldrh	r3, [r7, #2]
 800491c:	041a      	lsls	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	619a      	str	r2, [r3, #24]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800492e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004930:	b08f      	sub	sp, #60	; 0x3c
 8004932:	af0a      	add	r7, sp, #40	; 0x28
 8004934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e116      	b.n	8004b6e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc fc72 	bl	8001244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2203      	movs	r2, #3
 8004964:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f004 fbb2 	bl	80090e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	687e      	ldr	r6, [r7, #4]
 800498c:	466d      	mov	r5, sp
 800498e:	f106 0410 	add.w	r4, r6, #16
 8004992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800499a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800499e:	e885 0003 	stmia.w	r5, {r0, r1}
 80049a2:	1d33      	adds	r3, r6, #4
 80049a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049a6:	6838      	ldr	r0, [r7, #0]
 80049a8:	f004 fb30 	bl	800900c <USB_CoreInit>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0d7      	b.n	8004b6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f004 fba0 	bl	800910a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	73fb      	strb	r3, [r7, #15]
 80049ce:	e04a      	b.n	8004a66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049d0:	7bfa      	ldrb	r2, [r7, #15]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	333d      	adds	r3, #61	; 0x3d
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049e4:	7bfa      	ldrb	r2, [r7, #15]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	333c      	adds	r3, #60	; 0x3c
 80049f4:	7bfa      	ldrb	r2, [r7, #15]
 80049f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	b298      	uxth	r0, r3
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	3344      	adds	r3, #68	; 0x44
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3340      	adds	r3, #64	; 0x40
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	3348      	adds	r3, #72	; 0x48
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	334c      	adds	r3, #76	; 0x4c
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	3354      	adds	r3, #84	; 0x54
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	3301      	adds	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d3af      	bcc.n	80049d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a70:	2300      	movs	r3, #0
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	e044      	b.n	8004b00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a76:	7bfa      	ldrb	r2, [r7, #15]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004a88:	2200      	movs	r2, #0
 8004a8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a8c:	7bfa      	ldrb	r2, [r7, #15]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004a9e:	7bfa      	ldrb	r2, [r7, #15]
 8004aa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004aa2:	7bfa      	ldrb	r2, [r7, #15]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ace:	7bfa      	ldrb	r2, [r7, #15]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	3301      	adds	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3b5      	bcc.n	8004a76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	687e      	ldr	r6, [r7, #4]
 8004b12:	466d      	mov	r5, sp
 8004b14:	f106 0410 	add.w	r4, r6, #16
 8004b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b24:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b28:	1d33      	adds	r3, r6, #4
 8004b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b2c:	6838      	ldr	r0, [r7, #0]
 8004b2e:	f004 fb39 	bl	80091a4 <USB_DevInit>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e014      	b.n	8004b6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d102      	bne.n	8004b62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f80b 	bl	8004b78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f004 fcf7 	bl	800955a <USB_DevDisconnect>

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_PCDEx_ActivateLPM+0x44>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	10000003 	.word	0x10000003

08004bc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_PWREx_ConfigSupply+0x70>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d00a      	beq.n	8004bea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bd4:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <HAL_PWREx_ConfigSupply+0x70>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d001      	beq.n	8004be6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e01f      	b.n	8004c26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e01d      	b.n	8004c26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_PWREx_ConfigSupply+0x70>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f023 0207 	bic.w	r2, r3, #7
 8004bf2:	490f      	ldr	r1, [pc, #60]	; (8004c30 <HAL_PWREx_ConfigSupply+0x70>)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bfa:	f7fe ff77 	bl	8003aec <HAL_GetTick>
 8004bfe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c00:	e009      	b.n	8004c16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c02:	f7fe ff73 	bl	8003aec <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c10:	d901      	bls.n	8004c16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e007      	b.n	8004c26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_PWREx_ConfigSupply+0x70>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c22:	d1ee      	bne.n	8004c02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	58024800 	.word	0x58024800

08004c34 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a04      	ldr	r2, [pc, #16]	; (8004c50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c42:	60d3      	str	r3, [r2, #12]
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	58024800 	.word	0x58024800

08004c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f000 bc1d 	b.w	80054a2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8087 	beq.w	8004d84 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4b99      	ldr	r3, [pc, #612]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c80:	4b96      	ldr	r3, [pc, #600]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d007      	beq.n	8004c9c <HAL_RCC_OscConfig+0x48>
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	2b18      	cmp	r3, #24
 8004c90:	d110      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x60>
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	4b8f      	ldr	r3, [pc, #572]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d06c      	beq.n	8004d82 <HAL_RCC_OscConfig+0x12e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d168      	bne.n	8004d82 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e3f6      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d106      	bne.n	8004ccc <HAL_RCC_OscConfig+0x78>
 8004cbe:	4b87      	ldr	r3, [pc, #540]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a86      	ldr	r2, [pc, #536]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e02e      	b.n	8004d2a <HAL_RCC_OscConfig+0xd6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10c      	bne.n	8004cee <HAL_RCC_OscConfig+0x9a>
 8004cd4:	4b81      	ldr	r3, [pc, #516]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a80      	ldr	r2, [pc, #512]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b7e      	ldr	r3, [pc, #504]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a7d      	ldr	r2, [pc, #500]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e01d      	b.n	8004d2a <HAL_RCC_OscConfig+0xd6>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCC_OscConfig+0xbe>
 8004cf8:	4b78      	ldr	r3, [pc, #480]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a77      	ldr	r2, [pc, #476]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b75      	ldr	r3, [pc, #468]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a74      	ldr	r2, [pc, #464]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	e00b      	b.n	8004d2a <HAL_RCC_OscConfig+0xd6>
 8004d12:	4b72      	ldr	r3, [pc, #456]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a71      	ldr	r2, [pc, #452]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b6f      	ldr	r3, [pc, #444]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6e      	ldr	r2, [pc, #440]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d013      	beq.n	8004d5a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fe fedb 	bl	8003aec <HAL_GetTick>
 8004d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d3a:	f7fe fed7 	bl	8003aec <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	; 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e3aa      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d4c:	4b63      	ldr	r3, [pc, #396]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0xe6>
 8004d58:	e014      	b.n	8004d84 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fec7 	bl	8003aec <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d62:	f7fe fec3 	bl	8003aec <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	; 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e396      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d74:	4b59      	ldr	r3, [pc, #356]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x10e>
 8004d80:	e000      	b.n	8004d84 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80cb 	beq.w	8004f28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d92:	4b52      	ldr	r3, [pc, #328]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d9a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d9c:	4b4f      	ldr	r3, [pc, #316]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <HAL_RCC_OscConfig+0x164>
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b18      	cmp	r3, #24
 8004dac:	d156      	bne.n	8004e5c <HAL_RCC_OscConfig+0x208>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d151      	bne.n	8004e5c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db8:	4b48      	ldr	r3, [pc, #288]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x17c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e368      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dd0:	4b42      	ldr	r3, [pc, #264]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 0219 	bic.w	r2, r3, #25
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	493f      	ldr	r1, [pc, #252]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004de2:	f7fe fe83 	bl	8003aec <HAL_GetTick>
 8004de6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dea:	f7fe fe7f 	bl	8003aec <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e352      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dfc:	4b37      	ldr	r3, [pc, #220]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e08:	f7fe fea0 	bl	8003b4c <HAL_GetREVID>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d817      	bhi.n	8004e46 <HAL_RCC_OscConfig+0x1f2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d108      	bne.n	8004e30 <HAL_RCC_OscConfig+0x1dc>
 8004e1e:	4b2f      	ldr	r3, [pc, #188]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e26:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e2e:	e07b      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e30:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	031b      	lsls	r3, r3, #12
 8004e3e:	4927      	ldr	r1, [pc, #156]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e44:	e070      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e46:	4b25      	ldr	r3, [pc, #148]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	061b      	lsls	r3, r3, #24
 8004e54:	4921      	ldr	r1, [pc, #132]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e5a:	e065      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d048      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e64:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 0219 	bic.w	r2, r3, #25
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	491a      	ldr	r1, [pc, #104]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fe fe39 	bl	8003aec <HAL_GetTick>
 8004e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7fe fe35 	bl	8003aec <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e308      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e90:	4b12      	ldr	r3, [pc, #72]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	f7fe fe56 	bl	8003b4c <HAL_GetREVID>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d81a      	bhi.n	8004ee0 <HAL_RCC_OscConfig+0x28c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b40      	cmp	r3, #64	; 0x40
 8004eb0:	d108      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x270>
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004eba:	4a08      	ldr	r2, [pc, #32]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	e031      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	031b      	lsls	r3, r3, #12
 8004ed2:	4902      	ldr	r1, [pc, #8]	; (8004edc <HAL_RCC_OscConfig+0x288>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	e026      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
 8004eda:	bf00      	nop
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	4b9a      	ldr	r3, [pc, #616]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	061b      	lsls	r3, r3, #24
 8004eee:	4997      	ldr	r1, [pc, #604]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]
 8004ef4:	e018      	b.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef6:	4b95      	ldr	r3, [pc, #596]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a94      	ldr	r2, [pc, #592]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f02:	f7fe fdf3 	bl	8003aec <HAL_GetTick>
 8004f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0a:	f7fe fdef 	bl	8003aec <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e2c2      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f1c:	4b8b      	ldr	r3, [pc, #556]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a9 	beq.w	8005088 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f36:	4b85      	ldr	r3, [pc, #532]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f40:	4b82      	ldr	r3, [pc, #520]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d007      	beq.n	8004f5c <HAL_RCC_OscConfig+0x308>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b18      	cmp	r3, #24
 8004f50:	d13a      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x374>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d135      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f5c:	4b7b      	ldr	r3, [pc, #492]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_OscConfig+0x320>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e296      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f74:	f7fe fdea 	bl	8003b4c <HAL_GetREVID>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d817      	bhi.n	8004fb2 <HAL_RCC_OscConfig+0x35e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d108      	bne.n	8004f9c <HAL_RCC_OscConfig+0x348>
 8004f8a:	4b70      	ldr	r3, [pc, #448]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f92:	4a6e      	ldr	r2, [pc, #440]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f98:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f9a:	e075      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f9c:	4b6b      	ldr	r3, [pc, #428]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	069b      	lsls	r3, r3, #26
 8004faa:	4968      	ldr	r1, [pc, #416]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb0:	e06a      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fb2:	4b66      	ldr	r3, [pc, #408]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	061b      	lsls	r3, r3, #24
 8004fc0:	4962      	ldr	r1, [pc, #392]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fc6:	e05f      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d042      	beq.n	8005056 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fd0:	4b5e      	ldr	r3, [pc, #376]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5d      	ldr	r2, [pc, #372]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fd86 	bl	8003aec <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fe4:	f7fe fd82 	bl	8003aec <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e255      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ff6:	4b55      	ldr	r3, [pc, #340]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005002:	f7fe fda3 	bl	8003b4c <HAL_GetREVID>
 8005006:	4603      	mov	r3, r0
 8005008:	f241 0203 	movw	r2, #4099	; 0x1003
 800500c:	4293      	cmp	r3, r2
 800500e:	d817      	bhi.n	8005040 <HAL_RCC_OscConfig+0x3ec>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	2b20      	cmp	r3, #32
 8005016:	d108      	bne.n	800502a <HAL_RCC_OscConfig+0x3d6>
 8005018:	4b4c      	ldr	r3, [pc, #304]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005020:	4a4a      	ldr	r2, [pc, #296]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005026:	6053      	str	r3, [r2, #4]
 8005028:	e02e      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
 800502a:	4b48      	ldr	r3, [pc, #288]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	069b      	lsls	r3, r3, #26
 8005038:	4944      	ldr	r1, [pc, #272]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 800503a:	4313      	orrs	r3, r2
 800503c:	604b      	str	r3, [r1, #4]
 800503e:	e023      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
 8005040:	4b42      	ldr	r3, [pc, #264]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	061b      	lsls	r3, r3, #24
 800504e:	493f      	ldr	r1, [pc, #252]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005050:	4313      	orrs	r3, r2
 8005052:	60cb      	str	r3, [r1, #12]
 8005054:	e018      	b.n	8005088 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005056:	4b3d      	ldr	r3, [pc, #244]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a3c      	ldr	r2, [pc, #240]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 800505c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fe fd43 	bl	8003aec <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800506a:	f7fe fd3f 	bl	8003aec <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e212      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800507c:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d036      	beq.n	8005102 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d019      	beq.n	80050d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509c:	4b2b      	ldr	r3, [pc, #172]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 800509e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a0:	4a2a      	ldr	r2, [pc, #168]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fe fd20 	bl	8003aec <HAL_GetTick>
 80050ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b0:	f7fe fd1c 	bl	8003aec <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1ef      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050c2:	4b22      	ldr	r3, [pc, #136]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x45c>
 80050ce:	e018      	b.n	8005102 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d0:	4b1e      	ldr	r3, [pc, #120]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050d6:	f023 0301 	bic.w	r3, r3, #1
 80050da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050dc:	f7fe fd06 	bl	8003aec <HAL_GetTick>
 80050e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e4:	f7fe fd02 	bl	8003aec <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e1d5      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 80050f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d039      	beq.n	8005182 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01c      	beq.n	8005150 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a0c      	ldr	r2, [pc, #48]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 800511c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005120:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005122:	f7fe fce3 	bl	8003aec <HAL_GetTick>
 8005126:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800512a:	f7fe fcdf 	bl	8003aec <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e1b2      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x4d6>
 8005148:	e01b      	b.n	8005182 <HAL_RCC_OscConfig+0x52e>
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005150:	4b9b      	ldr	r3, [pc, #620]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a9a      	ldr	r2, [pc, #616]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800515a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800515c:	f7fe fcc6 	bl	8003aec <HAL_GetTick>
 8005160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005164:	f7fe fcc2 	bl	8003aec <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e195      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005176:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8081 	beq.w	8005292 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005190:	4b8c      	ldr	r3, [pc, #560]	; (80053c4 <HAL_RCC_OscConfig+0x770>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a8b      	ldr	r2, [pc, #556]	; (80053c4 <HAL_RCC_OscConfig+0x770>)
 8005196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800519c:	f7fe fca6 	bl	8003aec <HAL_GetTick>
 80051a0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051a4:	f7fe fca2 	bl	8003aec <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e175      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b6:	4b83      	ldr	r3, [pc, #524]	; (80053c4 <HAL_RCC_OscConfig+0x770>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d106      	bne.n	80051d8 <HAL_RCC_OscConfig+0x584>
 80051ca:	4b7d      	ldr	r3, [pc, #500]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	4a7c      	ldr	r2, [pc, #496]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	6713      	str	r3, [r2, #112]	; 0x70
 80051d6:	e02d      	b.n	8005234 <HAL_RCC_OscConfig+0x5e0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10c      	bne.n	80051fa <HAL_RCC_OscConfig+0x5a6>
 80051e0:	4b77      	ldr	r3, [pc, #476]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	4a76      	ldr	r2, [pc, #472]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	6713      	str	r3, [r2, #112]	; 0x70
 80051ec:	4b74      	ldr	r3, [pc, #464]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	4a73      	ldr	r2, [pc, #460]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80051f2:	f023 0304 	bic.w	r3, r3, #4
 80051f6:	6713      	str	r3, [r2, #112]	; 0x70
 80051f8:	e01c      	b.n	8005234 <HAL_RCC_OscConfig+0x5e0>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x5c8>
 8005202:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	4a6e      	ldr	r2, [pc, #440]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6713      	str	r3, [r2, #112]	; 0x70
 800520e:	4b6c      	ldr	r3, [pc, #432]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	4a6b      	ldr	r2, [pc, #428]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	; 0x70
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0x5e0>
 800521c:	4b68      	ldr	r3, [pc, #416]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4a67      	ldr	r2, [pc, #412]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
 8005228:	4b65      	ldr	r3, [pc, #404]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	4a64      	ldr	r2, [pc, #400]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fe fc56 	bl	8003aec <HAL_GetTick>
 8005240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005242:	e00a      	b.n	800525a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005244:	f7fe fc52 	bl	8003aec <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e123      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800525a:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ee      	beq.n	8005244 <HAL_RCC_OscConfig+0x5f0>
 8005266:	e014      	b.n	8005292 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fe fc40 	bl	8003aec <HAL_GetTick>
 800526c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fe fc3c 	bl	8003aec <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e10d      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005286:	4b4e      	ldr	r3, [pc, #312]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1ee      	bne.n	8005270 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8102 	beq.w	80054a0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800529c:	4b48      	ldr	r3, [pc, #288]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a4:	2b18      	cmp	r3, #24
 80052a6:	f000 80bd 	beq.w	8005424 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	f040 809e 	bne.w	80053f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b4:	4b42      	ldr	r3, [pc, #264]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a41      	ldr	r2, [pc, #260]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fe fc14 	bl	8003aec <HAL_GetTick>
 80052c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fe fc10 	bl	8003aec <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0e3      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052da:	4b39      	ldr	r3, [pc, #228]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e6:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ea:	4b37      	ldr	r3, [pc, #220]	; (80053c8 <HAL_RCC_OscConfig+0x774>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052f6:	0112      	lsls	r2, r2, #4
 80052f8:	430a      	orrs	r2, r1
 80052fa:	4931      	ldr	r1, [pc, #196]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	628b      	str	r3, [r1, #40]	; 0x28
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	3b01      	subs	r3, #1
 8005306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	3b01      	subs	r3, #1
 8005310:	025b      	lsls	r3, r3, #9
 8005312:	b29b      	uxth	r3, r3
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	3b01      	subs	r3, #1
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005328:	3b01      	subs	r3, #1
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005330:	4923      	ldr	r1, [pc, #140]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005336:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005342:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005346:	4b21      	ldr	r3, [pc, #132]	; (80053cc <HAL_RCC_OscConfig+0x778>)
 8005348:	4013      	ands	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800534e:	00d2      	lsls	r2, r2, #3
 8005350:	491b      	ldr	r1, [pc, #108]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005356:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	f023 020c 	bic.w	r2, r3, #12
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	4917      	ldr	r1, [pc, #92]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005364:	4313      	orrs	r3, r2
 8005366:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	f023 0202 	bic.w	r2, r3, #2
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	4912      	ldr	r1, [pc, #72]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	4a0d      	ldr	r2, [pc, #52]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 800538c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005390:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 8005398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800539c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <HAL_RCC_OscConfig+0x76c>)
 80053b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fe fb99 	bl	8003aec <HAL_GetTick>
 80053ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053bc:	e011      	b.n	80053e2 <HAL_RCC_OscConfig+0x78e>
 80053be:	bf00      	nop
 80053c0:	58024400 	.word	0x58024400
 80053c4:	58024800 	.word	0x58024800
 80053c8:	fffffc0c 	.word	0xfffffc0c
 80053cc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fe fb8c 	bl	8003aec <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e05f      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053e2:	4b32      	ldr	r3, [pc, #200]	; (80054ac <HAL_RCC_OscConfig+0x858>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0x77c>
 80053ee:	e057      	b.n	80054a0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f0:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <HAL_RCC_OscConfig+0x858>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2d      	ldr	r2, [pc, #180]	; (80054ac <HAL_RCC_OscConfig+0x858>)
 80053f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fe fb76 	bl	8003aec <HAL_GetTick>
 8005400:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005404:	f7fe fb72 	bl	8003aec <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e045      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005416:	4b25      	ldr	r3, [pc, #148]	; (80054ac <HAL_RCC_OscConfig+0x858>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x7b0>
 8005422:	e03d      	b.n	80054a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005424:	4b21      	ldr	r3, [pc, #132]	; (80054ac <HAL_RCC_OscConfig+0x858>)
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_RCC_OscConfig+0x858>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	2b01      	cmp	r3, #1
 8005436:	d031      	beq.n	800549c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f003 0203 	and.w	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d12a      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d122      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d11a      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	0a5b      	lsrs	r3, r3, #9
 800546a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d111      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d108      	bne.n	800549c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	0e1b      	lsrs	r3, r3, #24
 800548e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3730      	adds	r7, #48	; 0x30
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	58024400 	.word	0x58024400

080054b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e19c      	b.n	80057fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c4:	4b8a      	ldr	r3, [pc, #552]	; (80056f0 <HAL_RCC_ClockConfig+0x240>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d910      	bls.n	80054f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b87      	ldr	r3, [pc, #540]	; (80056f0 <HAL_RCC_ClockConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 020f 	bic.w	r2, r3, #15
 80054da:	4985      	ldr	r1, [pc, #532]	; (80056f0 <HAL_RCC_ClockConfig+0x240>)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	4b83      	ldr	r3, [pc, #524]	; (80056f0 <HAL_RCC_ClockConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e184      	b.n	80057fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	4b7b      	ldr	r3, [pc, #492]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800550c:	429a      	cmp	r2, r3
 800550e:	d908      	bls.n	8005522 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005510:	4b78      	ldr	r3, [pc, #480]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	4975      	ldr	r1, [pc, #468]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 800551e:	4313      	orrs	r3, r2
 8005520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d010      	beq.n	8005550 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695a      	ldr	r2, [r3, #20]
 8005532:	4b70      	ldr	r3, [pc, #448]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800553a:	429a      	cmp	r2, r3
 800553c:	d908      	bls.n	8005550 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800553e:	4b6d      	ldr	r3, [pc, #436]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	496a      	ldr	r1, [pc, #424]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 800554c:	4313      	orrs	r3, r2
 800554e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d010      	beq.n	800557e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	4b64      	ldr	r3, [pc, #400]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005568:	429a      	cmp	r2, r3
 800556a:	d908      	bls.n	800557e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800556c:	4b61      	ldr	r3, [pc, #388]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	495e      	ldr	r1, [pc, #376]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 800557a:	4313      	orrs	r3, r2
 800557c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d010      	beq.n	80055ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	4b59      	ldr	r3, [pc, #356]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005596:	429a      	cmp	r2, r3
 8005598:	d908      	bls.n	80055ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800559a:	4b56      	ldr	r3, [pc, #344]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	4953      	ldr	r1, [pc, #332]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d010      	beq.n	80055da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d908      	bls.n	80055da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c8:	4b4a      	ldr	r3, [pc, #296]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f023 020f 	bic.w	r2, r3, #15
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4947      	ldr	r1, [pc, #284]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d055      	beq.n	8005692 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80055e6:	4b43      	ldr	r3, [pc, #268]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	4940      	ldr	r1, [pc, #256]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005600:	4b3c      	ldr	r3, [pc, #240]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d121      	bne.n	8005650 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0f6      	b.n	80057fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d107      	bne.n	8005628 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005618:	4b36      	ldr	r3, [pc, #216]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d115      	bne.n	8005650 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0ea      	b.n	80057fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d107      	bne.n	8005640 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005630:	4b30      	ldr	r3, [pc, #192]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0de      	b.n	80057fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005640:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0d6      	b.n	80057fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005650:	4b28      	ldr	r3, [pc, #160]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f023 0207 	bic.w	r2, r3, #7
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4925      	ldr	r1, [pc, #148]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 800565e:	4313      	orrs	r3, r2
 8005660:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005662:	f7fe fa43 	bl	8003aec <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005668:	e00a      	b.n	8005680 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800566a:	f7fe fa3f 	bl	8003aec <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f241 3288 	movw	r2, #5000	; 0x1388
 8005678:	4293      	cmp	r3, r2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e0be      	b.n	80057fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005680:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	429a      	cmp	r2, r3
 8005690:	d1eb      	bne.n	800566a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d010      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d208      	bcs.n	80056c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f023 020f 	bic.w	r2, r3, #15
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	490e      	ldr	r1, [pc, #56]	; (80056f4 <HAL_RCC_ClockConfig+0x244>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <HAL_RCC_ClockConfig+0x240>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d214      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <HAL_RCC_ClockConfig+0x240>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 020f 	bic.w	r2, r3, #15
 80056d6:	4906      	ldr	r1, [pc, #24]	; (80056f0 <HAL_RCC_ClockConfig+0x240>)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	4313      	orrs	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <HAL_RCC_ClockConfig+0x240>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e086      	b.n	80057fe <HAL_RCC_ClockConfig+0x34e>
 80056f0:	52002000 	.word	0x52002000
 80056f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	4b3f      	ldr	r3, [pc, #252]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005710:	429a      	cmp	r2, r3
 8005712:	d208      	bcs.n	8005726 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005714:	4b3c      	ldr	r3, [pc, #240]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	4939      	ldr	r1, [pc, #228]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 8005722:	4313      	orrs	r3, r2
 8005724:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d010      	beq.n	8005754 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800573e:	429a      	cmp	r2, r3
 8005740:	d208      	bcs.n	8005754 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	492e      	ldr	r1, [pc, #184]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 8005750:	4313      	orrs	r3, r2
 8005752:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b00      	cmp	r3, #0
 800575e:	d010      	beq.n	8005782 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800576c:	429a      	cmp	r2, r3
 800576e:	d208      	bcs.n	8005782 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	4922      	ldr	r1, [pc, #136]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 800577e:	4313      	orrs	r3, r2
 8005780:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d010      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69da      	ldr	r2, [r3, #28]
 8005792:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800579a:	429a      	cmp	r2, r3
 800579c:	d208      	bcs.n	80057b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800579e:	4b1a      	ldr	r3, [pc, #104]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4917      	ldr	r1, [pc, #92]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057b0:	f000 f834 	bl	800581c <HAL_RCC_GetSysClockFreq>
 80057b4:	4602      	mov	r2, r0
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	4912      	ldr	r1, [pc, #72]	; (800580c <HAL_RCC_ClockConfig+0x35c>)
 80057c2:	5ccb      	ldrb	r3, [r1, r3]
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	fa22 f303 	lsr.w	r3, r2, r3
 80057cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057ce:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <HAL_RCC_ClockConfig+0x358>)
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	4a0d      	ldr	r2, [pc, #52]	; (800580c <HAL_RCC_ClockConfig+0x35c>)
 80057d8:	5cd3      	ldrb	r3, [r2, r3]
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
 80057e4:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <HAL_RCC_ClockConfig+0x360>)
 80057e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057e8:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <HAL_RCC_ClockConfig+0x364>)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <HAL_RCC_ClockConfig+0x368>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe f930 	bl	8003a58 <HAL_InitTick>
 80057f8:	4603      	mov	r3, r0
 80057fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	58024400 	.word	0x58024400
 800580c:	08009fc4 	.word	0x08009fc4
 8005810:	24000008 	.word	0x24000008
 8005814:	24000004 	.word	0x24000004
 8005818:	2400000c 	.word	0x2400000c

0800581c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800581c:	b480      	push	{r7}
 800581e:	b089      	sub	sp, #36	; 0x24
 8005820:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005822:	4bb3      	ldr	r3, [pc, #716]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800582a:	2b18      	cmp	r3, #24
 800582c:	f200 8155 	bhi.w	8005ada <HAL_RCC_GetSysClockFreq+0x2be>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800589d 	.word	0x0800589d
 800583c:	08005adb 	.word	0x08005adb
 8005840:	08005adb 	.word	0x08005adb
 8005844:	08005adb 	.word	0x08005adb
 8005848:	08005adb 	.word	0x08005adb
 800584c:	08005adb 	.word	0x08005adb
 8005850:	08005adb 	.word	0x08005adb
 8005854:	08005adb 	.word	0x08005adb
 8005858:	080058c3 	.word	0x080058c3
 800585c:	08005adb 	.word	0x08005adb
 8005860:	08005adb 	.word	0x08005adb
 8005864:	08005adb 	.word	0x08005adb
 8005868:	08005adb 	.word	0x08005adb
 800586c:	08005adb 	.word	0x08005adb
 8005870:	08005adb 	.word	0x08005adb
 8005874:	08005adb 	.word	0x08005adb
 8005878:	080058c9 	.word	0x080058c9
 800587c:	08005adb 	.word	0x08005adb
 8005880:	08005adb 	.word	0x08005adb
 8005884:	08005adb 	.word	0x08005adb
 8005888:	08005adb 	.word	0x08005adb
 800588c:	08005adb 	.word	0x08005adb
 8005890:	08005adb 	.word	0x08005adb
 8005894:	08005adb 	.word	0x08005adb
 8005898:	080058cf 	.word	0x080058cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800589c:	4b94      	ldr	r3, [pc, #592]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058a8:	4b91      	ldr	r3, [pc, #580]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	08db      	lsrs	r3, r3, #3
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	4a90      	ldr	r2, [pc, #576]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80058ba:	e111      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80058bc:	4b8d      	ldr	r3, [pc, #564]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058be:	61bb      	str	r3, [r7, #24]
    break;
 80058c0:	e10e      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80058c2:	4b8d      	ldr	r3, [pc, #564]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058c4:	61bb      	str	r3, [r7, #24]
    break;
 80058c6:	e10b      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80058c8:	4b8c      	ldr	r3, [pc, #560]	; (8005afc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80058ca:	61bb      	str	r3, [r7, #24]
    break;
 80058cc:	e108      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058ce:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80058d8:	4b85      	ldr	r3, [pc, #532]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80058e4:	4b82      	ldr	r3, [pc, #520]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80058ee:	4b80      	ldr	r3, [pc, #512]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f2:	08db      	lsrs	r3, r3, #3
 80058f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80e1 	beq.w	8005ad4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b02      	cmp	r3, #2
 8005916:	f000 8083 	beq.w	8005a20 <HAL_RCC_GetSysClockFreq+0x204>
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b02      	cmp	r3, #2
 800591e:	f200 80a1 	bhi.w	8005a64 <HAL_RCC_GetSysClockFreq+0x248>
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x114>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d056      	beq.n	80059dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800592e:	e099      	b.n	8005a64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005930:	4b6f      	ldr	r3, [pc, #444]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d02d      	beq.n	8005998 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800593c:	4b6c      	ldr	r3, [pc, #432]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	08db      	lsrs	r3, r3, #3
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	4a6b      	ldr	r2, [pc, #428]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
 800594c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005966:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005976:	ed97 6a02 	vldr	s12, [r7, #8]
 800597a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800597e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005992:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005996:	e087      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b04 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059aa:	4b51      	ldr	r3, [pc, #324]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80059be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059da:	e065      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b08 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ee:	4b40      	ldr	r3, [pc, #256]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a1e:	e043      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a32:	4b2f      	ldr	r3, [pc, #188]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a62:	e021      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a76:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aa6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005aa8:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	0a5b      	lsrs	r3, r3, #9
 8005aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	ee07 3a90 	vmov	s15, r3
 8005abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005acc:	ee17 3a90 	vmov	r3, s15
 8005ad0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005ad2:	e005      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61bb      	str	r3, [r7, #24]
    break;
 8005ad8:	e002      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005adc:	61bb      	str	r3, [r7, #24]
    break;
 8005ade:	bf00      	nop
  }

  return sysclockfreq;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3724      	adds	r7, #36	; 0x24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	58024400 	.word	0x58024400
 8005af4:	03d09000 	.word	0x03d09000
 8005af8:	003d0900 	.word	0x003d0900
 8005afc:	007a1200 	.word	0x007a1200
 8005b00:	46000000 	.word	0x46000000
 8005b04:	4c742400 	.word	0x4c742400
 8005b08:	4a742400 	.word	0x4a742400
 8005b0c:	4af42400 	.word	0x4af42400

08005b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b16:	f7ff fe81 	bl	800581c <HAL_RCC_GetSysClockFreq>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	490f      	ldr	r1, [pc, #60]	; (8005b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b28:	5ccb      	ldrb	r3, [r1, r3]
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b3e:	5cd3      	ldrb	r3, [r2, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4a:	4a07      	ldr	r2, [pc, #28]	; (8005b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b4e:	4a07      	ldr	r2, [pc, #28]	; (8005b6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b54:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	58024400 	.word	0x58024400
 8005b64:	08009fc4 	.word	0x08009fc4
 8005b68:	24000008 	.word	0x24000008
 8005b6c:	24000004 	.word	0x24000004

08005b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b74:	f7ff ffcc 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	4904      	ldr	r1, [pc, #16]	; (8005b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b86:	5ccb      	ldrb	r3, [r1, r3]
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	58024400 	.word	0x58024400
 8005b98:	08009fc4 	.word	0x08009fc4

08005b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ba0:	f7ff ffb6 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	4904      	ldr	r1, [pc, #16]	; (8005bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bb2:	5ccb      	ldrb	r3, [r1, r3]
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	08009fc4 	.word	0x08009fc4

08005bc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d03f      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bec:	d02a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bf2:	d824      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005bf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bf8:	d018      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bfe:	d81e      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c08:	d007      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c0a:	e018      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4ba3      	ldr	r3, [pc, #652]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4aa2      	ldr	r2, [pc, #648]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c18:	e015      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	2102      	movs	r1, #2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f9d5 	bl	8006fd0 <RCCEx_PLL2_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c2a:	e00c      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3324      	adds	r3, #36	; 0x24
 8005c30:	2102      	movs	r1, #2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 fa7e 	bl	8007134 <RCCEx_PLL3_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c3c:	e003      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	75fb      	strb	r3, [r7, #23]
      break;
 8005c42:	e000      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d109      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c4c:	4b93      	ldr	r3, [pc, #588]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c58:	4990      	ldr	r1, [pc, #576]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c5e:	e001      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d03d      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d826      	bhi.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005c95 	.word	0x08005c95
 8005c84:	08005ca3 	.word	0x08005ca3
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	08005ccd 	.word	0x08005ccd
 8005c90:	08005ccd 	.word	0x08005ccd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c94:	4b81      	ldr	r3, [pc, #516]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	4a80      	ldr	r2, [pc, #512]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ca0:	e015      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 f991 	bl	8006fd0 <RCCEx_PLL2_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cb2:	e00c      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3324      	adds	r3, #36	; 0x24
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fa3a 	bl	8007134 <RCCEx_PLL3_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cc4:	e003      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cd4:	4b71      	ldr	r3, [pc, #452]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd8:	f023 0207 	bic.w	r2, r3, #7
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce0:	496e      	ldr	r1, [pc, #440]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ce6:	e001      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d042      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d00:	d02b      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d06:	d825      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d08:	2bc0      	cmp	r3, #192	; 0xc0
 8005d0a:	d028      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d0c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d0e:	d821      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d10:	2b80      	cmp	r3, #128	; 0x80
 8005d12:	d016      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005d14:	2b80      	cmp	r3, #128	; 0x80
 8005d16:	d81d      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d007      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005d20:	e018      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d22:	4b5e      	ldr	r3, [pc, #376]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	4a5d      	ldr	r2, [pc, #372]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d2e:	e017      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 f94a 	bl	8006fd0 <RCCEx_PLL2_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d40:	e00e      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3324      	adds	r3, #36	; 0x24
 8005d46:	2100      	movs	r1, #0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 f9f3 	bl	8007134 <RCCEx_PLL3_Config>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d52:	e005      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	75fb      	strb	r3, [r7, #23]
      break;
 8005d58:	e002      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d5a:	bf00      	nop
 8005d5c:	e000      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d66:	4b4d      	ldr	r3, [pc, #308]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d6a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	494a      	ldr	r1, [pc, #296]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	650b      	str	r3, [r1, #80]	; 0x50
 8005d78:	e001      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d049      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d94:	d030      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d9a:	d82a      	bhi.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005da0:	d02c      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005da2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005da6:	d824      	bhi.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dac:	d018      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db2:	d81e      	bhi.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dbc:	d007      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005dbe:	e018      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc0:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	4a35      	ldr	r2, [pc, #212]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dcc:	e017      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 f8fb 	bl	8006fd0 <RCCEx_PLL2_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005dde:	e00e      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3324      	adds	r3, #36	; 0x24
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 f9a4 	bl	8007134 <RCCEx_PLL3_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005df0:	e005      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	75fb      	strb	r3, [r7, #23]
      break;
 8005df6:	e002      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005df8:	bf00      	nop
 8005dfa:	e000      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e04:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e08:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e12:	4922      	ldr	r1, [pc, #136]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	658b      	str	r3, [r1, #88]	; 0x58
 8005e18:	e001      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d04b      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e34:	d030      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e3a:	d82a      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e40:	d02e      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005e42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e46:	d824      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e4c:	d018      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e52:	d81e      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e5c:	d007      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e5e:	e018      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e6c:	e019      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 f8ab 	bl	8006fd0 <RCCEx_PLL2_Config>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e7e:	e010      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3324      	adds	r3, #36	; 0x24
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f954 	bl	8007134 <RCCEx_PLL3_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e90:	e007      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
      break;
 8005e96:	e004      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005e98:	bf00      	nop
 8005e9a:	e002      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e9c:	58024400 	.word	0x58024400
      break;
 8005ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ea8:	4b99      	ldr	r3, [pc, #612]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005eb6:	4996      	ldr	r1, [pc, #600]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	658b      	str	r3, [r1, #88]	; 0x58
 8005ebc:	e001      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebe:	7dfb      	ldrb	r3, [r7, #23]
 8005ec0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d032      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed2:	2b30      	cmp	r3, #48	; 0x30
 8005ed4:	d01c      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005ed6:	2b30      	cmp	r3, #48	; 0x30
 8005ed8:	d817      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d00c      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d813      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d10f      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eea:	4b89      	ldr	r3, [pc, #548]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eee:	4a88      	ldr	r2, [pc, #544]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ef6:	e00e      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	2102      	movs	r1, #2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 f866 	bl	8006fd0 <RCCEx_PLL2_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f08:	e005      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0e:	e002      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f1c:	4b7c      	ldr	r3, [pc, #496]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f28:	4979      	ldr	r1, [pc, #484]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f2e:	e001      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d047      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f48:	d030      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f4e:	d82a      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f54:	d02c      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005f56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f5a:	d824      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f60:	d018      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f66:	d81e      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d007      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005f72:	e018      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f74:	4b66      	ldr	r3, [pc, #408]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	4a65      	ldr	r2, [pc, #404]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f80:	e017      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 f821 	bl	8006fd0 <RCCEx_PLL2_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f92:	e00e      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3324      	adds	r3, #36	; 0x24
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f8ca 	bl	8007134 <RCCEx_PLL3_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fa4:	e005      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005faa:	e002      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fb8:	4b55      	ldr	r3, [pc, #340]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc4:	4952      	ldr	r1, [pc, #328]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	650b      	str	r3, [r1, #80]	; 0x50
 8005fca:	e001      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d049      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe4:	d02e      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fea:	d828      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005fec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ff0:	d02a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005ff2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ff6:	d822      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ff8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ffc:	d026      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006002:	d81c      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006008:	d010      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800600a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800600e:	d816      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01d      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006018:	d111      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3304      	adds	r3, #4
 800601e:	2101      	movs	r1, #1
 8006020:	4618      	mov	r0, r3
 8006022:	f000 ffd5 	bl	8006fd0 <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800602a:	e012      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3324      	adds	r3, #36	; 0x24
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f001 f87e 	bl	8007134 <RCCEx_PLL3_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800603c:	e009      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
      break;
 8006042:	e006      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006044:	bf00      	nop
 8006046:	e004      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006048:	bf00      	nop
 800604a:	e002      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800604c:	bf00      	nop
 800604e:	e000      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006058:	4b2d      	ldr	r3, [pc, #180]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006064:	492a      	ldr	r1, [pc, #168]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006066:	4313      	orrs	r3, r2
 8006068:	650b      	str	r3, [r1, #80]	; 0x50
 800606a:	e001      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d04d      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006086:	d02e      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800608c:	d828      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800608e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006092:	d02a      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006098:	d822      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800609a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800609e:	d026      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x526>
 80060a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060a4:	d81c      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80060a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060aa:	d010      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 80060ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b0:	d816      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01d      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80060b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ba:	d111      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 ff84 	bl	8006fd0 <RCCEx_PLL2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060cc:	e012      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3324      	adds	r3, #36	; 0x24
 80060d2:	2101      	movs	r1, #1
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 f82d 	bl	8007134 <RCCEx_PLL3_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060de:	e009      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
      break;
 80060e4:	e006      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060e6:	bf00      	nop
 80060e8:	e004      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060ea:	bf00      	nop
 80060ec:	e002      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060ee:	bf00      	nop
 80060f0:	e000      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10c      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006108:	4901      	ldr	r1, [pc, #4]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800610a:	4313      	orrs	r3, r2
 800610c:	658b      	str	r3, [r1, #88]	; 0x58
 800610e:	e003      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006110:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d02f      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800612c:	d00e      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800612e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006132:	d814      	bhi.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800613c:	d10f      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613e:	4baf      	ldr	r3, [pc, #700]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	4aae      	ldr	r2, [pc, #696]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800614a:	e00c      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3304      	adds	r3, #4
 8006150:	2101      	movs	r1, #1
 8006152:	4618      	mov	r0, r3
 8006154:	f000 ff3c 	bl	8006fd0 <RCCEx_PLL2_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800615c:	e003      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
      break;
 8006162:	e000      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800616c:	4ba3      	ldr	r3, [pc, #652]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800616e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006170:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006178:	49a0      	ldr	r1, [pc, #640]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800617a:	4313      	orrs	r3, r2
 800617c:	650b      	str	r3, [r1, #80]	; 0x50
 800617e:	e001      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d032      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006194:	2b03      	cmp	r3, #3
 8006196:	d81b      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061d7 	.word	0x080061d7
 80061a4:	080061b1 	.word	0x080061b1
 80061a8:	080061bf 	.word	0x080061bf
 80061ac:	080061d7 	.word	0x080061d7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b0:	4b92      	ldr	r3, [pc, #584]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	4a91      	ldr	r2, [pc, #580]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061bc:	e00c      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3304      	adds	r3, #4
 80061c2:	2102      	movs	r1, #2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 ff03 	bl	8006fd0 <RCCEx_PLL2_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061ce:	e003      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
      break;
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80061d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061de:	4b87      	ldr	r3, [pc, #540]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e2:	f023 0203 	bic.w	r2, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	4984      	ldr	r1, [pc, #528]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061f0:	e001      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8086 	beq.w	8006310 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006204:	4b7e      	ldr	r3, [pc, #504]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a7d      	ldr	r2, [pc, #500]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800620a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006210:	f7fd fc6c 	bl	8003aec <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006216:	e009      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006218:	f7fd fc68 	bl	8003aec <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b64      	cmp	r3, #100	; 0x64
 8006224:	d902      	bls.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	75fb      	strb	r3, [r7, #23]
        break;
 800622a:	e005      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800622c:	4b74      	ldr	r3, [pc, #464]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0ef      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d166      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800623e:	4b6f      	ldr	r3, [pc, #444]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006240:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006248:	4053      	eors	r3, r2
 800624a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624e:	2b00      	cmp	r3, #0
 8006250:	d013      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006252:	4b6a      	ldr	r3, [pc, #424]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800625c:	4b67      	ldr	r3, [pc, #412]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4a66      	ldr	r2, [pc, #408]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006266:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006268:	4b64      	ldr	r3, [pc, #400]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626c:	4a63      	ldr	r2, [pc, #396]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800626e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006272:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006274:	4a61      	ldr	r2, [pc, #388]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006284:	d115      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006286:	f7fd fc31 	bl	8003aec <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628c:	e00b      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fd fc2d 	bl	8003aec <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	4293      	cmp	r3, r2
 800629e:	d902      	bls.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	75fb      	strb	r3, [r7, #23]
            break;
 80062a4:	e005      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062a6:	4b55      	ldr	r3, [pc, #340]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ed      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d126      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c6:	d10d      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80062c8:	4b4c      	ldr	r3, [pc, #304]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062d6:	0919      	lsrs	r1, r3, #4
 80062d8:	4b4a      	ldr	r3, [pc, #296]	; (8006404 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80062da:	400b      	ands	r3, r1
 80062dc:	4947      	ldr	r1, [pc, #284]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	610b      	str	r3, [r1, #16]
 80062e2:	e005      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80062e4:	4b45      	ldr	r3, [pc, #276]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	4a44      	ldr	r2, [pc, #272]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062ee:	6113      	str	r3, [r2, #16]
 80062f0:	4b42      	ldr	r3, [pc, #264]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fe:	493f      	ldr	r1, [pc, #252]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006300:	4313      	orrs	r3, r2
 8006302:	670b      	str	r3, [r1, #112]	; 0x70
 8006304:	e004      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	75bb      	strb	r3, [r7, #22]
 800630a:	e001      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8085 	beq.w	8006428 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006322:	2b28      	cmp	r3, #40	; 0x28
 8006324:	d866      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006409 	.word	0x08006409
 8006330:	080063f5 	.word	0x080063f5
 8006334:	080063f5 	.word	0x080063f5
 8006338:	080063f5 	.word	0x080063f5
 800633c:	080063f5 	.word	0x080063f5
 8006340:	080063f5 	.word	0x080063f5
 8006344:	080063f5 	.word	0x080063f5
 8006348:	080063f5 	.word	0x080063f5
 800634c:	080063d1 	.word	0x080063d1
 8006350:	080063f5 	.word	0x080063f5
 8006354:	080063f5 	.word	0x080063f5
 8006358:	080063f5 	.word	0x080063f5
 800635c:	080063f5 	.word	0x080063f5
 8006360:	080063f5 	.word	0x080063f5
 8006364:	080063f5 	.word	0x080063f5
 8006368:	080063f5 	.word	0x080063f5
 800636c:	080063e3 	.word	0x080063e3
 8006370:	080063f5 	.word	0x080063f5
 8006374:	080063f5 	.word	0x080063f5
 8006378:	080063f5 	.word	0x080063f5
 800637c:	080063f5 	.word	0x080063f5
 8006380:	080063f5 	.word	0x080063f5
 8006384:	080063f5 	.word	0x080063f5
 8006388:	080063f5 	.word	0x080063f5
 800638c:	08006409 	.word	0x08006409
 8006390:	080063f5 	.word	0x080063f5
 8006394:	080063f5 	.word	0x080063f5
 8006398:	080063f5 	.word	0x080063f5
 800639c:	080063f5 	.word	0x080063f5
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	080063f5 	.word	0x080063f5
 80063a8:	080063f5 	.word	0x080063f5
 80063ac:	08006409 	.word	0x08006409
 80063b0:	080063f5 	.word	0x080063f5
 80063b4:	080063f5 	.word	0x080063f5
 80063b8:	080063f5 	.word	0x080063f5
 80063bc:	080063f5 	.word	0x080063f5
 80063c0:	080063f5 	.word	0x080063f5
 80063c4:	080063f5 	.word	0x080063f5
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	08006409 	.word	0x08006409
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	2101      	movs	r1, #1
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fdfa 	bl	8006fd0 <RCCEx_PLL2_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063e0:	e013      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3324      	adds	r3, #36	; 0x24
 80063e6:	2101      	movs	r1, #1
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fea3 	bl	8007134 <RCCEx_PLL3_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063f2:	e00a      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	75fb      	strb	r3, [r7, #23]
      break;
 80063f8:	e007      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
 8006400:	58024800 	.word	0x58024800
 8006404:	00ffffcf 	.word	0x00ffffcf
      break;
 8006408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006410:	4b96      	ldr	r3, [pc, #600]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006414:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641c:	4993      	ldr	r1, [pc, #588]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800641e:	4313      	orrs	r3, r2
 8006420:	654b      	str	r3, [r1, #84]	; 0x54
 8006422:	e001      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d038      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006438:	2b05      	cmp	r3, #5
 800643a:	d821      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	08006487 	.word	0x08006487
 8006448:	0800645d 	.word	0x0800645d
 800644c:	0800646f 	.word	0x0800646f
 8006450:	08006487 	.word	0x08006487
 8006454:	08006487 	.word	0x08006487
 8006458:	08006487 	.word	0x08006487
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3304      	adds	r3, #4
 8006460:	2101      	movs	r1, #1
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fdb4 	bl	8006fd0 <RCCEx_PLL2_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800646c:	e00c      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3324      	adds	r3, #36	; 0x24
 8006472:	2101      	movs	r1, #1
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fe5d 	bl	8007134 <RCCEx_PLL3_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800647e:	e003      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	75fb      	strb	r3, [r7, #23]
      break;
 8006484:	e000      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800648e:	4b77      	ldr	r3, [pc, #476]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	f023 0207 	bic.w	r2, r3, #7
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649a:	4974      	ldr	r1, [pc, #464]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800649c:	4313      	orrs	r3, r2
 800649e:	654b      	str	r3, [r1, #84]	; 0x54
 80064a0:	e001      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
 80064a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d03a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	2b05      	cmp	r3, #5
 80064ba:	d821      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	08006507 	.word	0x08006507
 80064c8:	080064dd 	.word	0x080064dd
 80064cc:	080064ef 	.word	0x080064ef
 80064d0:	08006507 	.word	0x08006507
 80064d4:	08006507 	.word	0x08006507
 80064d8:	08006507 	.word	0x08006507
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	2101      	movs	r1, #1
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fd74 	bl	8006fd0 <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064ec:	e00c      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3324      	adds	r3, #36	; 0x24
 80064f2:	2101      	movs	r1, #1
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fe1d 	bl	8007134 <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
      break;
 8006504:	e000      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800650e:	4b57      	ldr	r3, [pc, #348]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006512:	f023 0207 	bic.w	r2, r3, #7
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651c:	4953      	ldr	r1, [pc, #332]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800651e:	4313      	orrs	r3, r2
 8006520:	658b      	str	r3, [r1, #88]	; 0x58
 8006522:	e001      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	d04b      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800653e:	d02e      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006544:	d828      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654a:	d02a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006550:	d822      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006552:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006556:	d026      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006558:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800655c:	d81c      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800655e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006562:	d010      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006568:	d816      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01d      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800656e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006572:	d111      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3304      	adds	r3, #4
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fd28 	bl	8006fd0 <RCCEx_PLL2_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006584:	e012      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3324      	adds	r3, #36	; 0x24
 800658a:	2102      	movs	r1, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fdd1 	bl	8007134 <RCCEx_PLL3_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006596:	e009      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	75fb      	strb	r3, [r7, #23]
      break;
 800659c:	e006      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800659e:	bf00      	nop
 80065a0:	e004      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80065a2:	bf00      	nop
 80065a4:	e002      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80065a6:	bf00      	nop
 80065a8:	e000      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80065aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065b2:	4b2e      	ldr	r3, [pc, #184]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c0:	492a      	ldr	r1, [pc, #168]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	654b      	str	r3, [r1, #84]	; 0x54
 80065c6:	e001      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d04d      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065e2:	d02e      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80065e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065e8:	d828      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ee:	d02a      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80065f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f4:	d822      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065fa:	d026      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80065fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006600:	d81c      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006606:	d010      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660c:	d816      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01d      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006616:	d111      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fcd6 	bl	8006fd0 <RCCEx_PLL2_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006628:	e012      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3324      	adds	r3, #36	; 0x24
 800662e:	2102      	movs	r1, #2
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fd7f 	bl	8007134 <RCCEx_PLL3_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800663a:	e009      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	75fb      	strb	r3, [r7, #23]
      break;
 8006640:	e006      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006642:	bf00      	nop
 8006644:	e004      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800664e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10c      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006664:	4901      	ldr	r1, [pc, #4]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006666:	4313      	orrs	r3, r2
 8006668:	658b      	str	r3, [r1, #88]	; 0x58
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800666c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667c:	2b00      	cmp	r3, #0
 800667e:	d04b      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006686:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800668a:	d02e      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800668c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006690:	d828      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006696:	d02a      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669c:	d822      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800669e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80066a2:	d026      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80066a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80066a8:	d81c      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80066aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ae:	d010      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80066b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066b4:	d816      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01d      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80066ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066be:	d111      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fc82 	bl	8006fd0 <RCCEx_PLL2_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066d0:	e012      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3324      	adds	r3, #36	; 0x24
 80066d6:	2102      	movs	r1, #2
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fd2b 	bl	8007134 <RCCEx_PLL3_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066e2:	e009      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	75fb      	strb	r3, [r7, #23]
      break;
 80066e8:	e006      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066ea:	bf00      	nop
 80066ec:	e004      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066ee:	bf00      	nop
 80066f0:	e002      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066f2:	bf00      	nop
 80066f4:	e000      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066fe:	4b9d      	ldr	r3, [pc, #628]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800670c:	4999      	ldr	r1, [pc, #612]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800670e:	4313      	orrs	r3, r2
 8006710:	658b      	str	r3, [r1, #88]	; 0x58
 8006712:	e001      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01a      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672e:	d10a      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3324      	adds	r3, #36	; 0x24
 8006734:	2102      	movs	r1, #2
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fcfc 	bl	8007134 <RCCEx_PLL3_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006746:	4b8b      	ldr	r3, [pc, #556]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006754:	4987      	ldr	r1, [pc, #540]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006756:	4313      	orrs	r3, r2
 8006758:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800676c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006770:	d10a      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3324      	adds	r3, #36	; 0x24
 8006776:	2102      	movs	r1, #2
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fcdb 	bl	8007134 <RCCEx_PLL3_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006788:	4b7a      	ldr	r3, [pc, #488]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800678a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006796:	4977      	ldr	r1, [pc, #476]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006798:	4313      	orrs	r3, r2
 800679a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d034      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b2:	d01d      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80067b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b8:	d817      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80067be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c2:	d009      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80067c4:	e011      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3304      	adds	r3, #4
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fbff 	bl	8006fd0 <RCCEx_PLL2_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067d6:	e00c      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3324      	adds	r3, #36	; 0x24
 80067dc:	2102      	movs	r1, #2
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fca8 	bl	8007134 <RCCEx_PLL3_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067e8:	e003      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	75fb      	strb	r3, [r7, #23]
      break;
 80067ee:	e000      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80067f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067f8:	4b5e      	ldr	r3, [pc, #376]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006806:	495b      	ldr	r1, [pc, #364]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006808:	4313      	orrs	r3, r2
 800680a:	658b      	str	r3, [r1, #88]	; 0x58
 800680c:	e001      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d033      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006824:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006828:	d01c      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800682a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800682e:	d816      	bhi.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006834:	d003      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800683a:	d007      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800683c:	e00f      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800683e:	4b4d      	ldr	r3, [pc, #308]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	4a4c      	ldr	r2, [pc, #304]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006848:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800684a:	e00c      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3324      	adds	r3, #36	; 0x24
 8006850:	2101      	movs	r1, #1
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fc6e 	bl	8007134 <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
      break;
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800686c:	4b41      	ldr	r3, [pc, #260]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800686e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800687a:	493e      	ldr	r1, [pc, #248]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800687c:	4313      	orrs	r3, r2
 800687e:	654b      	str	r3, [r1, #84]	; 0x54
 8006880:	e001      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d029      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800689a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689e:	d007      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80068a0:	e00f      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a2:	4b34      	ldr	r3, [pc, #208]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	4a33      	ldr	r2, [pc, #204]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80068ae:	e00b      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	2102      	movs	r1, #2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fb8a 	bl	8006fd0 <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80068c0:	e002      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	75fb      	strb	r3, [r7, #23]
      break;
 80068c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068ce:	4b29      	ldr	r3, [pc, #164]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	4926      	ldr	r1, [pc, #152]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068e0:	e001      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3324      	adds	r3, #36	; 0x24
 80068f6:	2102      	movs	r1, #2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fc1b 	bl	8007134 <RCCEx_PLL3_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d033      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691c:	d017      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800691e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006922:	d811      	bhi.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006928:	d013      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800692a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692e:	d80b      	bhi.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d010      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006938:	d106      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	4a0d      	ldr	r2, [pc, #52]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006944:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006946:	e007      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	75fb      	strb	r3, [r7, #23]
      break;
 800694c:	e004      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800694e:	bf00      	nop
 8006950:	e002      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10c      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696a:	4902      	ldr	r1, [pc, #8]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800696c:	4313      	orrs	r3, r2
 800696e:	654b      	str	r3, [r1, #84]	; 0x54
 8006970:	e004      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006972:	bf00      	nop
 8006974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006988:	4b31      	ldr	r3, [pc, #196]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800698a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006994:	492e      	ldr	r1, [pc, #184]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006996:	4313      	orrs	r3, r2
 8006998:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80069a6:	4b2a      	ldr	r3, [pc, #168]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069b4:	4926      	ldr	r1, [pc, #152]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d008      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069c6:	4b22      	ldr	r3, [pc, #136]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d2:	491f      	ldr	r1, [pc, #124]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00d      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069e4:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ee:	6113      	str	r3, [r2, #16]
 80069f0:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069fa:	4915      	ldr	r1, [pc, #84]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	da08      	bge.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a08:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a14:	490e      	ldr	r1, [pc, #56]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a26:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	4906      	ldr	r1, [pc, #24]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006a3a:	7dbb      	ldrb	r3, [r7, #22]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e000      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	58024400 	.word	0x58024400

08006a54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a58:	f7ff f85a 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4904      	ldr	r1, [pc, #16]	; (8006a7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a6a:	5ccb      	ldrb	r3, [r1, r3]
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	08009fc4 	.word	0x08009fc4

08006a80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b089      	sub	sp, #36	; 0x24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a88:	4ba1      	ldr	r3, [pc, #644]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006a92:	4b9f      	ldr	r3, [pc, #636]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	0b1b      	lsrs	r3, r3, #12
 8006a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a9e:	4b9c      	ldr	r3, [pc, #624]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006aaa:	4b99      	ldr	r3, [pc, #612]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	08db      	lsrs	r3, r3, #3
 8006ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8111 	beq.w	8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	f000 8083 	beq.w	8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	f200 80a1 	bhi.w	8006c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d056      	beq.n	8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006aea:	e099      	b.n	8006c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aec:	4b88      	ldr	r3, [pc, #544]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d02d      	beq.n	8006b54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006af8:	4b85      	ldr	r3, [pc, #532]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	08db      	lsrs	r3, r3, #3
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	4a84      	ldr	r2, [pc, #528]	; (8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b04:	fa22 f303 	lsr.w	r3, r2, r3
 8006b08:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	ee07 3a90 	vmov	s15, r3
 8006b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b22:	4b7b      	ldr	r3, [pc, #492]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b52:	e087      	b.n	8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b66:	4b6a      	ldr	r3, [pc, #424]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b96:	e065      	b.n	8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006baa:	4b59      	ldr	r3, [pc, #356]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bda:	e043      	b.n	8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bee:	4b48      	ldr	r3, [pc, #288]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c1e:	e021      	b.n	8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c32:	4b37      	ldr	r3, [pc, #220]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c64:	4b2a      	ldr	r3, [pc, #168]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	0a5b      	lsrs	r3, r3, #9
 8006c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c8a:	ee17 2a90 	vmov	r2, s15
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c92:	4b1f      	ldr	r3, [pc, #124]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	0c1b      	lsrs	r3, r3, #16
 8006c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9c:	ee07 3a90 	vmov	s15, r3
 8006ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb8:	ee17 2a90 	vmov	r2, s15
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	0e1b      	lsrs	r3, r3, #24
 8006cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce6:	ee17 2a90 	vmov	r2, s15
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cee:	e008      	b.n	8006d02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	609a      	str	r2, [r3, #8]
}
 8006d02:	bf00      	nop
 8006d04:	3724      	adds	r7, #36	; 0x24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
 8006d14:	03d09000 	.word	0x03d09000
 8006d18:	46000000 	.word	0x46000000
 8006d1c:	4c742400 	.word	0x4c742400
 8006d20:	4a742400 	.word	0x4a742400
 8006d24:	4af42400 	.word	0x4af42400

08006d28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b089      	sub	sp, #36	; 0x24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d30:	4ba1      	ldr	r3, [pc, #644]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d3a:	4b9f      	ldr	r3, [pc, #636]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	0d1b      	lsrs	r3, r3, #20
 8006d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d46:	4b9c      	ldr	r3, [pc, #624]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d52:	4b99      	ldr	r3, [pc, #612]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	08db      	lsrs	r3, r3, #3
 8006d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8111 	beq.w	8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	f000 8083 	beq.w	8006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	f200 80a1 	bhi.w	8006ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d056      	beq.n	8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d92:	e099      	b.n	8006ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d94:	4b88      	ldr	r3, [pc, #544]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02d      	beq.n	8006dfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006da0:	4b85      	ldr	r3, [pc, #532]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	08db      	lsrs	r3, r3, #3
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	4a84      	ldr	r2, [pc, #528]	; (8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
 8006db0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	ee07 3a90 	vmov	s15, r3
 8006db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dca:	4b7b      	ldr	r3, [pc, #492]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006dfa:	e087      	b.n	8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0e:	4b6a      	ldr	r3, [pc, #424]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e3e:	e065      	b.n	8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e52:	4b59      	ldr	r3, [pc, #356]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e82:	e043      	b.n	8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e96:	4b48      	ldr	r3, [pc, #288]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ec6:	e021      	b.n	8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eda:	4b37      	ldr	r3, [pc, #220]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006f0c:	4b2a      	ldr	r3, [pc, #168]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	0a5b      	lsrs	r3, r3, #9
 8006f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f32:	ee17 2a90 	vmov	r2, s15
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f3a:	4b1f      	ldr	r3, [pc, #124]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	0c1b      	lsrs	r3, r3, #16
 8006f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f60:	ee17 2a90 	vmov	r2, s15
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f68:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	0e1b      	lsrs	r3, r3, #24
 8006f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8e:	ee17 2a90 	vmov	r2, s15
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f96:	e008      	b.n	8006faa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	609a      	str	r2, [r3, #8]
}
 8006faa:	bf00      	nop
 8006fac:	3724      	adds	r7, #36	; 0x24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	03d09000 	.word	0x03d09000
 8006fc0:	46000000 	.word	0x46000000
 8006fc4:	4c742400 	.word	0x4c742400
 8006fc8:	4a742400 	.word	0x4a742400
 8006fcc:	4af42400 	.word	0x4af42400

08006fd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fde:	4b53      	ldr	r3, [pc, #332]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d101      	bne.n	8006fee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e099      	b.n	8007122 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fee:	4b4f      	ldr	r3, [pc, #316]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a4e      	ldr	r2, [pc, #312]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8006ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ffa:	f7fc fd77 	bl	8003aec <HAL_GetTick>
 8006ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007000:	e008      	b.n	8007014 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007002:	f7fc fd73 	bl	8003aec <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e086      	b.n	8007122 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007014:	4b45      	ldr	r3, [pc, #276]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1f0      	bne.n	8007002 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007020:	4b42      	ldr	r3, [pc, #264]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	031b      	lsls	r3, r3, #12
 800702e:	493f      	ldr	r1, [pc, #252]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	628b      	str	r3, [r1, #40]	; 0x28
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	3b01      	subs	r3, #1
 800703a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	3b01      	subs	r3, #1
 8007044:	025b      	lsls	r3, r3, #9
 8007046:	b29b      	uxth	r3, r3
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	3b01      	subs	r3, #1
 8007050:	041b      	lsls	r3, r3, #16
 8007052:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	3b01      	subs	r3, #1
 800705e:	061b      	lsls	r3, r3, #24
 8007060:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007064:	4931      	ldr	r1, [pc, #196]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8007066:	4313      	orrs	r3, r2
 8007068:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800706a:	4b30      	ldr	r3, [pc, #192]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	492d      	ldr	r1, [pc, #180]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8007078:	4313      	orrs	r3, r2
 800707a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800707c:	4b2b      	ldr	r3, [pc, #172]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	f023 0220 	bic.w	r2, r3, #32
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	4928      	ldr	r1, [pc, #160]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 800708a:	4313      	orrs	r3, r2
 800708c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800708e:	4b27      	ldr	r3, [pc, #156]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	4a26      	ldr	r2, [pc, #152]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8007094:	f023 0310 	bic.w	r3, r3, #16
 8007098:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800709a:	4b24      	ldr	r3, [pc, #144]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 800709c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709e:	4b24      	ldr	r3, [pc, #144]	; (8007130 <RCCEx_PLL2_Config+0x160>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	69d2      	ldr	r2, [r2, #28]
 80070a6:	00d2      	lsls	r2, r2, #3
 80070a8:	4920      	ldr	r1, [pc, #128]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070ae:	4b1f      	ldr	r3, [pc, #124]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	4a1e      	ldr	r2, [pc, #120]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070b4:	f043 0310 	orr.w	r3, r3, #16
 80070b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070c0:	4b1a      	ldr	r3, [pc, #104]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	4a19      	ldr	r2, [pc, #100]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070cc:	e00f      	b.n	80070ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d106      	bne.n	80070e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070d4:	4b15      	ldr	r3, [pc, #84]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	4a14      	ldr	r2, [pc, #80]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070e0:	e005      	b.n	80070ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	4a11      	ldr	r2, [pc, #68]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070ee:	4b0f      	ldr	r3, [pc, #60]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a0e      	ldr	r2, [pc, #56]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 80070f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070fa:	f7fc fcf7 	bl	8003aec <HAL_GetTick>
 80070fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007100:	e008      	b.n	8007114 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007102:	f7fc fcf3 	bl	8003aec <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e006      	b.n	8007122 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007114:	4b05      	ldr	r3, [pc, #20]	; (800712c <RCCEx_PLL2_Config+0x15c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	58024400 	.word	0x58024400
 8007130:	ffff0007 	.word	0xffff0007

08007134 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007142:	4b53      	ldr	r3, [pc, #332]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	2b03      	cmp	r3, #3
 800714c:	d101      	bne.n	8007152 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e099      	b.n	8007286 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007152:	4b4f      	ldr	r3, [pc, #316]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a4e      	ldr	r2, [pc, #312]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800715c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800715e:	f7fc fcc5 	bl	8003aec <HAL_GetTick>
 8007162:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007164:	e008      	b.n	8007178 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007166:	f7fc fcc1 	bl	8003aec <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d901      	bls.n	8007178 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e086      	b.n	8007286 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007178:	4b45      	ldr	r3, [pc, #276]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1f0      	bne.n	8007166 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007184:	4b42      	ldr	r3, [pc, #264]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	051b      	lsls	r3, r3, #20
 8007192:	493f      	ldr	r1, [pc, #252]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007194:	4313      	orrs	r3, r2
 8007196:	628b      	str	r3, [r1, #40]	; 0x28
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	3b01      	subs	r3, #1
 800719e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	025b      	lsls	r3, r3, #9
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	061b      	lsls	r3, r3, #24
 80071c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071c8:	4931      	ldr	r1, [pc, #196]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071ce:	4b30      	ldr	r3, [pc, #192]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	492d      	ldr	r1, [pc, #180]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071e0:	4b2b      	ldr	r3, [pc, #172]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	4928      	ldr	r1, [pc, #160]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071f2:	4b27      	ldr	r3, [pc, #156]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	4a26      	ldr	r2, [pc, #152]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 80071f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071fe:	4b24      	ldr	r3, [pc, #144]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007202:	4b24      	ldr	r3, [pc, #144]	; (8007294 <RCCEx_PLL3_Config+0x160>)
 8007204:	4013      	ands	r3, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	69d2      	ldr	r2, [r2, #28]
 800720a:	00d2      	lsls	r2, r2, #3
 800720c:	4920      	ldr	r1, [pc, #128]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 800720e:	4313      	orrs	r3, r2
 8007210:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007212:	4b1f      	ldr	r3, [pc, #124]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	4a1e      	ldr	r2, [pc, #120]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007224:	4b1a      	ldr	r3, [pc, #104]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	4a19      	ldr	r2, [pc, #100]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 800722a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800722e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007230:	e00f      	b.n	8007252 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d106      	bne.n	8007246 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007238:	4b15      	ldr	r3, [pc, #84]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4a14      	ldr	r2, [pc, #80]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 800723e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007242:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007244:	e005      	b.n	8007252 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	4a11      	ldr	r2, [pc, #68]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 800724c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007250:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007252:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a0e      	ldr	r2, [pc, #56]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 8007258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800725c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725e:	f7fc fc45 	bl	8003aec <HAL_GetTick>
 8007262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007264:	e008      	b.n	8007278 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007266:	f7fc fc41 	bl	8003aec <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e006      	b.n	8007286 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <RCCEx_PLL3_Config+0x15c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f0      	beq.n	8007266 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	58024400 	.word	0x58024400
 8007294:	ffff0007 	.word	0xffff0007

08007298 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e0f1      	b.n	800748e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a78      	ldr	r2, [pc, #480]	; (8007498 <HAL_SPI_Init+0x200>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00f      	beq.n	80072da <HAL_SPI_Init+0x42>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a77      	ldr	r2, [pc, #476]	; (800749c <HAL_SPI_Init+0x204>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00a      	beq.n	80072da <HAL_SPI_Init+0x42>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a75      	ldr	r2, [pc, #468]	; (80074a0 <HAL_SPI_Init+0x208>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d005      	beq.n	80072da <HAL_SPI_Init+0x42>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	2b0f      	cmp	r3, #15
 80072d4:	d901      	bls.n	80072da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e0d9      	b.n	800748e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fd74 	bl	8007dc8 <SPI_GetPacketSize>
 80072e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a6c      	ldr	r2, [pc, #432]	; (8007498 <HAL_SPI_Init+0x200>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00c      	beq.n	8007306 <HAL_SPI_Init+0x6e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a6a      	ldr	r2, [pc, #424]	; (800749c <HAL_SPI_Init+0x204>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d007      	beq.n	8007306 <HAL_SPI_Init+0x6e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a69      	ldr	r2, [pc, #420]	; (80074a0 <HAL_SPI_Init+0x208>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d002      	beq.n	8007306 <HAL_SPI_Init+0x6e>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b08      	cmp	r3, #8
 8007304:	d811      	bhi.n	800732a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800730a:	4a63      	ldr	r2, [pc, #396]	; (8007498 <HAL_SPI_Init+0x200>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d009      	beq.n	8007324 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a61      	ldr	r2, [pc, #388]	; (800749c <HAL_SPI_Init+0x204>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d004      	beq.n	8007324 <HAL_SPI_Init+0x8c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a60      	ldr	r2, [pc, #384]	; (80074a0 <HAL_SPI_Init+0x208>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d104      	bne.n	800732e <HAL_SPI_Init+0x96>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b10      	cmp	r3, #16
 8007328:	d901      	bls.n	800732e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e0af      	b.n	800748e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7f9 feb4 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800736a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007374:	d119      	bne.n	80073aa <HAL_SPI_Init+0x112>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800737e:	d103      	bne.n	8007388 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10c      	bne.n	80073aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007398:	d107      	bne.n	80073aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	431a      	orrs	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	ea42 0103 	orr.w	r1, r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740a:	ea42 0103 	orr.w	r1, r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d113      	bne.n	800744a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007434:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007448:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40013000 	.word	0x40013000
 800749c:	40003800 	.word	0x40003800
 80074a0:	40003c00 	.word	0x40003c00

080074a4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	; 0x28
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3330      	adds	r3, #48	; 0x30
 80074be:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074c8:	d112      	bne.n	80074f0 <HAL_SPI_Receive+0x4c>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10e      	bne.n	80074f0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2204      	movs	r2, #4
 80074d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074da:	88fa      	ldrh	r2, [r7, #6]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	4613      	mov	r3, r2
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f978 	bl	80077dc <HAL_SPI_TransmitReceive>
 80074ec:	4603      	mov	r3, r0
 80074ee:	e16f      	b.n	80077d0 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_SPI_Receive+0x5a>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e168      	b.n	80077d0 <HAL_SPI_Receive+0x32c>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007506:	f7fc faf1 	bl	8003aec <HAL_GetTick>
 800750a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b01      	cmp	r3, #1
 8007516:	d007      	beq.n	8007528 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8007518:	2302      	movs	r3, #2
 800751a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007524:	7ffb      	ldrb	r3, [r7, #31]
 8007526:	e153      	b.n	80077d0 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <HAL_SPI_Receive+0x90>
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d107      	bne.n	8007544 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007540:	7ffb      	ldrb	r3, [r7, #31]
 8007542:	e145      	b.n	80077d0 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2204      	movs	r2, #4
 8007548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	88fa      	ldrh	r2, [r7, #6]
 800755e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007594:	d107      	bne.n	80075a6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	4b8a      	ldr	r3, [pc, #552]	; (80077d8 <HAL_SPI_Receive+0x334>)
 80075ae:	4013      	ands	r3, r2
 80075b0:	88f9      	ldrh	r1, [r7, #6]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	430b      	orrs	r3, r1
 80075b8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0201 	orr.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075d2:	d107      	bne.n	80075e4 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2b0f      	cmp	r3, #15
 80075ea:	d948      	bls.n	800767e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80075ec:	e040      	b.n	8007670 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695a      	ldr	r2, [r3, #20]
 80075f4:	f248 0308 	movw	r3, #32776	; 0x8008
 80075f8:	4013      	ands	r3, r2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d014      	beq.n	8007628 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007606:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007608:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007626:	e023      	b.n	8007670 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007628:	f7fc fa60 	bl	8003aec <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d803      	bhi.n	8007640 <HAL_SPI_Receive+0x19c>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	d102      	bne.n	8007646 <HAL_SPI_Receive+0x1a2>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d114      	bne.n	8007670 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 faf0 	bl	8007c2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e0af      	b.n	80077d0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1b8      	bne.n	80075ee <HAL_SPI_Receive+0x14a>
 800767c:	e095      	b.n	80077aa <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2b07      	cmp	r3, #7
 8007684:	f240 808b 	bls.w	800779e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007688:	e03f      	b.n	800770a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b01      	cmp	r3, #1
 8007696:	d114      	bne.n	80076c2 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	8812      	ldrh	r2, [r2, #0]
 80076a0:	b292      	uxth	r2, r2
 80076a2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a8:	1c9a      	adds	r2, r3, #2
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80076c0:	e023      	b.n	800770a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076c2:	f7fc fa13 	bl	8003aec <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d803      	bhi.n	80076da <HAL_SPI_Receive+0x236>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d102      	bne.n	80076e0 <HAL_SPI_Receive+0x23c>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d114      	bne.n	800770a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 faa3 	bl	8007c2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e062      	b.n	80077d0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1b9      	bne.n	800768a <HAL_SPI_Receive+0x1e6>
 8007716:	e048      	b.n	80077aa <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b01      	cmp	r3, #1
 8007724:	d117      	bne.n	8007756 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007732:	7812      	ldrb	r2, [r2, #0]
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007754:	e023      	b.n	800779e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007756:	f7fc f9c9 	bl	8003aec <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d803      	bhi.n	800776e <HAL_SPI_Receive+0x2ca>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d102      	bne.n	8007774 <HAL_SPI_Receive+0x2d0>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d114      	bne.n	800779e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fa59 	bl	8007c2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e018      	b.n	80077d0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1b6      	bne.n	8007718 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fa3e 	bl	8007c2c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80077ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	ffff0000 	.word	0xffff0000

080077dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08e      	sub	sp, #56	; 0x38
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3320      	adds	r3, #32
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3330      	adds	r3, #48	; 0x30
 80077fe:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_SPI_TransmitReceive+0x32>
 800780a:	2302      	movs	r3, #2
 800780c:	e209      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x446>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007816:	f7fc f969 	bl	8003aec <HAL_GetTick>
 800781a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800781c:	887b      	ldrh	r3, [r7, #2]
 800781e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8007820:	887b      	ldrh	r3, [r7, #2]
 8007822:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800782a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007832:	7efb      	ldrb	r3, [r7, #27]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d014      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x86>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800783e:	d106      	bne.n	800784e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007848:	7efb      	ldrb	r3, [r7, #27]
 800784a:	2b04      	cmp	r3, #4
 800784c:	d009      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800784e:	2302      	movs	r3, #2
 8007850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800785c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007860:	e1df      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <HAL_SPI_TransmitReceive+0x98>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_SPI_TransmitReceive+0x98>
 800786e:	887b      	ldrh	r3, [r7, #2]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007882:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007886:	e1cc      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b04      	cmp	r3, #4
 8007892:	d003      	beq.n	800789c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2205      	movs	r2, #5
 8007898:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	887a      	ldrh	r2, [r7, #2]
 80078ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	887a      	ldrh	r2, [r7, #2]
 80078b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	887a      	ldrh	r2, [r7, #2]
 80078c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	887a      	ldrh	r2, [r7, #2]
 80078cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	4b82      	ldr	r3, [pc, #520]	; (8007aec <HAL_SPI_TransmitReceive+0x310>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	8879      	ldrh	r1, [r7, #2]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	6812      	ldr	r2, [r2, #0]
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007908:	d107      	bne.n	800791a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d970      	bls.n	8007a04 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007922:	e068      	b.n	80079f6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b02      	cmp	r3, #2
 8007930:	d11a      	bne.n	8007968 <HAL_SPI_TransmitReceive+0x18c>
 8007932:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007934:	2b00      	cmp	r3, #0
 8007936:	d017      	beq.n	8007968 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007948:	1d1a      	adds	r2, r3, #4
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007966:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695a      	ldr	r2, [r3, #20]
 800796e:	f248 0308 	movw	r3, #32776	; 0x8008
 8007972:	4013      	ands	r3, r2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01a      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x1d2>
 8007978:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d017      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007986:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007988:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ae:	f7fc f89d 	bl	8003aec <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d803      	bhi.n	80079c6 <HAL_SPI_TransmitReceive+0x1ea>
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d102      	bne.n	80079cc <HAL_SPI_TransmitReceive+0x1f0>
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d114      	bne.n	80079f6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f92d 	bl	8007c2c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e115      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80079f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d193      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x148>
 80079fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d190      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x148>
 8007a02:	e0e7      	b.n	8007bd4 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	2b07      	cmp	r3, #7
 8007a0a:	f240 80dd 	bls.w	8007bc8 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007a0e:	e066      	b.n	8007ade <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d119      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x276>
 8007a1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d016      	beq.n	8007a52 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	881a      	ldrh	r2, [r3, #0]
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a32:	1c9a      	adds	r2, r3, #2
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a50:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d11a      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x2ba>
 8007a60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d017      	beq.n	8007a96 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a6a:	6a3a      	ldr	r2, [r7, #32]
 8007a6c:	8812      	ldrh	r2, [r2, #0]
 8007a6e:	b292      	uxth	r2, r2
 8007a70:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a76:	1c9a      	adds	r2, r3, #2
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a94:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a96:	f7fc f829 	bl	8003aec <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d803      	bhi.n	8007aae <HAL_SPI_TransmitReceive+0x2d2>
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d102      	bne.n	8007ab4 <HAL_SPI_TransmitReceive+0x2d8>
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d114      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f8b9 	bl	8007c2c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e0a1      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d195      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x234>
 8007ae4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d192      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x234>
 8007aea:	e073      	b.n	8007bd4 <HAL_SPI_TransmitReceive+0x3f8>
 8007aec:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d11b      	bne.n	8007b36 <HAL_SPI_TransmitReceive+0x35a>
 8007afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d018      	beq.n	8007b36 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3320      	adds	r3, #32
 8007b0e:	7812      	ldrb	r2, [r2, #0]
 8007b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b34:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d11d      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x3a4>
 8007b44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01a      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b80:	f7fb ffb4 	bl	8003aec <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d803      	bhi.n	8007b98 <HAL_SPI_TransmitReceive+0x3bc>
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b96:	d102      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x3c2>
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d114      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f844 	bl	8007c2c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e02c      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007bc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d190      	bne.n	8007af0 <HAL_SPI_TransmitReceive+0x314>
 8007bce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d18d      	bne.n	8007af0 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2108      	movs	r1, #8
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f8c4 	bl	8007d6c <SPI_WaitOnFlagUntilTimeout>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d007      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf0:	f043 0220 	orr.w	r2, r3, #32
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f816 	bl	8007c2c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e001      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3730      	adds	r7, #48	; 0x30
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop

08007c2c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0208 	orr.w	r2, r2, #8
 8007c4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0210 	orr.w	r2, r2, #16
 8007c5a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0201 	bic.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6919      	ldr	r1, [r3, #16]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b3c      	ldr	r3, [pc, #240]	; (8007d68 <SPI_CloseTransfer+0x13c>)
 8007c78:	400b      	ands	r3, r1
 8007c7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d014      	beq.n	8007cc2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0220 	orr.w	r2, r2, #32
 8007cc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d014      	beq.n	8007cf8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00f      	beq.n	8007cf8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cde:	f043 0204 	orr.w	r2, r3, #4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cf6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00f      	beq.n	8007d22 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d08:	f043 0201 	orr.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00f      	beq.n	8007d4c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d32:	f043 0208 	orr.w	r2, r3, #8
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	fffffc90 	.word	0xfffffc90

08007d6c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d7c:	e010      	b.n	8007da0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d7e:	f7fb feb5 	bl	8003aec <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d803      	bhi.n	8007d96 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d102      	bne.n	8007d9c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e00f      	b.n	8007dc0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	695a      	ldr	r2, [r3, #20]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	4013      	ands	r3, r2
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	bf0c      	ite	eq
 8007db0:	2301      	moveq	r3, #1
 8007db2:	2300      	movne	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	461a      	mov	r2, r3
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d0df      	beq.n	8007d7e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	3307      	adds	r3, #7
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e042      	b.n	8007e96 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d106      	bne.n	8007e28 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7f9 f9a8 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2224      	movs	r2, #36	; 0x24
 8007e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0201 	bic.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f8c3 	bl	8007fcc <UART_SetConfig>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e022      	b.n	8007e96 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fe1f 	bl	8008a9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0201 	orr.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fea6 	bl	8008be0 <UART_CheckIdleState>
 8007e94:	4603      	mov	r3, r0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b08a      	sub	sp, #40	; 0x28
 8007ea2:	af02      	add	r7, sp, #8
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	f040 8083 	bne.w	8007fc0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_UART_Transmit+0x28>
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e07b      	b.n	8007fc2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_UART_Transmit+0x3a>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e074      	b.n	8007fc2 <HAL_UART_Transmit+0x124>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2221      	movs	r2, #33	; 0x21
 8007eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ef0:	f7fb fdfc 	bl	8003aec <HAL_GetTick>
 8007ef4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	88fa      	ldrh	r2, [r7, #6]
 8007efa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	88fa      	ldrh	r2, [r7, #6]
 8007f02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0e:	d108      	bne.n	8007f22 <HAL_UART_Transmit+0x84>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d104      	bne.n	8007f22 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	e003      	b.n	8007f2a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f32:	e02c      	b.n	8007f8e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2180      	movs	r1, #128	; 0x80
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 fe99 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e039      	b.n	8007fc2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10b      	bne.n	8007f6c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	3302      	adds	r3, #2
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	e007      	b.n	8007f7c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1cc      	bne.n	8007f34 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2140      	movs	r1, #64	; 0x40
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 fe66 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e006      	b.n	8007fc2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e000      	b.n	8007fc2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007fc0:	2302      	movs	r3, #2
  }
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fd0:	b092      	sub	sp, #72	; 0x48
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	431a      	orrs	r2, r3
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4bbe      	ldr	r3, [pc, #760]	; (80082f4 <UART_SetConfig+0x328>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008004:	430b      	orrs	r3, r1
 8008006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4ab3      	ldr	r2, [pc, #716]	; (80082f8 <UART_SetConfig+0x32c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d004      	beq.n	8008038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008034:	4313      	orrs	r3, r2
 8008036:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	4baf      	ldr	r3, [pc, #700]	; (80082fc <UART_SetConfig+0x330>)
 8008040:	4013      	ands	r3, r2
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008048:	430b      	orrs	r3, r1
 800804a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	f023 010f 	bic.w	r1, r3, #15
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4aa6      	ldr	r2, [pc, #664]	; (8008300 <UART_SetConfig+0x334>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d177      	bne.n	800815c <UART_SetConfig+0x190>
 800806c:	4ba5      	ldr	r3, [pc, #660]	; (8008304 <UART_SetConfig+0x338>)
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008074:	2b28      	cmp	r3, #40	; 0x28
 8008076:	d86d      	bhi.n	8008154 <UART_SetConfig+0x188>
 8008078:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <UART_SetConfig+0xb4>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	08008125 	.word	0x08008125
 8008084:	08008155 	.word	0x08008155
 8008088:	08008155 	.word	0x08008155
 800808c:	08008155 	.word	0x08008155
 8008090:	08008155 	.word	0x08008155
 8008094:	08008155 	.word	0x08008155
 8008098:	08008155 	.word	0x08008155
 800809c:	08008155 	.word	0x08008155
 80080a0:	0800812d 	.word	0x0800812d
 80080a4:	08008155 	.word	0x08008155
 80080a8:	08008155 	.word	0x08008155
 80080ac:	08008155 	.word	0x08008155
 80080b0:	08008155 	.word	0x08008155
 80080b4:	08008155 	.word	0x08008155
 80080b8:	08008155 	.word	0x08008155
 80080bc:	08008155 	.word	0x08008155
 80080c0:	08008135 	.word	0x08008135
 80080c4:	08008155 	.word	0x08008155
 80080c8:	08008155 	.word	0x08008155
 80080cc:	08008155 	.word	0x08008155
 80080d0:	08008155 	.word	0x08008155
 80080d4:	08008155 	.word	0x08008155
 80080d8:	08008155 	.word	0x08008155
 80080dc:	08008155 	.word	0x08008155
 80080e0:	0800813d 	.word	0x0800813d
 80080e4:	08008155 	.word	0x08008155
 80080e8:	08008155 	.word	0x08008155
 80080ec:	08008155 	.word	0x08008155
 80080f0:	08008155 	.word	0x08008155
 80080f4:	08008155 	.word	0x08008155
 80080f8:	08008155 	.word	0x08008155
 80080fc:	08008155 	.word	0x08008155
 8008100:	08008145 	.word	0x08008145
 8008104:	08008155 	.word	0x08008155
 8008108:	08008155 	.word	0x08008155
 800810c:	08008155 	.word	0x08008155
 8008110:	08008155 	.word	0x08008155
 8008114:	08008155 	.word	0x08008155
 8008118:	08008155 	.word	0x08008155
 800811c:	08008155 	.word	0x08008155
 8008120:	0800814d 	.word	0x0800814d
 8008124:	2301      	movs	r3, #1
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812a:	e222      	b.n	8008572 <UART_SetConfig+0x5a6>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008132:	e21e      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813a:	e21a      	b.n	8008572 <UART_SetConfig+0x5a6>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008142:	e216      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008144:	2320      	movs	r3, #32
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e212      	b.n	8008572 <UART_SetConfig+0x5a6>
 800814c:	2340      	movs	r3, #64	; 0x40
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e20e      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008154:	2380      	movs	r3, #128	; 0x80
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e20a      	b.n	8008572 <UART_SetConfig+0x5a6>
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a69      	ldr	r2, [pc, #420]	; (8008308 <UART_SetConfig+0x33c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d130      	bne.n	80081c8 <UART_SetConfig+0x1fc>
 8008166:	4b67      	ldr	r3, [pc, #412]	; (8008304 <UART_SetConfig+0x338>)
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	2b05      	cmp	r3, #5
 8008170:	d826      	bhi.n	80081c0 <UART_SetConfig+0x1f4>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <UART_SetConfig+0x1ac>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	08008191 	.word	0x08008191
 800817c:	08008199 	.word	0x08008199
 8008180:	080081a1 	.word	0x080081a1
 8008184:	080081a9 	.word	0x080081a9
 8008188:	080081b1 	.word	0x080081b1
 800818c:	080081b9 	.word	0x080081b9
 8008190:	2300      	movs	r3, #0
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008196:	e1ec      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008198:	2304      	movs	r3, #4
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819e:	e1e8      	b.n	8008572 <UART_SetConfig+0x5a6>
 80081a0:	2308      	movs	r3, #8
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a6:	e1e4      	b.n	8008572 <UART_SetConfig+0x5a6>
 80081a8:	2310      	movs	r3, #16
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ae:	e1e0      	b.n	8008572 <UART_SetConfig+0x5a6>
 80081b0:	2320      	movs	r3, #32
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b6:	e1dc      	b.n	8008572 <UART_SetConfig+0x5a6>
 80081b8:	2340      	movs	r3, #64	; 0x40
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e1d8      	b.n	8008572 <UART_SetConfig+0x5a6>
 80081c0:	2380      	movs	r3, #128	; 0x80
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e1d4      	b.n	8008572 <UART_SetConfig+0x5a6>
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a4f      	ldr	r2, [pc, #316]	; (800830c <UART_SetConfig+0x340>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d130      	bne.n	8008234 <UART_SetConfig+0x268>
 80081d2:	4b4c      	ldr	r3, [pc, #304]	; (8008304 <UART_SetConfig+0x338>)
 80081d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d826      	bhi.n	800822c <UART_SetConfig+0x260>
 80081de:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <UART_SetConfig+0x218>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	080081fd 	.word	0x080081fd
 80081e8:	08008205 	.word	0x08008205
 80081ec:	0800820d 	.word	0x0800820d
 80081f0:	08008215 	.word	0x08008215
 80081f4:	0800821d 	.word	0x0800821d
 80081f8:	08008225 	.word	0x08008225
 80081fc:	2300      	movs	r3, #0
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e1b6      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e1b2      	b.n	8008572 <UART_SetConfig+0x5a6>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e1ae      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e1aa      	b.n	8008572 <UART_SetConfig+0x5a6>
 800821c:	2320      	movs	r3, #32
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e1a6      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008224:	2340      	movs	r3, #64	; 0x40
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e1a2      	b.n	8008572 <UART_SetConfig+0x5a6>
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008232:	e19e      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a35      	ldr	r2, [pc, #212]	; (8008310 <UART_SetConfig+0x344>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d130      	bne.n	80082a0 <UART_SetConfig+0x2d4>
 800823e:	4b31      	ldr	r3, [pc, #196]	; (8008304 <UART_SetConfig+0x338>)
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b05      	cmp	r3, #5
 8008248:	d826      	bhi.n	8008298 <UART_SetConfig+0x2cc>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <UART_SetConfig+0x284>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008269 	.word	0x08008269
 8008254:	08008271 	.word	0x08008271
 8008258:	08008279 	.word	0x08008279
 800825c:	08008281 	.word	0x08008281
 8008260:	08008289 	.word	0x08008289
 8008264:	08008291 	.word	0x08008291
 8008268:	2300      	movs	r3, #0
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e180      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008270:	2304      	movs	r3, #4
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008276:	e17c      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008278:	2308      	movs	r3, #8
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e178      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008280:	2310      	movs	r3, #16
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e174      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008288:	2320      	movs	r3, #32
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e170      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008290:	2340      	movs	r3, #64	; 0x40
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e16c      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008298:	2380      	movs	r3, #128	; 0x80
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e168      	b.n	8008572 <UART_SetConfig+0x5a6>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a1b      	ldr	r2, [pc, #108]	; (8008314 <UART_SetConfig+0x348>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d142      	bne.n	8008330 <UART_SetConfig+0x364>
 80082aa:	4b16      	ldr	r3, [pc, #88]	; (8008304 <UART_SetConfig+0x338>)
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d838      	bhi.n	8008328 <UART_SetConfig+0x35c>
 80082b6:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <UART_SetConfig+0x2f0>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082d5 	.word	0x080082d5
 80082c0:	080082dd 	.word	0x080082dd
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	08008319 	.word	0x08008319
 80082d0:	08008321 	.word	0x08008321
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e14a      	b.n	8008572 <UART_SetConfig+0x5a6>
 80082dc:	2304      	movs	r3, #4
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e146      	b.n	8008572 <UART_SetConfig+0x5a6>
 80082e4:	2308      	movs	r3, #8
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e142      	b.n	8008572 <UART_SetConfig+0x5a6>
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e13e      	b.n	8008572 <UART_SetConfig+0x5a6>
 80082f4:	cfff69f3 	.word	0xcfff69f3
 80082f8:	58000c00 	.word	0x58000c00
 80082fc:	11fff4ff 	.word	0x11fff4ff
 8008300:	40011000 	.word	0x40011000
 8008304:	58024400 	.word	0x58024400
 8008308:	40004400 	.word	0x40004400
 800830c:	40004800 	.word	0x40004800
 8008310:	40004c00 	.word	0x40004c00
 8008314:	40005000 	.word	0x40005000
 8008318:	2320      	movs	r3, #32
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e128      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008320:	2340      	movs	r3, #64	; 0x40
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008326:	e124      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008328:	2380      	movs	r3, #128	; 0x80
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832e:	e120      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4acb      	ldr	r2, [pc, #812]	; (8008664 <UART_SetConfig+0x698>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d176      	bne.n	8008428 <UART_SetConfig+0x45c>
 800833a:	4bcb      	ldr	r3, [pc, #812]	; (8008668 <UART_SetConfig+0x69c>)
 800833c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008342:	2b28      	cmp	r3, #40	; 0x28
 8008344:	d86c      	bhi.n	8008420 <UART_SetConfig+0x454>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <UART_SetConfig+0x380>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	080083f1 	.word	0x080083f1
 8008350:	08008421 	.word	0x08008421
 8008354:	08008421 	.word	0x08008421
 8008358:	08008421 	.word	0x08008421
 800835c:	08008421 	.word	0x08008421
 8008360:	08008421 	.word	0x08008421
 8008364:	08008421 	.word	0x08008421
 8008368:	08008421 	.word	0x08008421
 800836c:	080083f9 	.word	0x080083f9
 8008370:	08008421 	.word	0x08008421
 8008374:	08008421 	.word	0x08008421
 8008378:	08008421 	.word	0x08008421
 800837c:	08008421 	.word	0x08008421
 8008380:	08008421 	.word	0x08008421
 8008384:	08008421 	.word	0x08008421
 8008388:	08008421 	.word	0x08008421
 800838c:	08008401 	.word	0x08008401
 8008390:	08008421 	.word	0x08008421
 8008394:	08008421 	.word	0x08008421
 8008398:	08008421 	.word	0x08008421
 800839c:	08008421 	.word	0x08008421
 80083a0:	08008421 	.word	0x08008421
 80083a4:	08008421 	.word	0x08008421
 80083a8:	08008421 	.word	0x08008421
 80083ac:	08008409 	.word	0x08008409
 80083b0:	08008421 	.word	0x08008421
 80083b4:	08008421 	.word	0x08008421
 80083b8:	08008421 	.word	0x08008421
 80083bc:	08008421 	.word	0x08008421
 80083c0:	08008421 	.word	0x08008421
 80083c4:	08008421 	.word	0x08008421
 80083c8:	08008421 	.word	0x08008421
 80083cc:	08008411 	.word	0x08008411
 80083d0:	08008421 	.word	0x08008421
 80083d4:	08008421 	.word	0x08008421
 80083d8:	08008421 	.word	0x08008421
 80083dc:	08008421 	.word	0x08008421
 80083e0:	08008421 	.word	0x08008421
 80083e4:	08008421 	.word	0x08008421
 80083e8:	08008421 	.word	0x08008421
 80083ec:	08008419 	.word	0x08008419
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f6:	e0bc      	b.n	8008572 <UART_SetConfig+0x5a6>
 80083f8:	2304      	movs	r3, #4
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fe:	e0b8      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008400:	2308      	movs	r3, #8
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008406:	e0b4      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008408:	2310      	movs	r3, #16
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840e:	e0b0      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008410:	2320      	movs	r3, #32
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e0ac      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008418:	2340      	movs	r3, #64	; 0x40
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e0a8      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008420:	2380      	movs	r3, #128	; 0x80
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e0a4      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a8f      	ldr	r2, [pc, #572]	; (800866c <UART_SetConfig+0x6a0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d130      	bne.n	8008494 <UART_SetConfig+0x4c8>
 8008432:	4b8d      	ldr	r3, [pc, #564]	; (8008668 <UART_SetConfig+0x69c>)
 8008434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	2b05      	cmp	r3, #5
 800843c:	d826      	bhi.n	800848c <UART_SetConfig+0x4c0>
 800843e:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <UART_SetConfig+0x478>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	0800845d 	.word	0x0800845d
 8008448:	08008465 	.word	0x08008465
 800844c:	0800846d 	.word	0x0800846d
 8008450:	08008475 	.word	0x08008475
 8008454:	0800847d 	.word	0x0800847d
 8008458:	08008485 	.word	0x08008485
 800845c:	2300      	movs	r3, #0
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008462:	e086      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008464:	2304      	movs	r3, #4
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846a:	e082      	b.n	8008572 <UART_SetConfig+0x5a6>
 800846c:	2308      	movs	r3, #8
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008472:	e07e      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008474:	2310      	movs	r3, #16
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e07a      	b.n	8008572 <UART_SetConfig+0x5a6>
 800847c:	2320      	movs	r3, #32
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e076      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008484:	2340      	movs	r3, #64	; 0x40
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e072      	b.n	8008572 <UART_SetConfig+0x5a6>
 800848c:	2380      	movs	r3, #128	; 0x80
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e06e      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a75      	ldr	r2, [pc, #468]	; (8008670 <UART_SetConfig+0x6a4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d130      	bne.n	8008500 <UART_SetConfig+0x534>
 800849e:	4b72      	ldr	r3, [pc, #456]	; (8008668 <UART_SetConfig+0x69c>)
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d826      	bhi.n	80084f8 <UART_SetConfig+0x52c>
 80084aa:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <UART_SetConfig+0x4e4>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084d1 	.word	0x080084d1
 80084b8:	080084d9 	.word	0x080084d9
 80084bc:	080084e1 	.word	0x080084e1
 80084c0:	080084e9 	.word	0x080084e9
 80084c4:	080084f1 	.word	0x080084f1
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ce:	e050      	b.n	8008572 <UART_SetConfig+0x5a6>
 80084d0:	2304      	movs	r3, #4
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d6:	e04c      	b.n	8008572 <UART_SetConfig+0x5a6>
 80084d8:	2308      	movs	r3, #8
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084de:	e048      	b.n	8008572 <UART_SetConfig+0x5a6>
 80084e0:	2310      	movs	r3, #16
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e6:	e044      	b.n	8008572 <UART_SetConfig+0x5a6>
 80084e8:	2320      	movs	r3, #32
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ee:	e040      	b.n	8008572 <UART_SetConfig+0x5a6>
 80084f0:	2340      	movs	r3, #64	; 0x40
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e03c      	b.n	8008572 <UART_SetConfig+0x5a6>
 80084f8:	2380      	movs	r3, #128	; 0x80
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fe:	e038      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a5b      	ldr	r2, [pc, #364]	; (8008674 <UART_SetConfig+0x6a8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d130      	bne.n	800856c <UART_SetConfig+0x5a0>
 800850a:	4b57      	ldr	r3, [pc, #348]	; (8008668 <UART_SetConfig+0x69c>)
 800850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	2b05      	cmp	r3, #5
 8008514:	d826      	bhi.n	8008564 <UART_SetConfig+0x598>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <UART_SetConfig+0x550>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	08008535 	.word	0x08008535
 8008520:	0800853d 	.word	0x0800853d
 8008524:	08008545 	.word	0x08008545
 8008528:	0800854d 	.word	0x0800854d
 800852c:	08008555 	.word	0x08008555
 8008530:	0800855d 	.word	0x0800855d
 8008534:	2302      	movs	r3, #2
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853a:	e01a      	b.n	8008572 <UART_SetConfig+0x5a6>
 800853c:	2304      	movs	r3, #4
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008542:	e016      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008544:	2308      	movs	r3, #8
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854a:	e012      	b.n	8008572 <UART_SetConfig+0x5a6>
 800854c:	2310      	movs	r3, #16
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008552:	e00e      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008554:	2320      	movs	r3, #32
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855a:	e00a      	b.n	8008572 <UART_SetConfig+0x5a6>
 800855c:	2340      	movs	r3, #64	; 0x40
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008562:	e006      	b.n	8008572 <UART_SetConfig+0x5a6>
 8008564:	2380      	movs	r3, #128	; 0x80
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856a:	e002      	b.n	8008572 <UART_SetConfig+0x5a6>
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a3f      	ldr	r2, [pc, #252]	; (8008674 <UART_SetConfig+0x6a8>)
 8008578:	4293      	cmp	r3, r2
 800857a:	f040 80f8 	bne.w	800876e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800857e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008582:	2b20      	cmp	r3, #32
 8008584:	dc46      	bgt.n	8008614 <UART_SetConfig+0x648>
 8008586:	2b02      	cmp	r3, #2
 8008588:	f2c0 8082 	blt.w	8008690 <UART_SetConfig+0x6c4>
 800858c:	3b02      	subs	r3, #2
 800858e:	2b1e      	cmp	r3, #30
 8008590:	d87e      	bhi.n	8008690 <UART_SetConfig+0x6c4>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <UART_SetConfig+0x5cc>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	0800861b 	.word	0x0800861b
 800859c:	08008691 	.word	0x08008691
 80085a0:	08008623 	.word	0x08008623
 80085a4:	08008691 	.word	0x08008691
 80085a8:	08008691 	.word	0x08008691
 80085ac:	08008691 	.word	0x08008691
 80085b0:	08008633 	.word	0x08008633
 80085b4:	08008691 	.word	0x08008691
 80085b8:	08008691 	.word	0x08008691
 80085bc:	08008691 	.word	0x08008691
 80085c0:	08008691 	.word	0x08008691
 80085c4:	08008691 	.word	0x08008691
 80085c8:	08008691 	.word	0x08008691
 80085cc:	08008691 	.word	0x08008691
 80085d0:	08008643 	.word	0x08008643
 80085d4:	08008691 	.word	0x08008691
 80085d8:	08008691 	.word	0x08008691
 80085dc:	08008691 	.word	0x08008691
 80085e0:	08008691 	.word	0x08008691
 80085e4:	08008691 	.word	0x08008691
 80085e8:	08008691 	.word	0x08008691
 80085ec:	08008691 	.word	0x08008691
 80085f0:	08008691 	.word	0x08008691
 80085f4:	08008691 	.word	0x08008691
 80085f8:	08008691 	.word	0x08008691
 80085fc:	08008691 	.word	0x08008691
 8008600:	08008691 	.word	0x08008691
 8008604:	08008691 	.word	0x08008691
 8008608:	08008691 	.word	0x08008691
 800860c:	08008691 	.word	0x08008691
 8008610:	08008683 	.word	0x08008683
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d037      	beq.n	8008688 <UART_SetConfig+0x6bc>
 8008618:	e03a      	b.n	8008690 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800861a:	f7fe fa1b 	bl	8006a54 <HAL_RCCEx_GetD3PCLK1Freq>
 800861e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008620:	e03c      	b.n	800869c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe fa2a 	bl	8006a80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008630:	e034      	b.n	800869c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008632:	f107 0318 	add.w	r3, r7, #24
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe fb76 	bl	8006d28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008640:	e02c      	b.n	800869c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008642:	4b09      	ldr	r3, [pc, #36]	; (8008668 <UART_SetConfig+0x69c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b00      	cmp	r3, #0
 800864c:	d016      	beq.n	800867c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <UART_SetConfig+0x69c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	08db      	lsrs	r3, r3, #3
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	4a07      	ldr	r2, [pc, #28]	; (8008678 <UART_SetConfig+0x6ac>)
 800865a:	fa22 f303 	lsr.w	r3, r2, r3
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008660:	e01c      	b.n	800869c <UART_SetConfig+0x6d0>
 8008662:	bf00      	nop
 8008664:	40011400 	.word	0x40011400
 8008668:	58024400 	.word	0x58024400
 800866c:	40007800 	.word	0x40007800
 8008670:	40007c00 	.word	0x40007c00
 8008674:	58000c00 	.word	0x58000c00
 8008678:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800867c:	4b9d      	ldr	r3, [pc, #628]	; (80088f4 <UART_SetConfig+0x928>)
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008680:	e00c      	b.n	800869c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008682:	4b9d      	ldr	r3, [pc, #628]	; (80088f8 <UART_SetConfig+0x92c>)
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008686:	e009      	b.n	800869c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800868e:	e005      	b.n	800869c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800869a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800869c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 81de 	beq.w	8008a60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	4a94      	ldr	r2, [pc, #592]	; (80088fc <UART_SetConfig+0x930>)
 80086aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ae:	461a      	mov	r2, r3
 80086b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4613      	mov	r3, r2
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	4413      	add	r3, r2
 80086c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d305      	bcc.n	80086d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d903      	bls.n	80086dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80086da:	e1c1      	b.n	8008a60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086de:	2200      	movs	r2, #0
 80086e0:	60bb      	str	r3, [r7, #8]
 80086e2:	60fa      	str	r2, [r7, #12]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	4a84      	ldr	r2, [pc, #528]	; (80088fc <UART_SetConfig+0x930>)
 80086ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	2200      	movs	r2, #0
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086fe:	f7f7 fea7 	bl	8000450 <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4610      	mov	r0, r2
 8008708:	4619      	mov	r1, r3
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	020b      	lsls	r3, r1, #8
 8008714:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008718:	0202      	lsls	r2, r0, #8
 800871a:	6979      	ldr	r1, [r7, #20]
 800871c:	6849      	ldr	r1, [r1, #4]
 800871e:	0849      	lsrs	r1, r1, #1
 8008720:	2000      	movs	r0, #0
 8008722:	460c      	mov	r4, r1
 8008724:	4605      	mov	r5, r0
 8008726:	eb12 0804 	adds.w	r8, r2, r4
 800872a:	eb43 0905 	adc.w	r9, r3, r5
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	469a      	mov	sl, r3
 8008736:	4693      	mov	fp, r2
 8008738:	4652      	mov	r2, sl
 800873a:	465b      	mov	r3, fp
 800873c:	4640      	mov	r0, r8
 800873e:	4649      	mov	r1, r9
 8008740:	f7f7 fe86 	bl	8000450 <__aeabi_uldivmod>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4613      	mov	r3, r2
 800874a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008752:	d308      	bcc.n	8008766 <UART_SetConfig+0x79a>
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875a:	d204      	bcs.n	8008766 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008762:	60da      	str	r2, [r3, #12]
 8008764:	e17c      	b.n	8008a60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800876c:	e178      	b.n	8008a60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008776:	f040 80c5 	bne.w	8008904 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800877a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800877e:	2b20      	cmp	r3, #32
 8008780:	dc48      	bgt.n	8008814 <UART_SetConfig+0x848>
 8008782:	2b00      	cmp	r3, #0
 8008784:	db7b      	blt.n	800887e <UART_SetConfig+0x8b2>
 8008786:	2b20      	cmp	r3, #32
 8008788:	d879      	bhi.n	800887e <UART_SetConfig+0x8b2>
 800878a:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <UART_SetConfig+0x7c4>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	0800881b 	.word	0x0800881b
 8008794:	08008823 	.word	0x08008823
 8008798:	0800887f 	.word	0x0800887f
 800879c:	0800887f 	.word	0x0800887f
 80087a0:	0800882b 	.word	0x0800882b
 80087a4:	0800887f 	.word	0x0800887f
 80087a8:	0800887f 	.word	0x0800887f
 80087ac:	0800887f 	.word	0x0800887f
 80087b0:	0800883b 	.word	0x0800883b
 80087b4:	0800887f 	.word	0x0800887f
 80087b8:	0800887f 	.word	0x0800887f
 80087bc:	0800887f 	.word	0x0800887f
 80087c0:	0800887f 	.word	0x0800887f
 80087c4:	0800887f 	.word	0x0800887f
 80087c8:	0800887f 	.word	0x0800887f
 80087cc:	0800887f 	.word	0x0800887f
 80087d0:	0800884b 	.word	0x0800884b
 80087d4:	0800887f 	.word	0x0800887f
 80087d8:	0800887f 	.word	0x0800887f
 80087dc:	0800887f 	.word	0x0800887f
 80087e0:	0800887f 	.word	0x0800887f
 80087e4:	0800887f 	.word	0x0800887f
 80087e8:	0800887f 	.word	0x0800887f
 80087ec:	0800887f 	.word	0x0800887f
 80087f0:	0800887f 	.word	0x0800887f
 80087f4:	0800887f 	.word	0x0800887f
 80087f8:	0800887f 	.word	0x0800887f
 80087fc:	0800887f 	.word	0x0800887f
 8008800:	0800887f 	.word	0x0800887f
 8008804:	0800887f 	.word	0x0800887f
 8008808:	0800887f 	.word	0x0800887f
 800880c:	0800887f 	.word	0x0800887f
 8008810:	08008871 	.word	0x08008871
 8008814:	2b40      	cmp	r3, #64	; 0x40
 8008816:	d02e      	beq.n	8008876 <UART_SetConfig+0x8aa>
 8008818:	e031      	b.n	800887e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800881a:	f7fd f9a9 	bl	8005b70 <HAL_RCC_GetPCLK1Freq>
 800881e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008820:	e033      	b.n	800888a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008822:	f7fd f9bb 	bl	8005b9c <HAL_RCC_GetPCLK2Freq>
 8008826:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008828:	e02f      	b.n	800888a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800882a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe f926 	bl	8006a80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008838:	e027      	b.n	800888a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883a:	f107 0318 	add.w	r3, r7, #24
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fa72 	bl	8006d28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008848:	e01f      	b.n	800888a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800884a:	4b2d      	ldr	r3, [pc, #180]	; (8008900 <UART_SetConfig+0x934>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008856:	4b2a      	ldr	r3, [pc, #168]	; (8008900 <UART_SetConfig+0x934>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	08db      	lsrs	r3, r3, #3
 800885c:	f003 0303 	and.w	r3, r3, #3
 8008860:	4a24      	ldr	r2, [pc, #144]	; (80088f4 <UART_SetConfig+0x928>)
 8008862:	fa22 f303 	lsr.w	r3, r2, r3
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008868:	e00f      	b.n	800888a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800886a:	4b22      	ldr	r3, [pc, #136]	; (80088f4 <UART_SetConfig+0x928>)
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800886e:	e00c      	b.n	800888a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008870:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <UART_SetConfig+0x92c>)
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008874:	e009      	b.n	800888a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800887c:	e005      	b.n	800888a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800888a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 80e7 	beq.w	8008a60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	4a19      	ldr	r2, [pc, #100]	; (80088fc <UART_SetConfig+0x930>)
 8008898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800889c:	461a      	mov	r2, r3
 800889e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a4:	005a      	lsls	r2, r3, #1
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	441a      	add	r2, r3
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	2b0f      	cmp	r3, #15
 80088bc:	d916      	bls.n	80088ec <UART_SetConfig+0x920>
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c4:	d212      	bcs.n	80088ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f023 030f 	bic.w	r3, r3, #15
 80088ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	b29a      	uxth	r2, r3
 80088dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088de:	4313      	orrs	r3, r2
 80088e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e0b9      	b.n	8008a60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088f2:	e0b5      	b.n	8008a60 <UART_SetConfig+0xa94>
 80088f4:	03d09000 	.word	0x03d09000
 80088f8:	003d0900 	.word	0x003d0900
 80088fc:	0800cdf4 	.word	0x0800cdf4
 8008900:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008904:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008908:	2b20      	cmp	r3, #32
 800890a:	dc49      	bgt.n	80089a0 <UART_SetConfig+0x9d4>
 800890c:	2b00      	cmp	r3, #0
 800890e:	db7c      	blt.n	8008a0a <UART_SetConfig+0xa3e>
 8008910:	2b20      	cmp	r3, #32
 8008912:	d87a      	bhi.n	8008a0a <UART_SetConfig+0xa3e>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <UART_SetConfig+0x950>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	080089a7 	.word	0x080089a7
 8008920:	080089af 	.word	0x080089af
 8008924:	08008a0b 	.word	0x08008a0b
 8008928:	08008a0b 	.word	0x08008a0b
 800892c:	080089b7 	.word	0x080089b7
 8008930:	08008a0b 	.word	0x08008a0b
 8008934:	08008a0b 	.word	0x08008a0b
 8008938:	08008a0b 	.word	0x08008a0b
 800893c:	080089c7 	.word	0x080089c7
 8008940:	08008a0b 	.word	0x08008a0b
 8008944:	08008a0b 	.word	0x08008a0b
 8008948:	08008a0b 	.word	0x08008a0b
 800894c:	08008a0b 	.word	0x08008a0b
 8008950:	08008a0b 	.word	0x08008a0b
 8008954:	08008a0b 	.word	0x08008a0b
 8008958:	08008a0b 	.word	0x08008a0b
 800895c:	080089d7 	.word	0x080089d7
 8008960:	08008a0b 	.word	0x08008a0b
 8008964:	08008a0b 	.word	0x08008a0b
 8008968:	08008a0b 	.word	0x08008a0b
 800896c:	08008a0b 	.word	0x08008a0b
 8008970:	08008a0b 	.word	0x08008a0b
 8008974:	08008a0b 	.word	0x08008a0b
 8008978:	08008a0b 	.word	0x08008a0b
 800897c:	08008a0b 	.word	0x08008a0b
 8008980:	08008a0b 	.word	0x08008a0b
 8008984:	08008a0b 	.word	0x08008a0b
 8008988:	08008a0b 	.word	0x08008a0b
 800898c:	08008a0b 	.word	0x08008a0b
 8008990:	08008a0b 	.word	0x08008a0b
 8008994:	08008a0b 	.word	0x08008a0b
 8008998:	08008a0b 	.word	0x08008a0b
 800899c:	080089fd 	.word	0x080089fd
 80089a0:	2b40      	cmp	r3, #64	; 0x40
 80089a2:	d02e      	beq.n	8008a02 <UART_SetConfig+0xa36>
 80089a4:	e031      	b.n	8008a0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089a6:	f7fd f8e3 	bl	8005b70 <HAL_RCC_GetPCLK1Freq>
 80089aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089ac:	e033      	b.n	8008a16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ae:	f7fd f8f5 	bl	8005b9c <HAL_RCC_GetPCLK2Freq>
 80089b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089b4:	e02f      	b.n	8008a16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fe f860 	bl	8006a80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c4:	e027      	b.n	8008a16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c6:	f107 0318 	add.w	r3, r7, #24
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe f9ac 	bl	8006d28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089d4:	e01f      	b.n	8008a16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d6:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <UART_SetConfig+0xac0>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0320 	and.w	r3, r3, #32
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d009      	beq.n	80089f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089e2:	4b2a      	ldr	r3, [pc, #168]	; (8008a8c <UART_SetConfig+0xac0>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	08db      	lsrs	r3, r3, #3
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	4a28      	ldr	r2, [pc, #160]	; (8008a90 <UART_SetConfig+0xac4>)
 80089ee:	fa22 f303 	lsr.w	r3, r2, r3
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089f4:	e00f      	b.n	8008a16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80089f6:	4b26      	ldr	r3, [pc, #152]	; (8008a90 <UART_SetConfig+0xac4>)
 80089f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089fa:	e00c      	b.n	8008a16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089fc:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <UART_SetConfig+0xac8>)
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a00:	e009      	b.n	8008a16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a08:	e005      	b.n	8008a16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a14:	bf00      	nop
    }

    if (pclk != 0U)
 8008a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d021      	beq.n	8008a60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	4a1d      	ldr	r2, [pc, #116]	; (8008a98 <UART_SetConfig+0xacc>)
 8008a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a26:	461a      	mov	r2, r3
 8008a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	441a      	add	r2, r3
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	2b0f      	cmp	r3, #15
 8008a44:	d909      	bls.n	8008a5a <UART_SetConfig+0xa8e>
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a4c:	d205      	bcs.n	8008a5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60da      	str	r2, [r3, #12]
 8008a58:	e002      	b.n	8008a60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2200      	movs	r2, #0
 8008a74:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008a7c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3748      	adds	r7, #72	; 0x48
 8008a84:	46bd      	mov	sp, r7
 8008a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	03d09000 	.word	0x03d09000
 8008a94:	003d0900 	.word	0x003d0900
 8008a98:	0800cdf4 	.word	0x0800cdf4

08008a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00a      	beq.n	8008b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b9a:	d10a      	bne.n	8008bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	605a      	str	r2, [r3, #4]
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bf0:	f7fa ff7c 	bl	8003aec <HAL_GetTick>
 8008bf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0308 	and.w	r3, r3, #8
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d10e      	bne.n	8008c22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f82f 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e025      	b.n	8008c6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d10e      	bne.n	8008c4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f819 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e00f      	b.n	8008c6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b09c      	sub	sp, #112	; 0x70
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	603b      	str	r3, [r7, #0]
 8008c82:	4613      	mov	r3, r2
 8008c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c86:	e0a9      	b.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8e:	f000 80a5 	beq.w	8008ddc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c92:	f7fa ff2b 	bl	8003aec <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d302      	bcc.n	8008ca8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d140      	bne.n	8008d2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e6      	bne.n	8008ca8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8008cfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e5      	bne.n	8008cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e069      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d051      	beq.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d46:	d149      	bne.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
 8008d72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e6      	bne.n	8008d52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	613b      	str	r3, [r7, #16]
   return(result);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f023 0301 	bic.w	r3, r3, #1
 8008d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008da4:	623a      	str	r2, [r7, #32]
 8008da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	69f9      	ldr	r1, [r7, #28]
 8008daa:	6a3a      	ldr	r2, [r7, #32]
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e5      	bne.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e010      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69da      	ldr	r2, [r3, #28]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	4013      	ands	r3, r2
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	f43f af46 	beq.w	8008c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3770      	adds	r7, #112	; 0x70
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_UARTEx_DisableFifoMode+0x16>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e027      	b.n	8008e6c <HAL_UARTEx_DisableFifoMode+0x66>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2224      	movs	r2, #36	; 0x24
 8008e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0201 	bic.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e02d      	b.n	8008eec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2224      	movs	r2, #36	; 0x24
 8008e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0201 	bic.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f84f 	bl	8008f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d101      	bne.n	8008f0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e02d      	b.n	8008f68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2224      	movs	r2, #36	; 0x24
 8008f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0201 	bic.w	r2, r2, #1
 8008f32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f811 	bl	8008f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d108      	bne.n	8008f92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f90:	e031      	b.n	8008ff6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f92:	2310      	movs	r3, #16
 8008f94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f96:	2310      	movs	r3, #16
 8008f98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	0e5b      	lsrs	r3, r3, #25
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	0f5b      	lsrs	r3, r3, #29
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	7b3a      	ldrb	r2, [r7, #12]
 8008fbe:	4911      	ldr	r1, [pc, #68]	; (8009004 <UARTEx_SetNbDataToProcess+0x94>)
 8008fc0:	5c8a      	ldrb	r2, [r1, r2]
 8008fc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fc6:	7b3a      	ldrb	r2, [r7, #12]
 8008fc8:	490f      	ldr	r1, [pc, #60]	; (8009008 <UARTEx_SetNbDataToProcess+0x98>)
 8008fca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	7b7a      	ldrb	r2, [r7, #13]
 8008fdc:	4909      	ldr	r1, [pc, #36]	; (8009004 <UARTEx_SetNbDataToProcess+0x94>)
 8008fde:	5c8a      	ldrb	r2, [r1, r2]
 8008fe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fe4:	7b7a      	ldrb	r2, [r7, #13]
 8008fe6:	4908      	ldr	r1, [pc, #32]	; (8009008 <UARTEx_SetNbDataToProcess+0x98>)
 8008fe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fea:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ff6:	bf00      	nop
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	0800ce0c 	.word	0x0800ce0c
 8009008:	0800ce14 	.word	0x0800ce14

0800900c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800900c:	b084      	sub	sp, #16
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	f107 001c 	add.w	r0, r7, #28
 800901a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	2b01      	cmp	r3, #1
 8009022:	d120      	bne.n	8009066 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68da      	ldr	r2, [r3, #12]
 8009034:	4b2a      	ldr	r3, [pc, #168]	; (80090e0 <USB_CoreInit+0xd4>)
 8009036:	4013      	ands	r3, r2
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904a:	2b01      	cmp	r3, #1
 800904c:	d105      	bne.n	800905a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 faac 	bl	80095b8 <USB_CoreReset>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]
 8009064:	e01a      	b.n	800909c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 faa0 	bl	80095b8 <USB_CoreReset>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800907c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d106      	bne.n	8009090 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009086:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	639a      	str	r2, [r3, #56]	; 0x38
 800908e:	e005      	b.n	800909c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d116      	bne.n	80090d0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090b0:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <USB_CoreInit+0xd8>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f043 0206 	orr.w	r2, r3, #6
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f043 0220 	orr.w	r2, r3, #32
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090dc:	b004      	add	sp, #16
 80090de:	4770      	bx	lr
 80090e0:	ffbdffbf 	.word	0xffbdffbf
 80090e4:	03ee0000 	.word	0x03ee0000

080090e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f023 0201 	bic.w	r2, r3, #1
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d115      	bne.n	8009158 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009138:	2001      	movs	r0, #1
 800913a:	f7fa fce3 	bl	8003b04 <HAL_Delay>
      ms++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa29 	bl	800959c <USB_GetMode>
 800914a:	4603      	mov	r3, r0
 800914c:	2b01      	cmp	r3, #1
 800914e:	d01e      	beq.n	800918e <USB_SetCurrentMode+0x84>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b31      	cmp	r3, #49	; 0x31
 8009154:	d9f0      	bls.n	8009138 <USB_SetCurrentMode+0x2e>
 8009156:	e01a      	b.n	800918e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d115      	bne.n	800918a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800916a:	2001      	movs	r0, #1
 800916c:	f7fa fcca 	bl	8003b04 <HAL_Delay>
      ms++;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3301      	adds	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa10 	bl	800959c <USB_GetMode>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <USB_SetCurrentMode+0x84>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b31      	cmp	r3, #49	; 0x31
 8009186:	d9f0      	bls.n	800916a <USB_SetCurrentMode+0x60>
 8009188:	e001      	b.n	800918e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e005      	b.n	800919a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b32      	cmp	r3, #50	; 0x32
 8009192:	d101      	bne.n	8009198 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091a4:	b084      	sub	sp, #16
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b086      	sub	sp, #24
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80091b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091be:	2300      	movs	r3, #0
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	e009      	b.n	80091d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	3340      	adds	r3, #64	; 0x40
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	3301      	adds	r3, #1
 80091d6:	613b      	str	r3, [r7, #16]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b0e      	cmp	r3, #14
 80091dc:	d9f2      	bls.n	80091c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d11c      	bne.n	800921e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091f2:	f043 0302 	orr.w	r3, r3, #2
 80091f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	e005      	b.n	800922a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009230:	461a      	mov	r2, r3
 8009232:	2300      	movs	r3, #0
 8009234:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923c:	4619      	mov	r1, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009244:	461a      	mov	r2, r3
 8009246:	680b      	ldr	r3, [r1, #0]
 8009248:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800924a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924c:	2b01      	cmp	r3, #1
 800924e:	d10c      	bne.n	800926a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d104      	bne.n	8009260 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009256:	2100      	movs	r1, #0
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f965 	bl	8009528 <USB_SetDevSpeed>
 800925e:	e008      	b.n	8009272 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009260:	2101      	movs	r1, #1
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f960 	bl	8009528 <USB_SetDevSpeed>
 8009268:	e003      	b.n	8009272 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800926a:	2103      	movs	r1, #3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f95b 	bl	8009528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009272:	2110      	movs	r1, #16
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f8f3 	bl	8009460 <USB_FlushTxFifo>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f91f 	bl	80094c8 <USB_FlushRxFifo>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929a:	461a      	mov	r2, r3
 800929c:	2300      	movs	r3, #0
 800929e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a6:	461a      	mov	r2, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b2:	461a      	mov	r2, r3
 80092b4:	2300      	movs	r3, #0
 80092b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b8:	2300      	movs	r3, #0
 80092ba:	613b      	str	r3, [r7, #16]
 80092bc:	e043      	b.n	8009346 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d4:	d118      	bne.n	8009308 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e8:	461a      	mov	r2, r3
 80092ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	e013      	b.n	800931a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fe:	461a      	mov	r2, r3
 8009300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	e008      	b.n	800931a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009314:	461a      	mov	r2, r3
 8009316:	2300      	movs	r3, #0
 8009318:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009326:	461a      	mov	r2, r3
 8009328:	2300      	movs	r3, #0
 800932a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009338:	461a      	mov	r2, r3
 800933a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800933e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3301      	adds	r3, #1
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	429a      	cmp	r2, r3
 800934c:	d3b7      	bcc.n	80092be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800934e:	2300      	movs	r3, #0
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	e043      	b.n	80093dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800936a:	d118      	bne.n	800939e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937e:	461a      	mov	r2, r3
 8009380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	e013      	b.n	80093b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009394:	461a      	mov	r2, r3
 8009396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	e008      	b.n	80093b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093aa:	461a      	mov	r2, r3
 80093ac:	2300      	movs	r3, #0
 80093ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093bc:	461a      	mov	r2, r3
 80093be:	2300      	movs	r3, #0
 80093c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ce:	461a      	mov	r2, r3
 80093d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3301      	adds	r3, #1
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d3b7      	bcc.n	8009354 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009404:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	2b00      	cmp	r3, #0
 800940a:	d105      	bne.n	8009418 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	f043 0210 	orr.w	r2, r3, #16
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699a      	ldr	r2, [r3, #24]
 800941c:	4b0e      	ldr	r3, [pc, #56]	; (8009458 <USB_DevInit+0x2b4>)
 800941e:	4313      	orrs	r3, r2
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	f043 0208 	orr.w	r2, r3, #8
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d105      	bne.n	8009448 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699a      	ldr	r2, [r3, #24]
 8009440:	4b06      	ldr	r3, [pc, #24]	; (800945c <USB_DevInit+0x2b8>)
 8009442:	4313      	orrs	r3, r2
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009448:	7dfb      	ldrb	r3, [r7, #23]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009454:	b004      	add	sp, #16
 8009456:	4770      	bx	lr
 8009458:	803c3800 	.word	0x803c3800
 800945c:	40000004 	.word	0x40000004

08009460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800946a:	2300      	movs	r3, #0
 800946c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3301      	adds	r3, #1
 8009472:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a13      	ldr	r2, [pc, #76]	; (80094c4 <USB_FlushTxFifo+0x64>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d901      	bls.n	8009480 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e01b      	b.n	80094b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	daf2      	bge.n	800946e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	019b      	lsls	r3, r3, #6
 8009490:	f043 0220 	orr.w	r2, r3, #32
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3301      	adds	r3, #1
 800949c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4a08      	ldr	r2, [pc, #32]	; (80094c4 <USB_FlushTxFifo+0x64>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d901      	bls.n	80094aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e006      	b.n	80094b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f003 0320 	and.w	r3, r3, #32
 80094b2:	2b20      	cmp	r3, #32
 80094b4:	d0f0      	beq.n	8009498 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	00030d40 	.word	0x00030d40

080094c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3301      	adds	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4a11      	ldr	r2, [pc, #68]	; (8009524 <USB_FlushRxFifo+0x5c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d901      	bls.n	80094e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e018      	b.n	8009518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	daf2      	bge.n	80094d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2210      	movs	r2, #16
 80094f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4a08      	ldr	r2, [pc, #32]	; (8009524 <USB_FlushRxFifo+0x5c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d901      	bls.n	800950a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e006      	b.n	8009518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f003 0310 	and.w	r3, r3, #16
 8009512:	2b10      	cmp	r3, #16
 8009514:	d0f0      	beq.n	80094f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	00030d40 	.word	0x00030d40

08009528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	68f9      	ldr	r1, [r7, #12]
 8009544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009548:	4313      	orrs	r3, r2
 800954a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800955a:	b480      	push	{r7}
 800955c:	b085      	sub	sp, #20
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009574:	f023 0303 	bic.w	r3, r3, #3
 8009578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009588:	f043 0302 	orr.w	r3, r3, #2
 800958c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	f003 0301 	and.w	r3, r3, #1
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	4a13      	ldr	r2, [pc, #76]	; (800961c <USB_CoreReset+0x64>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d901      	bls.n	80095d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e01b      	b.n	800960e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	daf2      	bge.n	80095c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f043 0201 	orr.w	r2, r3, #1
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3301      	adds	r3, #1
 80095f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	4a09      	ldr	r2, [pc, #36]	; (800961c <USB_CoreReset+0x64>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d901      	bls.n	8009600 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e006      	b.n	800960e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b01      	cmp	r3, #1
 800960a:	d0f0      	beq.n	80095ee <USB_CoreReset+0x36>

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	00030d40 	.word	0x00030d40

08009620 <__errno>:
 8009620:	4b01      	ldr	r3, [pc, #4]	; (8009628 <__errno+0x8>)
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	24000014 	.word	0x24000014

0800962c <__libc_init_array>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4d0d      	ldr	r5, [pc, #52]	; (8009664 <__libc_init_array+0x38>)
 8009630:	4c0d      	ldr	r4, [pc, #52]	; (8009668 <__libc_init_array+0x3c>)
 8009632:	1b64      	subs	r4, r4, r5
 8009634:	10a4      	asrs	r4, r4, #2
 8009636:	2600      	movs	r6, #0
 8009638:	42a6      	cmp	r6, r4
 800963a:	d109      	bne.n	8009650 <__libc_init_array+0x24>
 800963c:	4d0b      	ldr	r5, [pc, #44]	; (800966c <__libc_init_array+0x40>)
 800963e:	4c0c      	ldr	r4, [pc, #48]	; (8009670 <__libc_init_array+0x44>)
 8009640:	f000 fcb0 	bl	8009fa4 <_init>
 8009644:	1b64      	subs	r4, r4, r5
 8009646:	10a4      	asrs	r4, r4, #2
 8009648:	2600      	movs	r6, #0
 800964a:	42a6      	cmp	r6, r4
 800964c:	d105      	bne.n	800965a <__libc_init_array+0x2e>
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	f855 3b04 	ldr.w	r3, [r5], #4
 8009654:	4798      	blx	r3
 8009656:	3601      	adds	r6, #1
 8009658:	e7ee      	b.n	8009638 <__libc_init_array+0xc>
 800965a:	f855 3b04 	ldr.w	r3, [r5], #4
 800965e:	4798      	blx	r3
 8009660:	3601      	adds	r6, #1
 8009662:	e7f2      	b.n	800964a <__libc_init_array+0x1e>
 8009664:	0800ce58 	.word	0x0800ce58
 8009668:	0800ce58 	.word	0x0800ce58
 800966c:	0800ce58 	.word	0x0800ce58
 8009670:	0800ce5c 	.word	0x0800ce5c

08009674 <memset>:
 8009674:	4402      	add	r2, r0
 8009676:	4603      	mov	r3, r0
 8009678:	4293      	cmp	r3, r2
 800967a:	d100      	bne.n	800967e <memset+0xa>
 800967c:	4770      	bx	lr
 800967e:	f803 1b01 	strb.w	r1, [r3], #1
 8009682:	e7f9      	b.n	8009678 <memset+0x4>

08009684 <siprintf>:
 8009684:	b40e      	push	{r1, r2, r3}
 8009686:	b500      	push	{lr}
 8009688:	b09c      	sub	sp, #112	; 0x70
 800968a:	ab1d      	add	r3, sp, #116	; 0x74
 800968c:	9002      	str	r0, [sp, #8]
 800968e:	9006      	str	r0, [sp, #24]
 8009690:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009694:	4809      	ldr	r0, [pc, #36]	; (80096bc <siprintf+0x38>)
 8009696:	9107      	str	r1, [sp, #28]
 8009698:	9104      	str	r1, [sp, #16]
 800969a:	4909      	ldr	r1, [pc, #36]	; (80096c0 <siprintf+0x3c>)
 800969c:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a0:	9105      	str	r1, [sp, #20]
 80096a2:	6800      	ldr	r0, [r0, #0]
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	a902      	add	r1, sp, #8
 80096a8:	f000 f868 	bl	800977c <_svfiprintf_r>
 80096ac:	9b02      	ldr	r3, [sp, #8]
 80096ae:	2200      	movs	r2, #0
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	b01c      	add	sp, #112	; 0x70
 80096b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096b8:	b003      	add	sp, #12
 80096ba:	4770      	bx	lr
 80096bc:	24000014 	.word	0x24000014
 80096c0:	ffff0208 	.word	0xffff0208

080096c4 <__ssputs_r>:
 80096c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c8:	688e      	ldr	r6, [r1, #8]
 80096ca:	429e      	cmp	r6, r3
 80096cc:	4682      	mov	sl, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	4690      	mov	r8, r2
 80096d2:	461f      	mov	r7, r3
 80096d4:	d838      	bhi.n	8009748 <__ssputs_r+0x84>
 80096d6:	898a      	ldrh	r2, [r1, #12]
 80096d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096dc:	d032      	beq.n	8009744 <__ssputs_r+0x80>
 80096de:	6825      	ldr	r5, [r4, #0]
 80096e0:	6909      	ldr	r1, [r1, #16]
 80096e2:	eba5 0901 	sub.w	r9, r5, r1
 80096e6:	6965      	ldr	r5, [r4, #20]
 80096e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096f0:	3301      	adds	r3, #1
 80096f2:	444b      	add	r3, r9
 80096f4:	106d      	asrs	r5, r5, #1
 80096f6:	429d      	cmp	r5, r3
 80096f8:	bf38      	it	cc
 80096fa:	461d      	movcc	r5, r3
 80096fc:	0553      	lsls	r3, r2, #21
 80096fe:	d531      	bpl.n	8009764 <__ssputs_r+0xa0>
 8009700:	4629      	mov	r1, r5
 8009702:	f000 fb63 	bl	8009dcc <_malloc_r>
 8009706:	4606      	mov	r6, r0
 8009708:	b950      	cbnz	r0, 8009720 <__ssputs_r+0x5c>
 800970a:	230c      	movs	r3, #12
 800970c:	f8ca 3000 	str.w	r3, [sl]
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009716:	81a3      	strh	r3, [r4, #12]
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	6921      	ldr	r1, [r4, #16]
 8009722:	464a      	mov	r2, r9
 8009724:	f000 fabe 	bl	8009ca4 <memcpy>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800972e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	6126      	str	r6, [r4, #16]
 8009736:	6165      	str	r5, [r4, #20]
 8009738:	444e      	add	r6, r9
 800973a:	eba5 0509 	sub.w	r5, r5, r9
 800973e:	6026      	str	r6, [r4, #0]
 8009740:	60a5      	str	r5, [r4, #8]
 8009742:	463e      	mov	r6, r7
 8009744:	42be      	cmp	r6, r7
 8009746:	d900      	bls.n	800974a <__ssputs_r+0x86>
 8009748:	463e      	mov	r6, r7
 800974a:	6820      	ldr	r0, [r4, #0]
 800974c:	4632      	mov	r2, r6
 800974e:	4641      	mov	r1, r8
 8009750:	f000 fab6 	bl	8009cc0 <memmove>
 8009754:	68a3      	ldr	r3, [r4, #8]
 8009756:	1b9b      	subs	r3, r3, r6
 8009758:	60a3      	str	r3, [r4, #8]
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	4433      	add	r3, r6
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	2000      	movs	r0, #0
 8009762:	e7db      	b.n	800971c <__ssputs_r+0x58>
 8009764:	462a      	mov	r2, r5
 8009766:	f000 fba5 	bl	8009eb4 <_realloc_r>
 800976a:	4606      	mov	r6, r0
 800976c:	2800      	cmp	r0, #0
 800976e:	d1e1      	bne.n	8009734 <__ssputs_r+0x70>
 8009770:	6921      	ldr	r1, [r4, #16]
 8009772:	4650      	mov	r0, sl
 8009774:	f000 fabe 	bl	8009cf4 <_free_r>
 8009778:	e7c7      	b.n	800970a <__ssputs_r+0x46>
	...

0800977c <_svfiprintf_r>:
 800977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	4698      	mov	r8, r3
 8009782:	898b      	ldrh	r3, [r1, #12]
 8009784:	061b      	lsls	r3, r3, #24
 8009786:	b09d      	sub	sp, #116	; 0x74
 8009788:	4607      	mov	r7, r0
 800978a:	460d      	mov	r5, r1
 800978c:	4614      	mov	r4, r2
 800978e:	d50e      	bpl.n	80097ae <_svfiprintf_r+0x32>
 8009790:	690b      	ldr	r3, [r1, #16]
 8009792:	b963      	cbnz	r3, 80097ae <_svfiprintf_r+0x32>
 8009794:	2140      	movs	r1, #64	; 0x40
 8009796:	f000 fb19 	bl	8009dcc <_malloc_r>
 800979a:	6028      	str	r0, [r5, #0]
 800979c:	6128      	str	r0, [r5, #16]
 800979e:	b920      	cbnz	r0, 80097aa <_svfiprintf_r+0x2e>
 80097a0:	230c      	movs	r3, #12
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	e0d1      	b.n	800994e <_svfiprintf_r+0x1d2>
 80097aa:	2340      	movs	r3, #64	; 0x40
 80097ac:	616b      	str	r3, [r5, #20]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9309      	str	r3, [sp, #36]	; 0x24
 80097b2:	2320      	movs	r3, #32
 80097b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097bc:	2330      	movs	r3, #48	; 0x30
 80097be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009968 <_svfiprintf_r+0x1ec>
 80097c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c6:	f04f 0901 	mov.w	r9, #1
 80097ca:	4623      	mov	r3, r4
 80097cc:	469a      	mov	sl, r3
 80097ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d2:	b10a      	cbz	r2, 80097d8 <_svfiprintf_r+0x5c>
 80097d4:	2a25      	cmp	r2, #37	; 0x25
 80097d6:	d1f9      	bne.n	80097cc <_svfiprintf_r+0x50>
 80097d8:	ebba 0b04 	subs.w	fp, sl, r4
 80097dc:	d00b      	beq.n	80097f6 <_svfiprintf_r+0x7a>
 80097de:	465b      	mov	r3, fp
 80097e0:	4622      	mov	r2, r4
 80097e2:	4629      	mov	r1, r5
 80097e4:	4638      	mov	r0, r7
 80097e6:	f7ff ff6d 	bl	80096c4 <__ssputs_r>
 80097ea:	3001      	adds	r0, #1
 80097ec:	f000 80aa 	beq.w	8009944 <_svfiprintf_r+0x1c8>
 80097f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f2:	445a      	add	r2, fp
 80097f4:	9209      	str	r2, [sp, #36]	; 0x24
 80097f6:	f89a 3000 	ldrb.w	r3, [sl]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 80a2 	beq.w	8009944 <_svfiprintf_r+0x1c8>
 8009800:	2300      	movs	r3, #0
 8009802:	f04f 32ff 	mov.w	r2, #4294967295
 8009806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800980a:	f10a 0a01 	add.w	sl, sl, #1
 800980e:	9304      	str	r3, [sp, #16]
 8009810:	9307      	str	r3, [sp, #28]
 8009812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009816:	931a      	str	r3, [sp, #104]	; 0x68
 8009818:	4654      	mov	r4, sl
 800981a:	2205      	movs	r2, #5
 800981c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009820:	4851      	ldr	r0, [pc, #324]	; (8009968 <_svfiprintf_r+0x1ec>)
 8009822:	f7f6 fdc5 	bl	80003b0 <memchr>
 8009826:	9a04      	ldr	r2, [sp, #16]
 8009828:	b9d8      	cbnz	r0, 8009862 <_svfiprintf_r+0xe6>
 800982a:	06d0      	lsls	r0, r2, #27
 800982c:	bf44      	itt	mi
 800982e:	2320      	movmi	r3, #32
 8009830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009834:	0711      	lsls	r1, r2, #28
 8009836:	bf44      	itt	mi
 8009838:	232b      	movmi	r3, #43	; 0x2b
 800983a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800983e:	f89a 3000 	ldrb.w	r3, [sl]
 8009842:	2b2a      	cmp	r3, #42	; 0x2a
 8009844:	d015      	beq.n	8009872 <_svfiprintf_r+0xf6>
 8009846:	9a07      	ldr	r2, [sp, #28]
 8009848:	4654      	mov	r4, sl
 800984a:	2000      	movs	r0, #0
 800984c:	f04f 0c0a 	mov.w	ip, #10
 8009850:	4621      	mov	r1, r4
 8009852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009856:	3b30      	subs	r3, #48	; 0x30
 8009858:	2b09      	cmp	r3, #9
 800985a:	d94e      	bls.n	80098fa <_svfiprintf_r+0x17e>
 800985c:	b1b0      	cbz	r0, 800988c <_svfiprintf_r+0x110>
 800985e:	9207      	str	r2, [sp, #28]
 8009860:	e014      	b.n	800988c <_svfiprintf_r+0x110>
 8009862:	eba0 0308 	sub.w	r3, r0, r8
 8009866:	fa09 f303 	lsl.w	r3, r9, r3
 800986a:	4313      	orrs	r3, r2
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	46a2      	mov	sl, r4
 8009870:	e7d2      	b.n	8009818 <_svfiprintf_r+0x9c>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	1d19      	adds	r1, r3, #4
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	9103      	str	r1, [sp, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	bfbb      	ittet	lt
 800987e:	425b      	neglt	r3, r3
 8009880:	f042 0202 	orrlt.w	r2, r2, #2
 8009884:	9307      	strge	r3, [sp, #28]
 8009886:	9307      	strlt	r3, [sp, #28]
 8009888:	bfb8      	it	lt
 800988a:	9204      	strlt	r2, [sp, #16]
 800988c:	7823      	ldrb	r3, [r4, #0]
 800988e:	2b2e      	cmp	r3, #46	; 0x2e
 8009890:	d10c      	bne.n	80098ac <_svfiprintf_r+0x130>
 8009892:	7863      	ldrb	r3, [r4, #1]
 8009894:	2b2a      	cmp	r3, #42	; 0x2a
 8009896:	d135      	bne.n	8009904 <_svfiprintf_r+0x188>
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	1d1a      	adds	r2, r3, #4
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	9203      	str	r2, [sp, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bfb8      	it	lt
 80098a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80098a8:	3402      	adds	r4, #2
 80098aa:	9305      	str	r3, [sp, #20]
 80098ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009978 <_svfiprintf_r+0x1fc>
 80098b0:	7821      	ldrb	r1, [r4, #0]
 80098b2:	2203      	movs	r2, #3
 80098b4:	4650      	mov	r0, sl
 80098b6:	f7f6 fd7b 	bl	80003b0 <memchr>
 80098ba:	b140      	cbz	r0, 80098ce <_svfiprintf_r+0x152>
 80098bc:	2340      	movs	r3, #64	; 0x40
 80098be:	eba0 000a 	sub.w	r0, r0, sl
 80098c2:	fa03 f000 	lsl.w	r0, r3, r0
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	4303      	orrs	r3, r0
 80098ca:	3401      	adds	r4, #1
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d2:	4826      	ldr	r0, [pc, #152]	; (800996c <_svfiprintf_r+0x1f0>)
 80098d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098d8:	2206      	movs	r2, #6
 80098da:	f7f6 fd69 	bl	80003b0 <memchr>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d038      	beq.n	8009954 <_svfiprintf_r+0x1d8>
 80098e2:	4b23      	ldr	r3, [pc, #140]	; (8009970 <_svfiprintf_r+0x1f4>)
 80098e4:	bb1b      	cbnz	r3, 800992e <_svfiprintf_r+0x1b2>
 80098e6:	9b03      	ldr	r3, [sp, #12]
 80098e8:	3307      	adds	r3, #7
 80098ea:	f023 0307 	bic.w	r3, r3, #7
 80098ee:	3308      	adds	r3, #8
 80098f0:	9303      	str	r3, [sp, #12]
 80098f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f4:	4433      	add	r3, r6
 80098f6:	9309      	str	r3, [sp, #36]	; 0x24
 80098f8:	e767      	b.n	80097ca <_svfiprintf_r+0x4e>
 80098fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80098fe:	460c      	mov	r4, r1
 8009900:	2001      	movs	r0, #1
 8009902:	e7a5      	b.n	8009850 <_svfiprintf_r+0xd4>
 8009904:	2300      	movs	r3, #0
 8009906:	3401      	adds	r4, #1
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	4619      	mov	r1, r3
 800990c:	f04f 0c0a 	mov.w	ip, #10
 8009910:	4620      	mov	r0, r4
 8009912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009916:	3a30      	subs	r2, #48	; 0x30
 8009918:	2a09      	cmp	r2, #9
 800991a:	d903      	bls.n	8009924 <_svfiprintf_r+0x1a8>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0c5      	beq.n	80098ac <_svfiprintf_r+0x130>
 8009920:	9105      	str	r1, [sp, #20]
 8009922:	e7c3      	b.n	80098ac <_svfiprintf_r+0x130>
 8009924:	fb0c 2101 	mla	r1, ip, r1, r2
 8009928:	4604      	mov	r4, r0
 800992a:	2301      	movs	r3, #1
 800992c:	e7f0      	b.n	8009910 <_svfiprintf_r+0x194>
 800992e:	ab03      	add	r3, sp, #12
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	462a      	mov	r2, r5
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <_svfiprintf_r+0x1f8>)
 8009936:	a904      	add	r1, sp, #16
 8009938:	4638      	mov	r0, r7
 800993a:	f3af 8000 	nop.w
 800993e:	1c42      	adds	r2, r0, #1
 8009940:	4606      	mov	r6, r0
 8009942:	d1d6      	bne.n	80098f2 <_svfiprintf_r+0x176>
 8009944:	89ab      	ldrh	r3, [r5, #12]
 8009946:	065b      	lsls	r3, r3, #25
 8009948:	f53f af2c 	bmi.w	80097a4 <_svfiprintf_r+0x28>
 800994c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800994e:	b01d      	add	sp, #116	; 0x74
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009954:	ab03      	add	r3, sp, #12
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	462a      	mov	r2, r5
 800995a:	4b06      	ldr	r3, [pc, #24]	; (8009974 <_svfiprintf_r+0x1f8>)
 800995c:	a904      	add	r1, sp, #16
 800995e:	4638      	mov	r0, r7
 8009960:	f000 f87a 	bl	8009a58 <_printf_i>
 8009964:	e7eb      	b.n	800993e <_svfiprintf_r+0x1c2>
 8009966:	bf00      	nop
 8009968:	0800ce1c 	.word	0x0800ce1c
 800996c:	0800ce26 	.word	0x0800ce26
 8009970:	00000000 	.word	0x00000000
 8009974:	080096c5 	.word	0x080096c5
 8009978:	0800ce22 	.word	0x0800ce22

0800997c <_printf_common>:
 800997c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	4616      	mov	r6, r2
 8009982:	4699      	mov	r9, r3
 8009984:	688a      	ldr	r2, [r1, #8]
 8009986:	690b      	ldr	r3, [r1, #16]
 8009988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800998c:	4293      	cmp	r3, r2
 800998e:	bfb8      	it	lt
 8009990:	4613      	movlt	r3, r2
 8009992:	6033      	str	r3, [r6, #0]
 8009994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009998:	4607      	mov	r7, r0
 800999a:	460c      	mov	r4, r1
 800999c:	b10a      	cbz	r2, 80099a2 <_printf_common+0x26>
 800999e:	3301      	adds	r3, #1
 80099a0:	6033      	str	r3, [r6, #0]
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	0699      	lsls	r1, r3, #26
 80099a6:	bf42      	ittt	mi
 80099a8:	6833      	ldrmi	r3, [r6, #0]
 80099aa:	3302      	addmi	r3, #2
 80099ac:	6033      	strmi	r3, [r6, #0]
 80099ae:	6825      	ldr	r5, [r4, #0]
 80099b0:	f015 0506 	ands.w	r5, r5, #6
 80099b4:	d106      	bne.n	80099c4 <_printf_common+0x48>
 80099b6:	f104 0a19 	add.w	sl, r4, #25
 80099ba:	68e3      	ldr	r3, [r4, #12]
 80099bc:	6832      	ldr	r2, [r6, #0]
 80099be:	1a9b      	subs	r3, r3, r2
 80099c0:	42ab      	cmp	r3, r5
 80099c2:	dc26      	bgt.n	8009a12 <_printf_common+0x96>
 80099c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099c8:	1e13      	subs	r3, r2, #0
 80099ca:	6822      	ldr	r2, [r4, #0]
 80099cc:	bf18      	it	ne
 80099ce:	2301      	movne	r3, #1
 80099d0:	0692      	lsls	r2, r2, #26
 80099d2:	d42b      	bmi.n	8009a2c <_printf_common+0xb0>
 80099d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099d8:	4649      	mov	r1, r9
 80099da:	4638      	mov	r0, r7
 80099dc:	47c0      	blx	r8
 80099de:	3001      	adds	r0, #1
 80099e0:	d01e      	beq.n	8009a20 <_printf_common+0xa4>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	68e5      	ldr	r5, [r4, #12]
 80099e6:	6832      	ldr	r2, [r6, #0]
 80099e8:	f003 0306 	and.w	r3, r3, #6
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	bf08      	it	eq
 80099f0:	1aad      	subeq	r5, r5, r2
 80099f2:	68a3      	ldr	r3, [r4, #8]
 80099f4:	6922      	ldr	r2, [r4, #16]
 80099f6:	bf0c      	ite	eq
 80099f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099fc:	2500      	movne	r5, #0
 80099fe:	4293      	cmp	r3, r2
 8009a00:	bfc4      	itt	gt
 8009a02:	1a9b      	subgt	r3, r3, r2
 8009a04:	18ed      	addgt	r5, r5, r3
 8009a06:	2600      	movs	r6, #0
 8009a08:	341a      	adds	r4, #26
 8009a0a:	42b5      	cmp	r5, r6
 8009a0c:	d11a      	bne.n	8009a44 <_printf_common+0xc8>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	e008      	b.n	8009a24 <_printf_common+0xa8>
 8009a12:	2301      	movs	r3, #1
 8009a14:	4652      	mov	r2, sl
 8009a16:	4649      	mov	r1, r9
 8009a18:	4638      	mov	r0, r7
 8009a1a:	47c0      	blx	r8
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d103      	bne.n	8009a28 <_printf_common+0xac>
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a28:	3501      	adds	r5, #1
 8009a2a:	e7c6      	b.n	80099ba <_printf_common+0x3e>
 8009a2c:	18e1      	adds	r1, r4, r3
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	2030      	movs	r0, #48	; 0x30
 8009a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a36:	4422      	add	r2, r4
 8009a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a40:	3302      	adds	r3, #2
 8009a42:	e7c7      	b.n	80099d4 <_printf_common+0x58>
 8009a44:	2301      	movs	r3, #1
 8009a46:	4622      	mov	r2, r4
 8009a48:	4649      	mov	r1, r9
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	47c0      	blx	r8
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d0e6      	beq.n	8009a20 <_printf_common+0xa4>
 8009a52:	3601      	adds	r6, #1
 8009a54:	e7d9      	b.n	8009a0a <_printf_common+0x8e>
	...

08009a58 <_printf_i>:
 8009a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a5c:	7e0f      	ldrb	r7, [r1, #24]
 8009a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a60:	2f78      	cmp	r7, #120	; 0x78
 8009a62:	4691      	mov	r9, r2
 8009a64:	4680      	mov	r8, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	469a      	mov	sl, r3
 8009a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a6e:	d807      	bhi.n	8009a80 <_printf_i+0x28>
 8009a70:	2f62      	cmp	r7, #98	; 0x62
 8009a72:	d80a      	bhi.n	8009a8a <_printf_i+0x32>
 8009a74:	2f00      	cmp	r7, #0
 8009a76:	f000 80d8 	beq.w	8009c2a <_printf_i+0x1d2>
 8009a7a:	2f58      	cmp	r7, #88	; 0x58
 8009a7c:	f000 80a3 	beq.w	8009bc6 <_printf_i+0x16e>
 8009a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a88:	e03a      	b.n	8009b00 <_printf_i+0xa8>
 8009a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a8e:	2b15      	cmp	r3, #21
 8009a90:	d8f6      	bhi.n	8009a80 <_printf_i+0x28>
 8009a92:	a101      	add	r1, pc, #4	; (adr r1, 8009a98 <_printf_i+0x40>)
 8009a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a98:	08009af1 	.word	0x08009af1
 8009a9c:	08009b05 	.word	0x08009b05
 8009aa0:	08009a81 	.word	0x08009a81
 8009aa4:	08009a81 	.word	0x08009a81
 8009aa8:	08009a81 	.word	0x08009a81
 8009aac:	08009a81 	.word	0x08009a81
 8009ab0:	08009b05 	.word	0x08009b05
 8009ab4:	08009a81 	.word	0x08009a81
 8009ab8:	08009a81 	.word	0x08009a81
 8009abc:	08009a81 	.word	0x08009a81
 8009ac0:	08009a81 	.word	0x08009a81
 8009ac4:	08009c11 	.word	0x08009c11
 8009ac8:	08009b35 	.word	0x08009b35
 8009acc:	08009bf3 	.word	0x08009bf3
 8009ad0:	08009a81 	.word	0x08009a81
 8009ad4:	08009a81 	.word	0x08009a81
 8009ad8:	08009c33 	.word	0x08009c33
 8009adc:	08009a81 	.word	0x08009a81
 8009ae0:	08009b35 	.word	0x08009b35
 8009ae4:	08009a81 	.word	0x08009a81
 8009ae8:	08009a81 	.word	0x08009a81
 8009aec:	08009bfb 	.word	0x08009bfb
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	1d1a      	adds	r2, r3, #4
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	602a      	str	r2, [r5, #0]
 8009af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b00:	2301      	movs	r3, #1
 8009b02:	e0a3      	b.n	8009c4c <_printf_i+0x1f4>
 8009b04:	6820      	ldr	r0, [r4, #0]
 8009b06:	6829      	ldr	r1, [r5, #0]
 8009b08:	0606      	lsls	r6, r0, #24
 8009b0a:	f101 0304 	add.w	r3, r1, #4
 8009b0e:	d50a      	bpl.n	8009b26 <_printf_i+0xce>
 8009b10:	680e      	ldr	r6, [r1, #0]
 8009b12:	602b      	str	r3, [r5, #0]
 8009b14:	2e00      	cmp	r6, #0
 8009b16:	da03      	bge.n	8009b20 <_printf_i+0xc8>
 8009b18:	232d      	movs	r3, #45	; 0x2d
 8009b1a:	4276      	negs	r6, r6
 8009b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b20:	485e      	ldr	r0, [pc, #376]	; (8009c9c <_printf_i+0x244>)
 8009b22:	230a      	movs	r3, #10
 8009b24:	e019      	b.n	8009b5a <_printf_i+0x102>
 8009b26:	680e      	ldr	r6, [r1, #0]
 8009b28:	602b      	str	r3, [r5, #0]
 8009b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b2e:	bf18      	it	ne
 8009b30:	b236      	sxthne	r6, r6
 8009b32:	e7ef      	b.n	8009b14 <_printf_i+0xbc>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	6820      	ldr	r0, [r4, #0]
 8009b38:	1d19      	adds	r1, r3, #4
 8009b3a:	6029      	str	r1, [r5, #0]
 8009b3c:	0601      	lsls	r1, r0, #24
 8009b3e:	d501      	bpl.n	8009b44 <_printf_i+0xec>
 8009b40:	681e      	ldr	r6, [r3, #0]
 8009b42:	e002      	b.n	8009b4a <_printf_i+0xf2>
 8009b44:	0646      	lsls	r6, r0, #25
 8009b46:	d5fb      	bpl.n	8009b40 <_printf_i+0xe8>
 8009b48:	881e      	ldrh	r6, [r3, #0]
 8009b4a:	4854      	ldr	r0, [pc, #336]	; (8009c9c <_printf_i+0x244>)
 8009b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b4e:	bf0c      	ite	eq
 8009b50:	2308      	moveq	r3, #8
 8009b52:	230a      	movne	r3, #10
 8009b54:	2100      	movs	r1, #0
 8009b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b5a:	6865      	ldr	r5, [r4, #4]
 8009b5c:	60a5      	str	r5, [r4, #8]
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	bfa2      	ittt	ge
 8009b62:	6821      	ldrge	r1, [r4, #0]
 8009b64:	f021 0104 	bicge.w	r1, r1, #4
 8009b68:	6021      	strge	r1, [r4, #0]
 8009b6a:	b90e      	cbnz	r6, 8009b70 <_printf_i+0x118>
 8009b6c:	2d00      	cmp	r5, #0
 8009b6e:	d04d      	beq.n	8009c0c <_printf_i+0x1b4>
 8009b70:	4615      	mov	r5, r2
 8009b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b76:	fb03 6711 	mls	r7, r3, r1, r6
 8009b7a:	5dc7      	ldrb	r7, [r0, r7]
 8009b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b80:	4637      	mov	r7, r6
 8009b82:	42bb      	cmp	r3, r7
 8009b84:	460e      	mov	r6, r1
 8009b86:	d9f4      	bls.n	8009b72 <_printf_i+0x11a>
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d10b      	bne.n	8009ba4 <_printf_i+0x14c>
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	07de      	lsls	r6, r3, #31
 8009b90:	d508      	bpl.n	8009ba4 <_printf_i+0x14c>
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	6861      	ldr	r1, [r4, #4]
 8009b96:	4299      	cmp	r1, r3
 8009b98:	bfde      	ittt	le
 8009b9a:	2330      	movle	r3, #48	; 0x30
 8009b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ba4:	1b52      	subs	r2, r2, r5
 8009ba6:	6122      	str	r2, [r4, #16]
 8009ba8:	f8cd a000 	str.w	sl, [sp]
 8009bac:	464b      	mov	r3, r9
 8009bae:	aa03      	add	r2, sp, #12
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	f7ff fee2 	bl	800997c <_printf_common>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d14c      	bne.n	8009c56 <_printf_i+0x1fe>
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc0:	b004      	add	sp, #16
 8009bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc6:	4835      	ldr	r0, [pc, #212]	; (8009c9c <_printf_i+0x244>)
 8009bc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009bcc:	6829      	ldr	r1, [r5, #0]
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bd4:	6029      	str	r1, [r5, #0]
 8009bd6:	061d      	lsls	r5, r3, #24
 8009bd8:	d514      	bpl.n	8009c04 <_printf_i+0x1ac>
 8009bda:	07df      	lsls	r7, r3, #31
 8009bdc:	bf44      	itt	mi
 8009bde:	f043 0320 	orrmi.w	r3, r3, #32
 8009be2:	6023      	strmi	r3, [r4, #0]
 8009be4:	b91e      	cbnz	r6, 8009bee <_printf_i+0x196>
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	f023 0320 	bic.w	r3, r3, #32
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	2310      	movs	r3, #16
 8009bf0:	e7b0      	b.n	8009b54 <_printf_i+0xfc>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	f043 0320 	orr.w	r3, r3, #32
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	2378      	movs	r3, #120	; 0x78
 8009bfc:	4828      	ldr	r0, [pc, #160]	; (8009ca0 <_printf_i+0x248>)
 8009bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c02:	e7e3      	b.n	8009bcc <_printf_i+0x174>
 8009c04:	0659      	lsls	r1, r3, #25
 8009c06:	bf48      	it	mi
 8009c08:	b2b6      	uxthmi	r6, r6
 8009c0a:	e7e6      	b.n	8009bda <_printf_i+0x182>
 8009c0c:	4615      	mov	r5, r2
 8009c0e:	e7bb      	b.n	8009b88 <_printf_i+0x130>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	6826      	ldr	r6, [r4, #0]
 8009c14:	6961      	ldr	r1, [r4, #20]
 8009c16:	1d18      	adds	r0, r3, #4
 8009c18:	6028      	str	r0, [r5, #0]
 8009c1a:	0635      	lsls	r5, r6, #24
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	d501      	bpl.n	8009c24 <_printf_i+0x1cc>
 8009c20:	6019      	str	r1, [r3, #0]
 8009c22:	e002      	b.n	8009c2a <_printf_i+0x1d2>
 8009c24:	0670      	lsls	r0, r6, #25
 8009c26:	d5fb      	bpl.n	8009c20 <_printf_i+0x1c8>
 8009c28:	8019      	strh	r1, [r3, #0]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	6123      	str	r3, [r4, #16]
 8009c2e:	4615      	mov	r5, r2
 8009c30:	e7ba      	b.n	8009ba8 <_printf_i+0x150>
 8009c32:	682b      	ldr	r3, [r5, #0]
 8009c34:	1d1a      	adds	r2, r3, #4
 8009c36:	602a      	str	r2, [r5, #0]
 8009c38:	681d      	ldr	r5, [r3, #0]
 8009c3a:	6862      	ldr	r2, [r4, #4]
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f7f6 fbb6 	bl	80003b0 <memchr>
 8009c44:	b108      	cbz	r0, 8009c4a <_printf_i+0x1f2>
 8009c46:	1b40      	subs	r0, r0, r5
 8009c48:	6060      	str	r0, [r4, #4]
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	6123      	str	r3, [r4, #16]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c54:	e7a8      	b.n	8009ba8 <_printf_i+0x150>
 8009c56:	6923      	ldr	r3, [r4, #16]
 8009c58:	462a      	mov	r2, r5
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	47d0      	blx	sl
 8009c60:	3001      	adds	r0, #1
 8009c62:	d0ab      	beq.n	8009bbc <_printf_i+0x164>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	079b      	lsls	r3, r3, #30
 8009c68:	d413      	bmi.n	8009c92 <_printf_i+0x23a>
 8009c6a:	68e0      	ldr	r0, [r4, #12]
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	4298      	cmp	r0, r3
 8009c70:	bfb8      	it	lt
 8009c72:	4618      	movlt	r0, r3
 8009c74:	e7a4      	b.n	8009bc0 <_printf_i+0x168>
 8009c76:	2301      	movs	r3, #1
 8009c78:	4632      	mov	r2, r6
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	47d0      	blx	sl
 8009c80:	3001      	adds	r0, #1
 8009c82:	d09b      	beq.n	8009bbc <_printf_i+0x164>
 8009c84:	3501      	adds	r5, #1
 8009c86:	68e3      	ldr	r3, [r4, #12]
 8009c88:	9903      	ldr	r1, [sp, #12]
 8009c8a:	1a5b      	subs	r3, r3, r1
 8009c8c:	42ab      	cmp	r3, r5
 8009c8e:	dcf2      	bgt.n	8009c76 <_printf_i+0x21e>
 8009c90:	e7eb      	b.n	8009c6a <_printf_i+0x212>
 8009c92:	2500      	movs	r5, #0
 8009c94:	f104 0619 	add.w	r6, r4, #25
 8009c98:	e7f5      	b.n	8009c86 <_printf_i+0x22e>
 8009c9a:	bf00      	nop
 8009c9c:	0800ce2d 	.word	0x0800ce2d
 8009ca0:	0800ce3e 	.word	0x0800ce3e

08009ca4 <memcpy>:
 8009ca4:	440a      	add	r2, r1
 8009ca6:	4291      	cmp	r1, r2
 8009ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cac:	d100      	bne.n	8009cb0 <memcpy+0xc>
 8009cae:	4770      	bx	lr
 8009cb0:	b510      	push	{r4, lr}
 8009cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cba:	4291      	cmp	r1, r2
 8009cbc:	d1f9      	bne.n	8009cb2 <memcpy+0xe>
 8009cbe:	bd10      	pop	{r4, pc}

08009cc0 <memmove>:
 8009cc0:	4288      	cmp	r0, r1
 8009cc2:	b510      	push	{r4, lr}
 8009cc4:	eb01 0402 	add.w	r4, r1, r2
 8009cc8:	d902      	bls.n	8009cd0 <memmove+0x10>
 8009cca:	4284      	cmp	r4, r0
 8009ccc:	4623      	mov	r3, r4
 8009cce:	d807      	bhi.n	8009ce0 <memmove+0x20>
 8009cd0:	1e43      	subs	r3, r0, #1
 8009cd2:	42a1      	cmp	r1, r4
 8009cd4:	d008      	beq.n	8009ce8 <memmove+0x28>
 8009cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cde:	e7f8      	b.n	8009cd2 <memmove+0x12>
 8009ce0:	4402      	add	r2, r0
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	428a      	cmp	r2, r1
 8009ce6:	d100      	bne.n	8009cea <memmove+0x2a>
 8009ce8:	bd10      	pop	{r4, pc}
 8009cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cf2:	e7f7      	b.n	8009ce4 <memmove+0x24>

08009cf4 <_free_r>:
 8009cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cf6:	2900      	cmp	r1, #0
 8009cf8:	d044      	beq.n	8009d84 <_free_r+0x90>
 8009cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfe:	9001      	str	r0, [sp, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f1a1 0404 	sub.w	r4, r1, #4
 8009d06:	bfb8      	it	lt
 8009d08:	18e4      	addlt	r4, r4, r3
 8009d0a:	f000 f913 	bl	8009f34 <__malloc_lock>
 8009d0e:	4a1e      	ldr	r2, [pc, #120]	; (8009d88 <_free_r+0x94>)
 8009d10:	9801      	ldr	r0, [sp, #4]
 8009d12:	6813      	ldr	r3, [r2, #0]
 8009d14:	b933      	cbnz	r3, 8009d24 <_free_r+0x30>
 8009d16:	6063      	str	r3, [r4, #4]
 8009d18:	6014      	str	r4, [r2, #0]
 8009d1a:	b003      	add	sp, #12
 8009d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d20:	f000 b90e 	b.w	8009f40 <__malloc_unlock>
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	d908      	bls.n	8009d3a <_free_r+0x46>
 8009d28:	6825      	ldr	r5, [r4, #0]
 8009d2a:	1961      	adds	r1, r4, r5
 8009d2c:	428b      	cmp	r3, r1
 8009d2e:	bf01      	itttt	eq
 8009d30:	6819      	ldreq	r1, [r3, #0]
 8009d32:	685b      	ldreq	r3, [r3, #4]
 8009d34:	1949      	addeq	r1, r1, r5
 8009d36:	6021      	streq	r1, [r4, #0]
 8009d38:	e7ed      	b.n	8009d16 <_free_r+0x22>
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	b10b      	cbz	r3, 8009d44 <_free_r+0x50>
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d9fa      	bls.n	8009d3a <_free_r+0x46>
 8009d44:	6811      	ldr	r1, [r2, #0]
 8009d46:	1855      	adds	r5, r2, r1
 8009d48:	42a5      	cmp	r5, r4
 8009d4a:	d10b      	bne.n	8009d64 <_free_r+0x70>
 8009d4c:	6824      	ldr	r4, [r4, #0]
 8009d4e:	4421      	add	r1, r4
 8009d50:	1854      	adds	r4, r2, r1
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	6011      	str	r1, [r2, #0]
 8009d56:	d1e0      	bne.n	8009d1a <_free_r+0x26>
 8009d58:	681c      	ldr	r4, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	6053      	str	r3, [r2, #4]
 8009d5e:	4421      	add	r1, r4
 8009d60:	6011      	str	r1, [r2, #0]
 8009d62:	e7da      	b.n	8009d1a <_free_r+0x26>
 8009d64:	d902      	bls.n	8009d6c <_free_r+0x78>
 8009d66:	230c      	movs	r3, #12
 8009d68:	6003      	str	r3, [r0, #0]
 8009d6a:	e7d6      	b.n	8009d1a <_free_r+0x26>
 8009d6c:	6825      	ldr	r5, [r4, #0]
 8009d6e:	1961      	adds	r1, r4, r5
 8009d70:	428b      	cmp	r3, r1
 8009d72:	bf04      	itt	eq
 8009d74:	6819      	ldreq	r1, [r3, #0]
 8009d76:	685b      	ldreq	r3, [r3, #4]
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	bf04      	itt	eq
 8009d7c:	1949      	addeq	r1, r1, r5
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	6054      	str	r4, [r2, #4]
 8009d82:	e7ca      	b.n	8009d1a <_free_r+0x26>
 8009d84:	b003      	add	sp, #12
 8009d86:	bd30      	pop	{r4, r5, pc}
 8009d88:	24004890 	.word	0x24004890

08009d8c <sbrk_aligned>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4e0e      	ldr	r6, [pc, #56]	; (8009dc8 <sbrk_aligned+0x3c>)
 8009d90:	460c      	mov	r4, r1
 8009d92:	6831      	ldr	r1, [r6, #0]
 8009d94:	4605      	mov	r5, r0
 8009d96:	b911      	cbnz	r1, 8009d9e <sbrk_aligned+0x12>
 8009d98:	f000 f8bc 	bl	8009f14 <_sbrk_r>
 8009d9c:	6030      	str	r0, [r6, #0]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 f8b7 	bl	8009f14 <_sbrk_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d00a      	beq.n	8009dc0 <sbrk_aligned+0x34>
 8009daa:	1cc4      	adds	r4, r0, #3
 8009dac:	f024 0403 	bic.w	r4, r4, #3
 8009db0:	42a0      	cmp	r0, r4
 8009db2:	d007      	beq.n	8009dc4 <sbrk_aligned+0x38>
 8009db4:	1a21      	subs	r1, r4, r0
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f8ac 	bl	8009f14 <_sbrk_r>
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d101      	bne.n	8009dc4 <sbrk_aligned+0x38>
 8009dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	24004894 	.word	0x24004894

08009dcc <_malloc_r>:
 8009dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd0:	1ccd      	adds	r5, r1, #3
 8009dd2:	f025 0503 	bic.w	r5, r5, #3
 8009dd6:	3508      	adds	r5, #8
 8009dd8:	2d0c      	cmp	r5, #12
 8009dda:	bf38      	it	cc
 8009ddc:	250c      	movcc	r5, #12
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	4607      	mov	r7, r0
 8009de2:	db01      	blt.n	8009de8 <_malloc_r+0x1c>
 8009de4:	42a9      	cmp	r1, r5
 8009de6:	d905      	bls.n	8009df4 <_malloc_r+0x28>
 8009de8:	230c      	movs	r3, #12
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	2600      	movs	r6, #0
 8009dee:	4630      	mov	r0, r6
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	4e2e      	ldr	r6, [pc, #184]	; (8009eb0 <_malloc_r+0xe4>)
 8009df6:	f000 f89d 	bl	8009f34 <__malloc_lock>
 8009dfa:	6833      	ldr	r3, [r6, #0]
 8009dfc:	461c      	mov	r4, r3
 8009dfe:	bb34      	cbnz	r4, 8009e4e <_malloc_r+0x82>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4638      	mov	r0, r7
 8009e04:	f7ff ffc2 	bl	8009d8c <sbrk_aligned>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	d14d      	bne.n	8009eaa <_malloc_r+0xde>
 8009e0e:	6834      	ldr	r4, [r6, #0]
 8009e10:	4626      	mov	r6, r4
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	d140      	bne.n	8009e98 <_malloc_r+0xcc>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	eb04 0803 	add.w	r8, r4, r3
 8009e20:	f000 f878 	bl	8009f14 <_sbrk_r>
 8009e24:	4580      	cmp	r8, r0
 8009e26:	d13a      	bne.n	8009e9e <_malloc_r+0xd2>
 8009e28:	6821      	ldr	r1, [r4, #0]
 8009e2a:	3503      	adds	r5, #3
 8009e2c:	1a6d      	subs	r5, r5, r1
 8009e2e:	f025 0503 	bic.w	r5, r5, #3
 8009e32:	3508      	adds	r5, #8
 8009e34:	2d0c      	cmp	r5, #12
 8009e36:	bf38      	it	cc
 8009e38:	250c      	movcc	r5, #12
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f7ff ffa5 	bl	8009d8c <sbrk_aligned>
 8009e42:	3001      	adds	r0, #1
 8009e44:	d02b      	beq.n	8009e9e <_malloc_r+0xd2>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	442b      	add	r3, r5
 8009e4a:	6023      	str	r3, [r4, #0]
 8009e4c:	e00e      	b.n	8009e6c <_malloc_r+0xa0>
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	1b52      	subs	r2, r2, r5
 8009e52:	d41e      	bmi.n	8009e92 <_malloc_r+0xc6>
 8009e54:	2a0b      	cmp	r2, #11
 8009e56:	d916      	bls.n	8009e86 <_malloc_r+0xba>
 8009e58:	1961      	adds	r1, r4, r5
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	6025      	str	r5, [r4, #0]
 8009e5e:	bf18      	it	ne
 8009e60:	6059      	strne	r1, [r3, #4]
 8009e62:	6863      	ldr	r3, [r4, #4]
 8009e64:	bf08      	it	eq
 8009e66:	6031      	streq	r1, [r6, #0]
 8009e68:	5162      	str	r2, [r4, r5]
 8009e6a:	604b      	str	r3, [r1, #4]
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f104 060b 	add.w	r6, r4, #11
 8009e72:	f000 f865 	bl	8009f40 <__malloc_unlock>
 8009e76:	f026 0607 	bic.w	r6, r6, #7
 8009e7a:	1d23      	adds	r3, r4, #4
 8009e7c:	1af2      	subs	r2, r6, r3
 8009e7e:	d0b6      	beq.n	8009dee <_malloc_r+0x22>
 8009e80:	1b9b      	subs	r3, r3, r6
 8009e82:	50a3      	str	r3, [r4, r2]
 8009e84:	e7b3      	b.n	8009dee <_malloc_r+0x22>
 8009e86:	6862      	ldr	r2, [r4, #4]
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	bf0c      	ite	eq
 8009e8c:	6032      	streq	r2, [r6, #0]
 8009e8e:	605a      	strne	r2, [r3, #4]
 8009e90:	e7ec      	b.n	8009e6c <_malloc_r+0xa0>
 8009e92:	4623      	mov	r3, r4
 8009e94:	6864      	ldr	r4, [r4, #4]
 8009e96:	e7b2      	b.n	8009dfe <_malloc_r+0x32>
 8009e98:	4634      	mov	r4, r6
 8009e9a:	6876      	ldr	r6, [r6, #4]
 8009e9c:	e7b9      	b.n	8009e12 <_malloc_r+0x46>
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	603b      	str	r3, [r7, #0]
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	f000 f84c 	bl	8009f40 <__malloc_unlock>
 8009ea8:	e7a1      	b.n	8009dee <_malloc_r+0x22>
 8009eaa:	6025      	str	r5, [r4, #0]
 8009eac:	e7de      	b.n	8009e6c <_malloc_r+0xa0>
 8009eae:	bf00      	nop
 8009eb0:	24004890 	.word	0x24004890

08009eb4 <_realloc_r>:
 8009eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb8:	4680      	mov	r8, r0
 8009eba:	4614      	mov	r4, r2
 8009ebc:	460e      	mov	r6, r1
 8009ebe:	b921      	cbnz	r1, 8009eca <_realloc_r+0x16>
 8009ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	f7ff bf81 	b.w	8009dcc <_malloc_r>
 8009eca:	b92a      	cbnz	r2, 8009ed8 <_realloc_r+0x24>
 8009ecc:	f7ff ff12 	bl	8009cf4 <_free_r>
 8009ed0:	4625      	mov	r5, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed8:	f000 f838 	bl	8009f4c <_malloc_usable_size_r>
 8009edc:	4284      	cmp	r4, r0
 8009ede:	4607      	mov	r7, r0
 8009ee0:	d802      	bhi.n	8009ee8 <_realloc_r+0x34>
 8009ee2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ee6:	d812      	bhi.n	8009f0e <_realloc_r+0x5a>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4640      	mov	r0, r8
 8009eec:	f7ff ff6e 	bl	8009dcc <_malloc_r>
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d0ed      	beq.n	8009ed2 <_realloc_r+0x1e>
 8009ef6:	42bc      	cmp	r4, r7
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4631      	mov	r1, r6
 8009efc:	bf28      	it	cs
 8009efe:	463a      	movcs	r2, r7
 8009f00:	f7ff fed0 	bl	8009ca4 <memcpy>
 8009f04:	4631      	mov	r1, r6
 8009f06:	4640      	mov	r0, r8
 8009f08:	f7ff fef4 	bl	8009cf4 <_free_r>
 8009f0c:	e7e1      	b.n	8009ed2 <_realloc_r+0x1e>
 8009f0e:	4635      	mov	r5, r6
 8009f10:	e7df      	b.n	8009ed2 <_realloc_r+0x1e>
	...

08009f14 <_sbrk_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d06      	ldr	r5, [pc, #24]	; (8009f30 <_sbrk_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7f7 fa34 	bl	800138c <_sbrk>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_sbrk_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_sbrk_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	24004898 	.word	0x24004898

08009f34 <__malloc_lock>:
 8009f34:	4801      	ldr	r0, [pc, #4]	; (8009f3c <__malloc_lock+0x8>)
 8009f36:	f000 b811 	b.w	8009f5c <__retarget_lock_acquire_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	2400489c 	.word	0x2400489c

08009f40 <__malloc_unlock>:
 8009f40:	4801      	ldr	r0, [pc, #4]	; (8009f48 <__malloc_unlock+0x8>)
 8009f42:	f000 b80c 	b.w	8009f5e <__retarget_lock_release_recursive>
 8009f46:	bf00      	nop
 8009f48:	2400489c 	.word	0x2400489c

08009f4c <_malloc_usable_size_r>:
 8009f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f50:	1f18      	subs	r0, r3, #4
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	bfbc      	itt	lt
 8009f56:	580b      	ldrlt	r3, [r1, r0]
 8009f58:	18c0      	addlt	r0, r0, r3
 8009f5a:	4770      	bx	lr

08009f5c <__retarget_lock_acquire_recursive>:
 8009f5c:	4770      	bx	lr

08009f5e <__retarget_lock_release_recursive>:
 8009f5e:	4770      	bx	lr

08009f60 <sqrtf>:
 8009f60:	b508      	push	{r3, lr}
 8009f62:	ed2d 8b02 	vpush	{d8}
 8009f66:	eeb0 8a40 	vmov.f32	s16, s0
 8009f6a:	f000 f817 	bl	8009f9c <__ieee754_sqrtf>
 8009f6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f76:	d60c      	bvs.n	8009f92 <sqrtf+0x32>
 8009f78:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009f98 <sqrtf+0x38>
 8009f7c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f84:	d505      	bpl.n	8009f92 <sqrtf+0x32>
 8009f86:	f7ff fb4b 	bl	8009620 <__errno>
 8009f8a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009f8e:	2321      	movs	r3, #33	; 0x21
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	ecbd 8b02 	vpop	{d8}
 8009f96:	bd08      	pop	{r3, pc}
 8009f98:	00000000 	.word	0x00000000

08009f9c <__ieee754_sqrtf>:
 8009f9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009fa0:	4770      	bx	lr
	...

08009fa4 <_init>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr

08009fb0 <_fini>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	bf00      	nop
 8009fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb6:	bc08      	pop	{r3}
 8009fb8:	469e      	mov	lr, r3
 8009fba:	4770      	bx	lr
